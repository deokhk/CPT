{"db_id": "concert_singer", "question": "我们有多少歌手？", "query": "select count ( * ) from singer", "predicted_sql": "select count ( singer.singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 我们有多少歌手？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "歌手的总数是多少？", "query": "select count ( * ) from singer", "predicted_sql": "select count ( singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 歌手的总数是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "按歌手年龄从最大到最小，显示每个歌手的姓名、国家、年龄。", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select singer.name  , singer.country  , singer.age from singer order by singer.age desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 按歌手年龄从最大到最小，显示每个歌手的姓名、国家、年龄。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "按年龄降序，每个歌手的名字、国家、年龄是什么？", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select singer.name  , singer.country  , singer.age from singer order by singer.age desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 按年龄降序，每个歌手的名字、国家、年龄是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "法国所有歌手的平均年龄、最小年龄和最大年龄是多少？", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = '法国'", "predicted_sql": "select avg ( age ) as average_age  , min ( age ) as min_age  , max ( age ) as max_age from singer where country = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 法国所有歌手的平均年龄、最小年龄和最大年龄是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "所有法国歌手的平均年龄、最小年龄和最大年龄是多少？", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = '法国'", "predicted_sql": "select avg ( age ) as average_age  , min ( age ) as min_age  , max ( age ) as max_age from singer where country = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 所有法国歌手的平均年龄、最小年龄和最大年龄是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示最年轻歌手的歌曲的名字和发行年份。", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.song_name  , singer.song_release_year from singer order by singer.age asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示最年轻歌手的歌曲的名字和发行年份。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "最年轻歌手的所有歌曲的名字和发行年是多少？", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.song_name  , singer.song_release_year from singer where singer.age = ( select min ( age ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 最年轻歌手的所有歌曲的名字和发行年是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "20岁以上的歌手来自哪些不同国家？", "query": "select distinct country from singer where age > 20", "predicted_sql": "select distinct country from singer where age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 20岁以上的歌手来自哪些不同国家？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "哪些国家有20岁以上的歌手？", "query": "select distinct country from singer where age > 20", "predicted_sql": "select distinct country from singer where age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 哪些国家有20岁以上的歌手？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示所有不同国家和每个国家的歌手数量。", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select singer.country  , count ( singer.singer_id ) as singer_count from singer group by singer.country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示所有不同国家和每个国家的歌手数量。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "每个国家有多少歌手？", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select singer.country  , count ( singer.singer_id ) as num_singers from singer group by singer.country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 每个国家有多少歌手？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "列出高于平均年龄的歌手的所有歌名。", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.song_name from singer where singer.age > ( select avg ( age ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 列出高于平均年龄的歌手的所有歌名。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "年龄高于平均年龄的歌手的所有歌名有哪些?", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.song_name from singer where singer.age > ( select avg ( age ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 年龄高于平均年龄的歌手的所有歌名有哪些? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示容量在5000到10000之间的所有体育场馆的位置和名称。", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示容量在5000到10000之间的所有体育场馆的位置和名称。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "容量在5000到10000之间的所有体育场的位置和名称是什么？", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 容量在5000到10000之间的所有体育场的位置和名称是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "所有体育场的平均容量和最大容量是多少？", "query": "select avg ( capacity ) , max ( capacity ) from stadium", "predicted_sql": "select avg ( capacity )  , max ( capacity ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 所有体育场的平均容量和最大容量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "所有体育场的平均容量和最大容量是多少？", "query": "select avg ( capacity ) , max ( capacity ) from stadium", "predicted_sql": "select avg ( capacity )  , max ( capacity ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 所有体育场的平均容量和最大容量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "平均到场率最高的体育场名称和容量是多少？", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium order by stadium.average desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 平均到场率最高的体育场名称和容量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "平均到场率最高的体育场的名称是什么，有多少容量？", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium order by stadium.average desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 平均到场率最高的体育场的名称是什么，有多少容量？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014或2015年有多少演唱会？", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select count ( * ) from concert where year = 2014 or year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014或2015年有多少演唱会？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "有多少演唱会在2014或2015年？", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select count ( * ) from concert where year = 2014 or year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 有多少演唱会在2014或2015年？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示体育场的名称和每个体育场举办音乐会的数量。", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select stadium.name  , count ( concert.concert_id ) as concert_count from stadium inner join concert on stadium.stadium_id = concert.stadium_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示体育场的名称和每个体育场举办音乐会的数量。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "每个体育场有多少场音乐会？", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select stadium.name  , count ( concert.concert_id ) as num_concerts from stadium inner join concert on stadium.stadium_id = concert.stadium_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 每个体育场有多少场音乐会？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "在2014年或之后举办的音乐会最多的体育场的名称和容量。", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.name  , stadium.capacity order by count ( concert.concert_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 在2014年或之后举办的音乐会最多的体育场的名称和容量。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "在2013年以后音乐会最多的体育场名称和容量是多少？", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by stadium.name  , stadium.capacity order by count ( concert.concert_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 在2013年以后音乐会最多的体育场名称和容量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "哪一年音乐会最多？", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select concert.year  , count ( concert.concert_id ) as num_concerts from concert group by concert.year order by num_concerts desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 哪一年音乐会最多？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "音乐会最多的是哪一年？", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select concert.year from concert group by concert.year order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 音乐会最多的是哪一年？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "没有音乐会的体育场的名称。", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.name from stadium left join concert on stadium.stadium_id = concert.stadium_id where concert.concert_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 没有音乐会的体育场的名称。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "没有音乐会的体育场名称是什么？", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 没有音乐会的体育场名称是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示40岁以上和30岁以下的歌手所来自的国家。", "query": "select country from singer where age > 40 intersect select country from singer where age < 30", "predicted_sql": "select singer.country from singer where singer.age > 40 or singer.age < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示40岁以上和30岁以下的歌手所来自的国家。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示除了2014年有音乐会的场馆外的所有体育场的名称。", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示除了2014年有音乐会的场馆外的所有体育场的名称。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014年没有举办音乐会的所有体育场名称是什么？", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014年没有举办音乐会的所有体育场名称是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "显示所有音乐会的名称和主题以及每场音乐会的歌手人数。", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select concert.concert_name  , concert.theme  , count ( singer_in_concert.singer_id ) as singer_count from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 显示所有音乐会的名称和主题以及每场音乐会的歌手人数。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "每场演唱会的名称、主题和歌手数量是多少？", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select concert.concert_name  , concert.theme  , count ( singer_in_concert.singer_id ) as singer_count from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 每场演唱会的名称、主题和歌手数量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "列出歌手的名字和每个歌手的演唱会的次数。", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 列出歌手的名字和每个歌手的演唱会的次数。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "每个歌手的名字和演唱会的数量是多少？", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 每个歌手的名字和演唱会的数量是多少？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "列出2014年音乐会上所有歌手的名字。", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 列出2014年音乐会上所有歌手的名字。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014年在演唱会上演唱的歌手的名字是什么？", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014年在演唱会上演唱的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "有首歌名含有'你'的歌手的名字和国籍是什么？", "query": "select name , country from singer where song_name like '你'", "predicted_sql": "select singer.name  , singer.country from singer where singer.song_name like '%你%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 有首歌名含有'你'的歌手的名字和国籍是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "歌名中有'你'这个词的所有歌手的姓名和原籍国是什么？", "query": "select name , country from singer where song_name like '你'", "predicted_sql": "select singer.name  , singer.country from singer where singer.song_name like '%你%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 歌名中有'你'这个词的所有歌手的姓名和原籍国是什么？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "找出同时在2014年和2015年举办音乐会的场馆的名称和地点。", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select stadium.name  , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 and exists ( select 1 from concert as c where c.stadium_id = concert.stadium_id and c.year = 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 找出同时在2014年和2015年举办音乐会的场馆的名称和地点。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "在2014年和2015年同时举办音乐会的场馆名称和地点有哪些？", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select stadium.name  , stadium.location from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.concert_id in ( select concert_id from concert where year = 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 在2014年和2015年同时举办音乐会的场馆名称和地点有哪些？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "找出有着最大容量的体育场举办的音乐会数量。", "query": "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id order by stadium.capacity desc limit 1", "predicted_sql": "select count ( concert.concert_id ) from stadium join concert on stadium.stadium_id = concert.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 找出有着最大容量的体育场举办的音乐会数量。 \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "在容量最大的体育场里有多少场音乐会？", "query": "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id order by stadium.capacity desc limit 1", "predicted_sql": "select count ( concert.concert_id ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 在容量最大的体育场里有多少场音乐会？ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "pets_1", "question": "找出体重大于10的宠物的数量。", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select count ( * ) from pets where weight > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出体重大于10的宠物的数量。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "有多少宠物的体重比10大？", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select count ( * ) from pets where weight > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 有多少宠物的体重比10大？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找到最年轻的狗的体重。", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select min ( pets.weight ) from pets where pets.pettype = 'dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找到最年轻的狗的体重。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "最年轻的狗有多重？", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select min ( pets.weight ) from pets where pets.pettype = 'dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 最年轻的狗有多重？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出每种宠物的最大重量。列出最大重量和宠物类型。", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select max ( pets.weight ) as max_weight  , pets.pettype from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出每种宠物的最大重量。列出最大重量和宠物类型。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "列出每种宠物的最大重量和类型。", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , max ( pets.weight ) as max_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 列出每种宠物的最大重量和类型。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出20岁以上学生拥有的宠物数量。", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select student.stuid  , count ( has_pet.petid ) as pet_count from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20 group by student.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出20岁以上学生拥有的宠物数量。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "年龄大于20岁的学生拥有多少宠物？", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 年龄大于20岁的学生拥有多少宠物？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出由女学生（性别为'女'）养的宠物狗的数量。", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = '女' and pets.pettype = '狗'", "predicted_sql": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = '女' and pets.pettype = '狗'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出由女学生（性别为'女'）养的宠物狗的数量。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "女学生养了多少只宠物狗？", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = '女' and pets.pettype = '狗'", "predicted_sql": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'female' and pets.pettype = 'dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 女学生养了多少只宠物狗？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出不同类型宠物的数量。", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select pets.pettype  , count ( * ) as count from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出不同类型宠物的数量。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "有多少种不同类型的宠物？", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select count ( distinct pettype ) from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 有多少种不同类型的宠物？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "查找有猫狗宠物的学生的名字。", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' or pets.pettype = '狗'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype in ( '猫'  , '狗' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 查找有猫狗宠物的学生的名字。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "每一个养猫或狗的学生的名字是什么？", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' or pets.pettype = '狗'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = '猫' or pets.pettype = '狗'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 每一个养猫或狗的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出既有猫又有狗的学生的名字。", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '狗'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = '猫' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = '狗'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出既有猫又有狗的学生的名字。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "有猫又有狗的学生名字是什么？", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '狗'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = '猫' and student.stuid in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = '狗' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 有猫又有狗的学生名字是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找到没有宠物猫的学生的专业和年龄。", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' )", "predicted_sql": "select student.major  , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找到没有宠物猫的学生的专业和年龄。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "每个不养猫的学生都学什么专业？他们多大了？", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' )", "predicted_sql": "select student.major  , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 每个不养猫的学生都学什么专业？他们多大了？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找到没有宠物猫的学生的ID。", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫'", "predicted_sql": "select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找到没有宠物猫的学生的ID。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "那些没有猫的学生的ID是什么？", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫'", "predicted_sql": "select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 那些没有猫的学生的ID是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出有狗但没有猫的学生的名字和年龄。", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '狗' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' )", "predicted_sql": "select student.fname  , student.age from student where student.stuid in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' ) and student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出有狗但没有猫的学生的名字和年龄。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "养狗但没有养猫的学生的名字是什么？", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '狗' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = '猫' )", "predicted_sql": "select student.fname  , student.lname from student where student.stuid in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = '狗' ) and student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = '猫' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 养狗但没有养猫的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出最年轻的宠物的类型和体重。", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select pets.pettype  , pets.weight from pets where pets.pet_age = ( select min ( pets.pet_age ) from pets )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出最年轻的宠物的类型和体重。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "最年轻的宠物是什么类型的，它的重量是多少？", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select pets.pettype  , pets.weight from pets where pets.pet_age = ( select min ( pets.pet_age ) from pets )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 最年轻的宠物是什么类型的，它的重量是多少？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出所有年龄大于1岁的宠物的ID和体重。", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select has_pet.petid  , pets.weight from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出所有年龄大于1岁的宠物的ID和体重。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "每一个1岁以上的宠物的ID和体重是多少？", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select has_pet.petid  , pets.weight from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 每一个1岁以上的宠物的ID和体重是多少？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出每种宠物的平均年龄和最大年龄。", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select pettype  , avg ( pet_age ) as average_age  , max ( pet_age ) as max_age from pets group by pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出每种宠物的平均年龄和最大年龄。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "每种宠物的平均年龄和最大年龄是多少？", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , avg ( pets.pet_age ) as average_age  , max ( pets.pet_age ) as max_age from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 每种宠物的平均年龄和最大年龄是多少？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找到每种宠物类型的平均体重。", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , avg ( pets.weight ) as average_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找到每种宠物类型的平均体重。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "每种宠物的平均体重是多少？", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , avg ( pets.weight ) as average_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 每种宠物的平均体重是多少？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出有宠物的学生的名字和年龄。", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.age from student inner join has_pet on student.stuid = has_pet.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出有宠物的学生的名字和年龄。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "有宠物的学生有哪些不同的名字和年龄？", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.age from student inner join has_pet on student.stuid = has_pet.stuid inner join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 有宠物的学生有哪些不同的名字和年龄？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出有宠物而且姓为'琳'的学生的ID。", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = '琳'", "predicted_sql": "select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.lname = '琳'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出有宠物而且姓为'琳'的学生的ID。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "那个姓'琳'而且有宠物的学生的ID是什么？", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = '琳'", "predicted_sql": "select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.lname = '琳'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 那个姓'琳'而且有宠物的学生的ID是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出每个有宠物的学生的ID和宠物数量。", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.stuid  , count ( has_pet.petid ) as pet_count from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出每个有宠物的学生的ID和宠物数量。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "对于有宠物的学生，每个学生有多少宠物？", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.stuid  , count ( has_pet.petid ) as num_pets from student inner join has_pet on student.stuid = has_pet.stuid group by student.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 对于有宠物的学生，每个学生有多少宠物？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出拥有不止一只宠物的学生的名字和性别。", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.fname  , student.sex having count ( has_pet.petid ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出拥有不止一只宠物的学生的名字和性别。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "所有拥有多只宠物的学生的名和性别是什么？", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.sex from student where student.stuid in ( select has_pet.stuid from has_pet group by has_pet.stuid having count ( has_pet.petid ) > 1 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 所有拥有多只宠物的学生的名和性别是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出有一只3岁猫的学生的姓氏。", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = '猫'", "predicted_sql": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出有一只3岁猫的学生的姓氏。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "有一只3岁猫的学生的姓氏是什么？", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = '猫'", "predicted_sql": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 有一只3岁猫的学生的姓氏是什么？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "找出没有宠物的学生的平均年龄。", "query": "select avg ( age ) from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid )", "predicted_sql": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 找出没有宠物的学生的平均年龄。 \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "所有没有宠物的学生平均年龄是多少？", "query": "select avg ( age ) from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid )", "predicted_sql": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 所有没有宠物的学生平均年龄是多少？ \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "car_1", "question": "有多少大洲？", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少大洲？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "大洲的数量是多少？", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 大洲的数量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个洲有多少个国家？列出大洲ID、大洲名称和国家数目。", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.contid  , continents.continent  , count ( countries.countryid ) as country_count from continents join countries on countries.continent = continents.contid group by continents.contid  , continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个洲有多少个国家？列出大洲ID、大洲名称和国家数目。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "对于每个大洲，列出它的ID、名字和它有多少个国家？", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.contid  , continents.continent  , count ( countries.countryid ) as num_countries from continents inner join countries on countries.continent = continents.contid group by continents.contid  , continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 对于每个大洲，列出它的ID、名字和它有多少个国家？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "列出了多少国家？", "query": "select count ( * ) from countries", "predicted_sql": "select count ( distinct countries.countryname ) from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 列出了多少国家？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少国家存在？", "query": "select count ( * ) from countries", "predicted_sql": "select count ( distinct countries.countryname ) from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少国家存在？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个汽车制造商生产多少种型号的汽车？列出制造商姓名，ID和号码。", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select car_makers.maker  , car_makers.id  , count ( model_list.model ) as num_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.maker  , car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个汽车制造商生产多少种型号的汽车？列出制造商姓名，ID和号码。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个汽车制造商的全名，ID以及生产多少种型号的汽车？", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select car_makers.fullname  , car_makers.id  , count ( model_list.model ) as num_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.fullname  , car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个汽车制造商的全名，ID以及生产多少种型号的汽车？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪个车型的马力最小？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.horsepower = ( select min ( horsepower ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪个车型的马力最小？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "最小马力的汽车的型号是什么？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.horsepower = ( select min ( horsepower ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 最小马力的汽车的型号是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "找出重量低于平均重量的汽车的型号。", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 找出重量低于平均重量的汽车的型号。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "重量小于平均值的汽车的型号是什么？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 重量小于平均值的汽车的型号是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "找出'1970'年生产汽车的制造商的名字。", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 找出'1970'年生产汽车的制造商的名字。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "'1970'年生产过汽车的不同汽车制造商的名字是什么？", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join model_list on car_names.model = model_list.modelid join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970' group by car_makers.maker", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### '1970'年生产过汽车的不同汽车制造商的名字是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "找出最早一年生产的汽车的制造和生产时间？", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select car_makers.maker  , cars_data.year from car_makers join car_names on car_makers.id = car_names.makeid join model_list on car_names.model = model_list.modelid join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 找出最早一年生产的汽车的制造和生产时间？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "最早生产汽车的制造商是什么，在哪一年？", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select car_makers.maker  , cars_data.year from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 最早生产汽车的制造商是什么，在哪一年？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980年后生产出哪些不同车型？", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980年后生产出哪些不同车型？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些不同的车型在1980年后被生产出来？", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year > 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些不同的车型在1980年后被生产出来？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个大洲有多少汽车制造商？列出大洲名称和数量。", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select continents.continent  , count ( car_makers.id ) as num_car_makers from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid group by continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个大洲有多少汽车制造商？列出大洲名称和数量。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个大洲的名称是什么？每个大洲有多少汽车制造商？", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个大洲的名称是什么？每个大洲有多少汽车制造商？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪个国家拥有最多的汽车制造商？列出国家名称。", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select countries.countryname from countries join car_makers on car_makers.country = countries.countryid group by countries.countryname order by count ( car_makers.id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪个国家拥有最多的汽车制造商？列出国家名称。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "汽车制造商最多的国家叫什么名字？", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select countries.countryname from countries join car_makers on car_makers.country = countries.countryid group by countries.countryname order by count ( car_makers.id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 汽车制造商最多的国家叫什么名字？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个制造商生产多少种车型？列出数量和制造商的全名。", "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "select car_makers.fullname  , count ( model_list.model ) as num_of_models from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个制造商生产多少种车型？列出数量和制造商的全名。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每个制造商生产的车型数量是多少？每个制造商的ID和全名是什么？", "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "select car_makers.id  , car_makers.fullname  , count ( model_list.modelid ) as num_of_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.id  , car_makers.fullname", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每个制造商生产的车型数量是多少？每个制造商的ID和全名是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "'科迈罗'的加速度是多少？", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select cars_data.accelerate from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_names.make = '科迈罗'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### '科迈罗'的加速度是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "'科迈罗'的加速度有多大？", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = '科迈罗'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### '科迈罗'的加速度有多大？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "法国有多少汽车制造商？", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = '法国'", "predicted_sql": "select count ( car_makers.id ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 法国有多少汽车制造商？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "法国的汽车制造商有多少？", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = '法国'", "predicted_sql": "select count ( car_makers.id ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 法国的汽车制造商有多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "美国生产了多少款车？", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = '美国'", "predicted_sql": "select count ( distinct car_names.make ) from car_names join model_list on car_names.model = model_list.modelid join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 美国生产了多少款车？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在美国生产的车型有多少？", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = '美国'", "predicted_sql": "select count ( * ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在美国生产的车型有多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4缸汽车每加仑汽油能行驶的平均英里数是多少？", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select avg ( mpg ) from cars_data where cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4缸汽车每加仑汽油能行驶的平均英里数是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "所有4缸汽车每加仑汽油能行驶的平均英里数是多少？", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select avg ( mpg ) from cars_data where cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 所有4缸汽车每加仑汽油能行驶的平均英里数是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在1974年的8缸汽车的最小重量是多少？", "query": "select weight from cars_data where cylinders = 4 and year = 1974 order by weight asc limit 1", "predicted_sql": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在1974年的8缸汽车的最小重量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1974年所生产的8缸汽车的最小重量是多少？", "query": "select weight from cars_data where cylinders = 4 and year = 1974 order by weight asc limit 1", "predicted_sql": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1974年所生产的8缸汽车的最小重量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "所有的制造商和汽车型号是什么？", "query": "select maker , model from model_list", "predicted_sql": "select car_makers.maker  , model_list.model from car_makers join model_list on model_list.maker = car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 所有的制造商和汽车型号是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "制造商和汽车型号是什么？", "query": "select maker , model from model_list", "predicted_sql": "select car_makers.maker  , model_list.model from car_makers join model_list on car_makers.id = model_list.maker", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 制造商和汽车型号是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些国家至少拥有一家汽车制造商？列出名称和ID。", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select countries.countryname  , countries.countryid from countries join car_makers on car_makers.country = countries.countryid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些国家至少拥有一家汽车制造商？列出名称和ID。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "拥有至少一家汽车制造商的所有国家的名称和ID是什么？", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select countries.countryid  , countries.countryname from countries where countries.countryid in ( select car_makers.country from car_makers )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 拥有至少一家汽车制造商的所有国家的名称和ID是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "马力超过150的汽车的数量是多少？", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where horsepower > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 马力超过150的汽车的数量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少汽车的马力大于150？", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where horsepower > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少汽车的马力大于150？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每年汽车的平均重量是多少？", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select avg ( weight ) from cars_data group by year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每年汽车的平均重量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "每年的平均重量和年份是多少？", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select avg ( weight ) as average_weight  , year from cars_data group by year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 每年的平均重量和年份是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "欧洲哪些国家至少有3家汽车制造商？", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = '欧洲' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select countries.countryname from countries join car_makers on car_makers.country = countries.countryid group by countries.countryname having count ( distinct car_makers.id ) >= 3 and countries.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 欧洲哪些国家至少有3家汽车制造商？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "拥有至少3家制造商的所有欧洲国家的名称是什么？", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = '欧洲' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country group by countries.countryname having count ( distinct car_makers.id ) >= 3 and continents.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 拥有至少3家制造商的所有欧洲国家的名称是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3缸的汽车型号的最大的马力和牌子是什么？", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model  , car_makers.maker  , max ( cars_data.horsepower ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where cars_data.cylinders = 3 group by model_list.model  , car_makers.maker order by max ( cars_data.horsepower ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3缸的汽车型号的最大的马力和牌子是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3缸车型的最大马力是多少？是什么牌子的？", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select max ( cars_data.horsepower ) as max_horsepower  , car_makers.maker as brand from cars_data inner join car_names on cars_data.id = car_names.makeid inner join model_list on car_names.model = model_list.model inner join car_makers on model_list.maker = car_makers.id where cars_data.cylinders = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3缸车型的最大马力是多少？是什么牌子的？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪种型号的车最省油？也就是说，每加仑汽油能行驶的英里数最大。", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.modelid order by cars_data.mpg desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪种型号的车最省油？也就是说，每加仑汽油能行驶的英里数最大。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "最高MPG的汽车型号是什么？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.mpg desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 最高MPG的汽车型号是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "汽车在1980年之前的平均马力是多少？", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select avg ( horsepower ) from cars_data where year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 汽车在1980年之前的平均马力是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在1980之前生产的所有品牌汽车的平均马力是多少？", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select avg ( cars_data.horsepower ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where cars_data.year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在1980之前生产的所有品牌汽车的平均马力是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "'吉利'汽车的平均EDISL是多少？", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = '吉利'", "predicted_sql": "select avg ( cars_data.edispl ) from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where car_makers.maker = '吉利'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### '吉利'汽车的平均EDISL是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "所有'吉利'汽车的平均EDISCL是多少？", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = '吉利'", "predicted_sql": "select avg ( cars_data.edispl ) from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where car_makers.maker = '吉利'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 所有'吉利'汽车的平均EDISCL是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "对于不同数量的气缸的车，最大加速度是多少？", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select max ( accelerate ) from cars_data group by cylinders", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 对于不同数量的气缸的车，最大加速度是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "不同气缸的车的最大加速度是多少？", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select max ( cars_data.accelerate ) from cars_data group by cars_data.cylinders", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 不同气缸的车的最大加速度是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪种车型的汽车版本最多？", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model  , count ( * ) as num_versions from model_list group by model_list.model order by num_versions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪种车型的汽车版本最多？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "什么型号的汽车有最多不同的版本？", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model  , count ( distinct car_names.make ) as num_versions from model_list join car_names on model_list.modelid = car_names.model group by model_list.model order by num_versions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 什么型号的汽车有最多不同的版本？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少辆车有4个以上的气缸？", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from cars_data where cylinders >= 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少辆车有4个以上的气缸？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4缸以上的汽车数量是多少？", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from cars_data where cylinders > 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4缸以上的汽车数量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980年生产了多少辆车？", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select count ( * ) from cars_data where year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980年生产了多少辆车？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在1980年，多少辆车生产出来了？", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select count ( * ) from cars_data where year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在1980年，多少辆车生产出来了？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "全名为'一汽'的制造商生产了多少种车型？", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = '一汽'", "predicted_sql": "select count ( model_list.model ) from car_makers join model_list on model_list.maker = car_makers.id where car_makers.fullname = '一汽'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 全名为'一汽'的制造商生产了多少种车型？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "名为'一汽'的汽车制造商生产的不同汽车型号是多少？", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = '一汽'", "predicted_sql": "select count ( distinct model_list.model ) from car_makers join model_list on model_list.maker = car_makers.id where car_makers.maker = '一汽'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 名为'一汽'的汽车制造商生产的不同汽车型号是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些制造商设计了超过3种车型？列出全名和ID。", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.fullname  , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname  , car_makers.id having count ( distinct model_list.model ) > 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些制造商设计了超过3种车型？列出全名和ID。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "生产超过3种型号汽车的所有制造商的名称和ID是什么？", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.id  , car_makers.maker from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.id  , car_makers.maker having count ( distinct model_list.model ) > 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 生产超过3种型号汽车的所有制造商的名称和ID是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些车型是'上汽'公司生产的，或者重量超过3500？", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = '上汽' or cars_data.weight > 3500", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些车型是'上汽'公司生产的，或者重量超过3500？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "'上汽'公司生产或重量超过3500的不同车型有哪些？", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = '上汽' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.fullname = '上汽' and cars_data.weight > 3500 group by model_list.model", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### '上汽'公司生产或重量超过3500的不同车型有哪些？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪一年生产的汽车重量不小于3000，也不超过4000？", "query": "select distinct cars_data.year from cars_data where cars_data.weight > 3000 and cars_data.weight < 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.weight >= 3000 and cars_data.weight <= 4000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪一年生产的汽车重量不小于3000，也不超过4000？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有哪些年份既生产了重量小于4000的汽车，又生产了重量大于3000的汽车？", "query": "select distinct cars_data.year from cars_data where cars_data.weight > 3000 and cars_data.weight < 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.weight < 4000 and cars_data.year in ( select cars_data.year from cars_data where cars_data.weight > 3000 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有哪些年份既生产了重量小于4000的汽车，又生产了重量大于3000的汽车？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "最大加速度的汽车的马力是多少？", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "select cars_data.horsepower from cars_data where cars_data.accelerate = ( select max ( cars_data.accelerate ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 最大加速度的汽车的马力是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "加速度最大的汽车的马力是多少？", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 加速度最大的汽车的马力是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "对于'吉利'车型来说，最小加速度的汽车有多少个气缸？", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = '吉利' order by cars_data.accelerate asc limit 1", "predicted_sql": "select count ( cars_data.cylinders ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = '吉利' order by cars_data.accelerate asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 对于'吉利'车型来说，最小加速度的汽车有多少个气缸？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "加速度最小的'吉利'车型有多少个汽缸？", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = '吉利' order by cars_data.accelerate asc limit 1", "predicted_sql": "select cars_data.cylinders from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = '吉利' order by cars_data.accelerate asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 加速度最小的'吉利'车型有多少个汽缸？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少车比最大马力的汽车有更大的加速度？", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "select count ( * ) from cars_data where horsepower = ( select max ( horsepower ) from cars_data ) and accelerate > ( select accelerate from cars_data where horsepower = ( select max ( horsepower ) from cars_data ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少车比最大马力的汽车有更大的加速度？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "加速度比马力最大的汽车更大的汽车有多少辆？", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "select count ( * ) from cars_data where accelerate > horsepower", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 加速度比马力最大的汽车更大的汽车有多少辆？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少国家拥有超过2家汽车制造商？", "query": "select count ( * ) from ( select countries.countryid , count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2 )", "predicted_sql": "select count ( distinct countries.countryid ) from countries join car_makers on car_makers.country = countries.countryid group by countries.countryid having count ( distinct car_makers.id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少国家拥有超过2家汽车制造商？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "拥有超过2家汽车制造商的国家有多少？", "query": "select count ( * ) from ( select countries.countryid , count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2 )", "predicted_sql": "select countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname having count ( car_makers.id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 拥有超过2家汽车制造商的国家有多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "有多少辆车超过6个汽缸？", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( * ) from cars_data where cylinders > 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 有多少辆车超过6个汽缸？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "超过6个气缸的汽车的数量是多少？", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( * ) from cars_data where cylinders > 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 超过6个气缸的汽车的数量是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "对于有4个汽缸的汽车，哪个型号的车的马力最大？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 对于有4个汽缸的汽车，哪个型号的车的马力最大？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪种型号的四缸汽车的马力最大？", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪种型号的四缸汽车的马力最大？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在高于最低马力的车中，哪些没有超过3个汽缸？列出汽车制造商的ID和名称。", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders <= 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在高于最低马力的车中，哪些没有超过3个汽缸？列出汽车制造商的ID和名称。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在不是最小马力的汽车中，那些少于4个汽缸的汽车制造商的ID和名称是什么？", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders <= 3", "predicted_sql": "select car_makers.id  , car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.horsepower  != ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在不是最小马力的汽车中，那些少于4个汽缸的汽车制造商的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8缸或1980年前生产的汽车每加仑汽油的最大里程是多少？", "query": "select mpg from cars_data where cylinders = 8 or year < 1980 order by mpg desc limit 1", "predicted_sql": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8缸或1980年前生产的汽车每加仑汽油的最大里程是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "在1980年之前生产或8缸的汽车最大MPG是多少？", "query": "select mpg from cars_data where cylinders = 8 or year < 1980 order by mpg desc limit 1", "predicted_sql": "select max ( cars_data.mpg ) from cars_data where cars_data.year < 1980 or cars_data.cylinders = 8", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 在1980年之前生产或8缸的汽车最大MPG是多少？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些型号的车比3500轻并且不是'广汽'制造？", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != '广汽'", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.maker  != '广汽'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些型号的车比3500轻并且不是'广汽'制造？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "不是'广汽'制造的车中，哪些型号的车比3500轻？", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != '广汽'", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where car_makers.maker  != '广汽' and cars_data.weight < 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 不是'广汽'制造的车中，哪些型号的车比3500轻？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "没有一个汽车制造商的国家的名字是什么？", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select car_makers.country from car_makers where car_makers.country not in ( select countries.countryid from countries )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 没有一个汽车制造商的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "没有汽车制造商的国家的名字是什么？", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select countries.countryname from countries where countries.countryid not in ( select car_makers.country from car_makers )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 没有汽车制造商的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪家汽车制造商生产至少2种型号的汽车和3种以上的汽车品牌？列出ID和制造商。", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.id  , car_makers.maker from car_makers inner join model_list on model_list.maker = car_makers.id inner join car_names on car_names.model = model_list.model group by car_makers.id  , car_makers.maker having count ( distinct model_list.model ) >= 2 and count ( distinct car_names.make ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪家汽车制造商生产至少2种型号的汽车和3种以上的汽车品牌？列出ID和制造商。 \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "所有生产至少2种车型、生产超过3种汽车品牌的汽车制造商的ID和制造商是什么？", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.id  , car_makers.maker from car_makers join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model group by car_makers.id  , car_makers.maker having count ( distinct car_names.makeid ) > 3 and count ( distinct model_list.modelid ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 所有生产至少2种车型、生产超过3种汽车品牌的汽车制造商的ID和制造商是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "拥有3家以上汽车制造商或生产'荣威'车型的国家的ID和名称是什么？", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = '荣威'", "predicted_sql": "select countries.countryid  , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.model where car_names.make = '荣威' group by countries.countryid  , countries.countryname having count ( distinct car_makers.id ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 拥有3家以上汽车制造商或生产'荣威'车型的国家的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "哪些国家有3种以上汽车制造商或生产'荣威'，它们的ID和名称是什么？", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = '荣威'", "predicted_sql": "select countries.countryid  , countries.countryname from countries join car_makers on car_makers.country = countries.countryid group by countries.countryid  , countries.countryname having count ( distinct car_makers.id ) >= 3 or car_makers.maker = '荣威'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 哪些国家有3种以上汽车制造商或生产'荣威'，它们的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "flight_2", "question": "'深圳航空公司'航空公司属于哪个国家？", "query": "select country from airlines where airline = '深圳航空公司'", "predicted_sql": "select airlines.country from airlines where airlines.airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '深圳航空公司'航空公司属于哪个国家？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'深圳航空公司'航空公司隶属于哪个国家？", "query": "select country from airlines where airline = '深圳航空公司'", "predicted_sql": "select airlines.country from airlines where airlines.airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '深圳航空公司'航空公司隶属于哪个国家？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "航空公司'深圳航空公司'的缩写是什么？", "query": "select abbreviation from airlines where airline = '深圳航空公司'", "predicted_sql": "select abbreviation from airlines where airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 航空公司'深圳航空公司'的缩写是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪一个缩写对应于'深圳航空公司'航空公司？", "query": "select abbreviation from airlines where airline = '深圳航空公司'", "predicted_sql": "select abbreviation from airlines where airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪一个缩写对应于'深圳航空公司'航空公司？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "列出所有'美国'的航空公司的名字和缩写。", "query": "select airline , abbreviation from airlines where country = '美国'", "predicted_sql": "select airlines.airline  , airlines.abbreviation from airlines where airlines.country = '美国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 列出所有'美国'的航空公司的名字和缩写。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "美国所有航空公司的航空公司名称和缩写是什么？", "query": "select airline , abbreviation from airlines where country = '美国'", "predicted_sql": "select airlines.airline  , airlines.abbreviation from airlines where airlines.country = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 美国所有航空公司的航空公司名称和缩写是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "列出'拉萨'市的机场代码和名称。", "query": "select airportcode , airportname from airports where city = '拉萨'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = '拉萨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 列出'拉萨'市的机场代码和名称。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出与城市'拉萨'对应的机场代码和机场名称。", "query": "select airportcode , airportname from airports where city = '拉萨'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = '拉萨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出与城市'拉萨'对应的机场代码和机场名称。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "我们有多少家航空公司？", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( distinct airlines.airline ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 我们有多少家航空公司？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "航空公司的总数是多少？", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 航空公司的总数是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "我们有多少个机场？", "query": "select count ( * ) from airports", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 我们有多少个机场？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回机场的数量。", "query": "select count ( * ) from airports", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回机场的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "我们有多少次航班？", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from flights", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 我们有多少次航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回航班次的数量。", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from flights", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回航班次的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪家航空公司的缩写是'UAL'？", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select airline from airlines where abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation ( UAL ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪家航空公司的缩写是'UAL'？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出缩写为'UAL'的航空公司。", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select airline from airlines where abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation ( UAL ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出缩写为'UAL'的航空公司。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少航空公司来自美国？", "query": "select count ( * ) from airlines where country = '美国'", "predicted_sql": "select count ( * ) from airlines where country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少航空公司来自美国？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回美国航空公司的数量。", "query": "select count ( * ) from airlines where country = '美国'", "predicted_sql": "select count ( * ) from airlines where country = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回美国航空公司的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'东方'机场在哪个城市和哪个国家？", "query": "select city , country from airports where airportname = '东方'", "predicted_sql": "select airports.city  , airports.country from airports where airports.airportname = '东方'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '东方'机场在哪个城市和哪个国家？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出'东方'机场所属的城市和国家。", "query": "select city , country from airports where airportname = '东方'", "predicted_sql": "select airports.city  , airports.country from airports where airports.airportname = '东方'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出'东方'机场所属的城市和国家。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'AKO'机场的名称是什么？", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AKO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 'AKO'机场的名称是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回代号为'AKO'的机场名称。", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AKO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回代号为'AKO'的机场名称。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'哈尔滨'市的机场名称是什么？", "query": "select airportname from airports where city = '哈尔滨'", "predicted_sql": "select airports.airportname from airports where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '哈尔滨'市的机场名称是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "在'哈尔滨'的机场名称是什么？", "query": "select airportname from airports where city = '哈尔滨'", "predicted_sql": "select airports.airportname from airports where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 在'哈尔滨'的机场名称是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少航班从'长沙'出发？", "query": "select count ( * ) from flights where sourceairport = '长沙'", "predicted_sql": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少航班从'长沙'出发？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "统计从'长沙'起飞的航班数。", "query": "select count ( * ) from flights where sourceairport = '长沙'", "predicted_sql": "select count ( * ) from flights where sourceairport = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 统计从'长沙'起飞的航班数。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "目的地是'天津'有多少航班？", "query": "select count ( * ) from flights where destairport = '天津'", "predicted_sql": "select count ( * ) from flights where destairport = ( select airportcode from airports where city = '天津' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 目的地是'天津'有多少航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "统计到达'天津'的航班数。", "query": "select count ( * ) from flights where destairport = '天津'", "predicted_sql": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '天津'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 统计到达'天津'的航班数。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "从'哈尔滨'市起飞的有多少班次？", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights where sourceairport in ( select airportcode from airports where city = '哈尔滨' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 从'哈尔滨'市起飞的有多少班次？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回从'哈尔滨'起飞的航班数。", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回从'哈尔滨'起飞的航班数。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "到'哈尔滨'市有多少班次？", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 到'哈尔滨'市有多少班次？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回抵达'哈尔滨'市的航班数量。", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回抵达'哈尔滨'市的航班数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少航班从'哈尔滨'起飞，到达'西安'？", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = '西安' and airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights where sourceairport = ( select airportcode from airports where city = '哈尔滨' ) and destairport = ( select airportcode from airports where city = '西安' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少航班从'哈尔滨'起飞，到达'西安'？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "从'哈尔滨'飞往'西安'有多少班机？", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = '西安' and airports.city = '哈尔滨'", "predicted_sql": "select count ( * ) from flights where sourceairport = ( select airportcode from airports where city = '哈尔滨' ) and destairport = ( select airportcode from airports where city = '西安' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 从'哈尔滨'飞往'西安'有多少班机？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'深圳航空公司'航空公司有多少航班？", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = '深圳航空公司'", "predicted_sql": "select count ( * ) from airlines join flights on airlines.uid = flights.airline where airlines.airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '深圳航空公司'航空公司有多少航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出'深圳航空公司'航空公司航班的数量。", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = '深圳航空公司'", "predicted_sql": "select count ( * ) from airlines join flights on airlines.uid = flights.airline where airlines.airline = '深圳航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出'深圳航空公司'航空公司航班的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少'南方航空'航空公司的航班飞往'虹桥'？", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = '南方航空' and flights.destairport = '虹桥'", "predicted_sql": "select count ( * ) from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = '南方航空' and airports.airportname = '虹桥'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少'南方航空'航空公司的航班飞往'虹桥'？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "统计'南方航空'航空公司航班抵达'虹桥'机场的数量。", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = '南方航空' and flights.destairport = '虹桥'", "predicted_sql": "select count ( * ) from flights join airlines on flights.airline = airlines.airline join airports on flights.destairport = airports.airportcode where airlines.airline = '南方航空' and airports.airportname = '虹桥'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 统计'南方航空'航空公司航班抵达'虹桥'机场的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少'南方航空'航班从'浦东'机场起飞？", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = '南方航空' and flights.sourceairport = '浦东'", "predicted_sql": "select count ( * ) from flights where airline = '南方航空' and sourceairport = '浦东'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少'南方航空'航班从'浦东'机场起飞？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "返回从'浦东'机场起飞的'南方航空'航空公司航班的数量。", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = '南方航空' and flights.sourceairport = '浦东'", "predicted_sql": "select count ( * ) from flights where flights.sourceairport = '浦东' and flights.airline = '南方航空'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 返回从'浦东'机场起飞的'南方航空'航空公司航班的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "有多少'南方航空'航空公司的航班飞往'哈尔滨'？", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = '哈尔滨' and airlines.airline = '南方航空'", "predicted_sql": "select count ( * ) from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = '南方航空' and airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 有多少'南方航空'航空公司的航班飞往'哈尔滨'？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "统计到达'哈尔滨'的'南方航空'航空公司航班的数量。", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = '哈尔滨' and airlines.airline = '南方航空'", "predicted_sql": "select count ( * ) from flights join airlines on flights.airline = airlines.airline join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨' and airlines.airline = '南方航空'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 统计到达'哈尔滨'的'南方航空'航空公司航班的数量。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪个城市有最多的抵达航班？", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪个城市有最多的抵达航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪个城市有最频繁的目的地机场？", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪个城市有最频繁的目的地机场？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪个城市离开的航班最多？", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select flights.sourceairport  , count ( * ) as num_flights from flights group by flights.sourceairport order by num_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪个城市离开的航班最多？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪个城市的机场中起飞航班是最频繁的？", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from flights join airports on flights.sourceairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪个城市的机场中起飞航班是最频繁的？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "最多航班数的机场代码是多少？", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "select flights.sourceairport  , count ( flights.flightno ) as num_flights from flights group by flights.sourceairport order by num_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 最多航班数的机场代码是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "航班数量最多的机场的代码是多少？", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "select flights.destairport  , count ( * ) as flight_count from flights group by flights.destairport order by flight_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 航班数量最多的机场的代码是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "航班最少的机场代码是什么？", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode from airports left join flights on flights.destairport = airports.airportcode group by airports.airportcode order by count ( flights.flightno ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 航班最少的机场代码是什么？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出最少的航班数的机场代码。", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode from airports join flights on flights.sourceairport = airports.airportcode group by airports.airportcode order by count ( * ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出最少的航班数的机场代码。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪家航空公司的航班最多？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select airlines.airline  , count ( flights.flightno ) as total_flights from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by total_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪家航空公司的航班最多？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪家航空公司提供最多的航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select airlines.airline  , count ( flights.flightno ) as num_flights from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by num_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪家航空公司提供最多的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找到航班最少的航空公司的缩写和国家。", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select airlines.abbreviation  , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.abbreviation  , airlines.country order by count ( flights.flightno ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找到航班最少的航空公司的缩写和国家。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "航班最少的航空公司的缩写是什么？它在哪个国家？", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 航班最少的航空公司的缩写是什么？它在哪个国家？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司有从'浦东'机场出发的航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '浦东'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.airportname = '浦东'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司有从'浦东'机场出发的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "从'浦东'机场出发的航班的航空公司有哪些？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '浦东'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.airportname = '浦东'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 从'浦东'机场出发的航班的航空公司有哪些？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司有到达'浦东'机场的航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = '浦东'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airports.airportname = '浦东'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司有到达'浦东'机场的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司有目的机场是'浦东'的航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = '浦东'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airports.airportname = '浦东'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司有目的机场是'浦东'的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出有从'长沙'和'白云'机场出发的航班的所有航空公司。", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '长沙' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '白云'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.city = '长沙' and airports.airportname = '白云'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出有从'长沙'和'白云'机场出发的航班的所有航空公司。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司有从'长沙'和'白云'机场起飞的航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '长沙' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '白云'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.city = '长沙' and flights.destairport = '白云'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司有从'长沙'和'白云'机场起飞的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出有从'白云'机场出发，但不从'长沙'机场出发的航班的所有航空公司。", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '白云' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '长沙'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.airportname = '白云' and airports.airportname  != '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出有从'白云'机场出发，但不从'长沙'机场出发的航班的所有航空公司。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司有航班从'白云'起飞，而不是从'长沙'机场起飞？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '白云' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = '长沙'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.city = '白云' and airports.city <> '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司有航班从'白云'起飞，而不是从'长沙'机场起飞？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出所有至少有10个航班的航空公司。", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( flights.flightno ) >= 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出所有至少有10个航班的航空公司。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪家航空公司至少有10次航班？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪家航空公司至少有10次航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出所有少于200个航班的航空公司。", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( flights.flightno ) < 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出所有少于200个航班的航空公司。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航空公司的航班少于200？", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( flights.flightno ) < 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航空公司的航班少于200？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "'南方航空'航空公司的航班号是多少？", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = '南方航空'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = '南方航空'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### '南方航空'航空公司的航班号是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些航班号对应'南方航空'航空公司的航班？", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = '南方航空'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.uid where airlines.airline = '南方航空'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些航班号对应'南方航空'航空公司的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "从'长沙'机场起飞的航班的航班号是多少？", "query": "select flightno from flights where sourceairport = '长沙'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 从'长沙'机场起飞的航班的航班号是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出从'长沙'起飞的航班的航班号。", "query": "select flightno from flights where sourceairport = '长沙'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出从'长沙'起飞的航班的航班号。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "到达'长沙'机场的航班的航班号是多少？", "query": "select flightno from flights where destairport = '长沙'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 到达'长沙'机场的航班的航班号是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出在'长沙'降落的航班的航班号。", "query": "select flightno from flights where destairport = '长沙'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '长沙'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出在'长沙'降落的航班的航班号。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "从'哈尔滨'起飞的航班的航班号是多少？", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 从'哈尔滨'起飞的航班的航班号是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出从'哈尔滨'起飞的航班的航班号。", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出从'哈尔滨'起飞的航班的航班号。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "到达'哈尔滨'市的航班的航班号是多少？", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 到达'哈尔滨'市的航班的航班号是多少？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "给出到达'哈尔滨'航班的航班号。", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 给出到达'哈尔滨'航班的航班号。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出在'哈尔滨'或'长春'降落的航班的航班号。", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨' or airports.city = '长春'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨' or airports.city = '长春'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出在'哈尔滨'或'长春'降落的航班的航班号。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "在'哈尔滨'或'长春'有多少航班？", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = '哈尔滨' or airports.city = '长春'", "predicted_sql": "select count ( * ) from flights where sourceairport in ( select airportcode from airports where city = '哈尔滨' or city = '长春' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 在'哈尔滨'或'长春'有多少航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "找出没有任何起落航班的机场名称。", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights ) and airports.airportcode not in ( select flights.destairport from flights )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 找出没有任何起落航班的机场名称。 \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "哪些机场没有起飞或到达的航班？", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports left join flights on airports.airportcode = flights.sourceairport or airports.airportcode = flights.destairport where flights.flightno is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 哪些机场没有起飞或到达的航班？ \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "employee_hire_evaluation", "question": "那里有多少员工？", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 那里有多少员工？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "统计员工人数。", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 统计员工人数。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "按年龄升序排列员工的姓名。", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee order by employee.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 按年龄升序排列员工的姓名。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "按年龄升序，列出员工姓名。", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee order by employee.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 按年龄升序，列出员工姓名。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "每个城市的雇员人数是多少？", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select employee.city  , count ( employee.employee_id ) as employee_count from employee group by employee.city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 每个城市的雇员人数是多少？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "统计每个城市的雇员数量。", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select employee.city  , count ( employee.employee_id ) as employee_count from employee group by employee.city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 统计每个城市的雇员数量。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪些城市30岁以下的员工多于一个人？", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.city from employee where employee.age < 30 group by employee.city having count ( employee.employee_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪些城市30岁以下的员工多于一个人？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "找出那些拥有不止一个30岁以下员工的城市。", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.city from employee where employee.age < 30 group by employee.city having count ( employee.employee_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 找出那些拥有不止一个30岁以下员工的城市。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "找出每个地方的商店的数量。", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select shop.location  , count ( shop.shop_id ) as num_shops from shop group by shop.location", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 找出每个地方的商店的数量。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "每个地方有多少商店？", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select shop.location  , count ( shop.shop_id ) as num_shops from shop group by shop.location", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 每个地方有多少商店？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "找出产品数量最大的商店的经理姓名和所在地区。", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select shop.manager_name  , shop.district from shop where shop.number_products = ( select max ( shop.number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 找出产品数量最大的商店的经理姓名和所在地区。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "销售数量最多的商店的经理姓名和地区是什么？", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select shop.manager_name  , shop.district from shop where shop.number_products = ( select max ( shop.number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 销售数量最多的商店的经理姓名和地区是什么？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查找所有商店的最小和最大产品数量。", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select min ( shop.number_products ) as min_products  , max ( shop.number_products ) as max_products from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查找所有商店的最小和最大产品数量。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "所有商店的最小和最大产品数量是多少？", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select min ( shop.number_products ) as min_products  , max ( shop.number_products ) as max_products from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 所有商店的最小和最大产品数量是多少？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "按照产品数量的降序返回所有商店的名称、位置和区域。", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select shop.name  , shop.location  , shop.district from shop order by shop.number_products desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 按照产品数量的降序返回所有商店的名称、位置和区域。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "按产品编号降序对所有商店进行排序，并返回每个商店的名称、位置和区域。", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select shop.name  , shop.location  , shop.district from shop order by shop.number_products desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 按产品编号降序对所有商店进行排序，并返回每个商店的名称、位置和区域。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查找产品数量超过平均产品数量的商店的名称。", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name from shop where shop.number_products > ( select avg ( number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查找产品数量超过平均产品数量的商店的名称。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪些商店的产品数量高于平均水平？把店名给我。", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name from shop where shop.number_products > ( select avg ( number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪些商店的产品数量高于平均水平？把店名给我。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查找在评审中被奖励最多次数的员工的名字。", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.name order by count ( evaluation.year_awarded ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查找在评审中被奖励最多次数的员工的名字。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪位员工在评审中获得最多奖项？给我员工的名字。", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.name order by count ( evaluation.year_awarded ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪位员工在评审中获得最多奖项？给我员工的名字。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查找获得最高奖金的员工的名字。", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id where evaluation.bonus = ( select max ( bonus ) from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查找获得最高奖金的员工的名字。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪位员工获得最大奖金？给我员工的名字。", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id where evaluation.bonus = ( select max ( bonus ) from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪位员工获得最大奖金？给我员工的名字。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "找到那些从未在评审中获奖的员工的名字。", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 找到那些从未在评审中获奖的员工的名字。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "那些从未接受过评估的员工的名字是什么？", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 那些从未接受过评估的员工的名字是什么？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "员工人数最多的商店名称是什么？", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop order by shop.number_products desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 员工人数最多的商店名称是什么？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪个商店的员工最多？把店名给我。", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name order by count ( hiring.employee_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪个商店的员工最多？把店名给我。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查询不雇佣任何雇员的商店名称。", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select shop.name from shop where shop.shop_id not in ( select hiring.shop_id from hiring )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查询不雇佣任何雇员的商店名称。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪些商店没有员工？查找店铺名称", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select shop.name from shop left join hiring on shop.shop_id = hiring.shop_id where hiring.employee_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪些商店没有员工？查找店铺名称 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查询每个商店雇佣的员工数量；并且显示商店名称。", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select shop.name  , count ( hiring.employee_id ) as employee_count from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查询每个商店雇佣的员工数量；并且显示商店名称。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "对于每个商店，返回在那里工作的雇员人数和店名。", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select shop.name  , count ( employee.employee_id ) as employee_count from shop join hiring on shop.shop_id = hiring.shop_id join employee on hiring.employee_id = employee.employee_id group by shop.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 对于每个商店，返回在那里工作的雇员人数和店名。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "所有评审中给出的总奖金是多少？", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select sum ( bonus ) from evaluation", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 所有评审中给出的总奖金是多少？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查询所有评审中所给出的奖金总额。", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select sum ( evaluation.bonus ) from evaluation", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查询所有评审中所给出的奖金总额。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "给我有关招聘的所有信息。", "query": "select * from hiring", "predicted_sql": "select hiring.shop_id  , hiring.employee_id  , hiring.start_from  , hiring.is_full_time from hiring", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 给我有关招聘的所有信息。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "招聘的所有信息是什么？", "query": "select * from hiring", "predicted_sql": "select hiring.shop_id  , hiring.employee_id  , hiring.start_from  , hiring.is_full_time from hiring", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 招聘的所有信息是什么？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "哪个地区有少于3000种产品的商店和多于10000种产品的商店？", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 哪个地区有少于3000种产品的商店和多于10000种产品的商店？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "查询那些既有卖不到3000件产品的商店又有卖超过1000件产品的商店的地区。", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select distinct shop.district from shop where shop.number_products < 3000 and shop.shop_id in ( select shop_id from shop where number_products > 1000 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 查询那些既有卖不到3000件产品的商店又有卖超过1000件产品的商店的地区。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "有多少个不同的商店位置？", "query": "select count ( distinct location ) from shop", "predicted_sql": "select count ( distinct shop.location ) from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 有多少个不同的商店位置？ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "计算不同商店位置的数量。", "query": "select count ( distinct location ) from shop", "predicted_sql": "select count ( distinct shop.location ) from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 计算不同商店位置的数量。 \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "我们有多少份文件？", "query": "select count ( * ) from documents", "predicted_sql": "select count ( * ) from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 我们有多少份文件？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算文件的数量。", "query": "select count ( * ) from documents", "predicted_sql": "select count ( * ) from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算文件的数量。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "列出所有文档的文档ID、文档名称和文档描述。", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select documents.document_id  , documents.document_name  , documents.document_description from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 列出所有文档的文档ID、文档名称和文档描述。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "所有文档的ID、名称和描述是什么？", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select documents.document_id  , documents.document_name  , documents.document_description from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 所有文档的ID、名称和描述是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "描述中带有字母'w'的文档名称和模板id是什么？", "query": "select document_name , template_id from documents where document_description like 'w'", "predicted_sql": "select documents.document_name  , documents.template_id from documents where documents.document_name like '%w%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 描述中带有字母'w'的文档名称和模板id是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回描述中包含字母'w'的文档的名称和模板ID。", "query": "select document_name , template_id from documents where document_description like 'w'", "predicted_sql": "select documents.document_name  , documents.template_id from documents join templates on documents.template_id = templates.template_id where documents.document_description like '%w%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回描述中包含字母'w'的文档的名称和模板ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "'罗超的简历'文档的文档ID、模板id和描述是什么？", "query": "select document_id , template_id , document_description from documents where document_name = '罗超的简历'", "predicted_sql": "select documents.document_id  , documents.template_id  , documents.document_description from documents join templates on documents.template_id = templates.template_id where documents.document_name = '罗超的简历'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### '罗超的简历'文档的文档ID、模板id和描述是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回名称为'罗超的简历'的文档的文档ID、模板id和描述。", "query": "select document_id , template_id , document_description from documents where document_name = '罗超的简历'", "predicted_sql": "select documents.document_id  , documents.template_id  , documents.document_description from documents where documents.document_name = '罗超的简历'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回名称为'罗超的简历'的文档的文档ID、模板id和描述。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "所有文档使用的不同模板有多少？", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select count ( distinct templates.template_id ) as num_different_templates from documents join templates on documents.template_id = templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 所有文档使用的不同模板有多少？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算文档中使用的不同模板的数量。", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select count ( distinct templates.template_id ) as num_different_templates from documents join templates on documents.template_id = templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算文档中使用的不同模板的数量。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "有多少文档使用'PPT'类型的模板？", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select count ( distinct documents.document_id ) from documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 有多少文档使用'PPT'类型的模板？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算使用'PPT'类型的模板的文档数。", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select count ( distinct documents.document_id ) from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where ref_template_types.template_type_description = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算使用'PPT'类型的模板的文档数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有被使用的模板ID和每个模板被文档使用次数。", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select templates.template_id  , count ( documents.document_id ) as usage_count from templates join documents on documents.template_id = templates.template_id group by templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有被使用的模板ID和每个模板被文档使用次数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "文档中使用的所有不同的模板ID是什么，以及每个模板被使用了多少次？", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select templates.template_id  , count ( documents.template_id ) as usage_count from templates join documents on documents.template_id = templates.template_id group by templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 文档中使用的所有不同的模板ID是什么，以及每个模板被使用了多少次？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "被文档使用次数最多的模板的ID和类型代码是什么？", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_id  , templates.template_type_code from templates inner join documents on documents.template_id = templates.template_id group by templates.template_id  , templates.template_type_code order by count ( documents.document_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 被文档使用次数最多的模板的ID和类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回被文档所使用次数最多的模板的ID和类型代码。", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_id  , templates.template_type_code from templates join documents on documents.template_id = templates.template_id group by templates.template_id  , templates.template_type_code order by count ( documents.document_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回被文档所使用次数最多的模板的ID和类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有不止一次被文档使用的模板的ID。", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select templates.template_id from templates join documents on documents.template_id = templates.template_id group by templates.template_id having count ( documents.document_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有不止一次被文档使用的模板的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "在不止一个文档中使用的模板的ID是什么？", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select templates.template_id from templates join documents on documents.template_id = templates.template_id group by templates.template_id having count ( distinct documents.document_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 在不止一个文档中使用的模板的ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有没被文档所使用过的模板的ID。", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select templates.template_id from templates left join documents on templates.template_id = documents.template_id where documents.template_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有没被文档所使用过的模板的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "在任何文档中都没被使用的模板的ID是什么？", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 在任何文档中都没被使用的模板的ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "我们有多少模板？", "query": "select count ( * ) from templates", "predicted_sql": "select count ( * ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 我们有多少模板？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算模板的数量。", "query": "select count ( * ) from templates", "predicted_sql": "select count ( distinct templates.template_id ) as template_count from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算模板的数量。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有模板的ID、版本号和模板类型代码。", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有模板的ID、版本号和模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "每个模板的ID、版本号和类型代码是什么？", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 每个模板的ID、版本号和类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有不同的模板类型代码。", "query": "select distinct template_type_code from templates", "predicted_sql": "select distinct template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有不同的模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "不同的模板类型代码是什么？", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 不同的模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "模板类型代码是'PP'或'PPT'的模板ID是什么？", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select templates.template_id from templates where templates.template_type_code in ( 'PP'  , 'PPT' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP , PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 模板类型代码是'PP'或'PPT'的模板ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回具有代码'PP'或'PPT'的模板的ID。", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP , PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回具有代码'PP'或'PPT'的模板的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "有多少个模板的模板类型代码为'简历'？", "query": "select count ( * ) from templates where template_type_code = '简历'", "predicted_sql": "select count ( * ) from templates where template_type_code = '简历'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 有多少个模板的模板类型代码为'简历'？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算'简历'类型的模板数。", "query": "select count ( * ) from templates where template_type_code = '简历'", "predicted_sql": "select count ( * ) from templates where template_type_code = '简历'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算'简历'类型的模板数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "版本号晚于5的模板的版本号和模板类型代码是什么？", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select templates.version_number  , templates.template_type_code from templates where templates.version_number > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 版本号晚于5的模板的版本号和模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回版本号大于5的模板的版本号和模板类型代码。", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select templates.version_number  , templates.template_type_code from templates where templates.version_number > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回版本号大于5的模板的版本号和模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有模板类型代码和每个模板的模板数。", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( templates.template_id ) as template_count from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有模板类型代码和每个模板的模板数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "不同的模板类型代码是什么，每个模板类型对应多少个模板？", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( templates.template_id ) as num_templates from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 不同的模板类型代码是什么，每个模板类型对应多少个模板？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "哪个模板类型代码对应的模板数量最多？", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , count ( templates.template_id ) as template_count from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code group by ref_template_types.template_type_code order by template_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 哪个模板类型代码对应的模板数量最多？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回数量最多的模板所属的模板类型的类型代码。", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code from templates group by templates.template_type_code order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回数量最多的模板所属的模板类型的类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示少于三个模板的所有模板类型代码。", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types group by ref_template_types.template_type_code having count ( * ) < 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示少于三个模板的所有模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "少于3个模板的模板类型代码是什么？", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 少于3个模板的模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "最小版本号及其模板类型代码是什么？", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select min ( templates.version_number ) as min_version_number  , templates.template_type_code from templates group by templates.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 最小版本号及其模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回最低版本号及其对应的模板类型代码。", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select templates.version_number  , templates.template_type_code from templates where templates.version_number = ( select min ( templates.version_number ) from templates )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回最低版本号及其对应的模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "名称为'数据库'的文档所使用的模板的模板类型代码是什么？", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = '数据库'", "predicted_sql": "select templates.template_type_code from templates join documents on documents.template_id = templates.template_id where documents.document_name = '数据库'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 名称为'数据库'的文档所使用的模板的模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回名为'数据库'的文档使用的模板的模板类型代码。", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = '数据库'", "predicted_sql": "select templates.template_type_code from templates join documents on documents.template_id = templates.template_id where documents.document_name = '数据库'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回名为'数据库'的文档使用的模板的模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有使用模板类型代码为'BK'的文档名称。", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有使用模板类型代码为'BK'的文档名称。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "使用模板代码为'BK'的文档的名称是什么？", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 使用模板代码为'BK'的文档的名称是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有模板类型代码和使用每个类型的文档的数量。", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( documents.document_id ) as document_count from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有模板类型代码和使用每个类型的文档的数量。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "不同的模板类型代码是什么？以及每个类型被多少个文档使用？", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( documents.document_id ) as num_documents from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 不同的模板类型代码是什么？以及每个类型被多少个文档使用？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "哪种模板类型代码被文档使用的最多？", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , count ( documents.document_id ) as document_count from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_code order by document_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 哪种模板类型代码被文档使用的最多？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回文档中最常用的模板类型的代码。", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code from templates join documents on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回文档中最常用的模板类型的代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示任何文档都没使用过的所有模板类型代码。", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select templates.template_type_code from templates inner join documents on documents.template_id = templates.template_id )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示任何文档都没使用过的所有模板类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "任何文档都没使用过的的模板类型代码有哪些？", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types left join templates on ref_template_types.template_type_code = templates.template_type_code where templates.template_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 任何文档都没使用过的的模板类型代码有哪些？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有模板类型代码和说明。", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有模板类型代码和说明。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "所有模板类型的类型代码和描述是什么？", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 所有模板类型的类型代码和描述是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "模板类型代码'广告'的模板类型说明是什么？", "query": "select template_type_description from ref_template_types where template_type_code = '广告'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = '广告'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 模板类型代码'广告'的模板类型说明是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回模板类型代码是'广告'的模板类型描述。", "query": "select template_type_description from ref_template_types where template_type_code = '广告'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = '广告'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回模板类型代码是'广告'的模板类型描述。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "模板类型描述是'书本'的模板类型代码是什么？", "query": "select template_type_code from ref_template_types where template_type_description = '书本'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = '书本'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 模板类型描述是'书本'的模板类型代码是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回描述是'书'的模板类型的类型代码。", "query": "select template_type_code from ref_template_types where template_type_description = '书本'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = '书'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回描述是'书'的模板类型的类型代码。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "对于任何文档使用过的模板，都有哪些不同的模板类型描述？", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 对于任何文档使用过的模板，都有哪些不同的模板类型描述？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回文档中使用过的模板的不同描述。", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回文档中使用过的模板的不同描述。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "模板类型描述是'演示'的模板ID是什么？", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = '演示'", "predicted_sql": "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = '演示'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 模板类型描述是'演示'的模板ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回对应描述为'演示'的模板的ID。", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = '演示'", "predicted_sql": "select templates.template_id from templates where templates.template_id in ( select documents.template_id from documents where documents.document_description = '演示' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回对应描述为'演示'的模板的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "总共有多少段落？", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( paragraph_id ) from paragraphs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 总共有多少段落？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算段落数。", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( paragraph_id ) from paragraphs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算段落数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "名为'夏日游览'的文件有多少段落？", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '夏日游览'", "predicted_sql": "select count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = '夏日游览'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 名为'夏日游览'的文件有多少段落？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "计算名为'夏日游览'的文件的段落数。", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '夏日游览'", "predicted_sql": "select count ( paragraphs.paragraph_id ) from documents join templates on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where documents.document_name = '夏日游览'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 计算名为'夏日游览'的文件的段落数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示包含文本'韩文'的段落的详细内容。", "query": "select other_details from paragraphs where paragraph_text = '韩文'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs where paragraphs.paragraph_text like '%韩文%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示包含文本'韩文'的段落的详细内容。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "包含'韩文'一词的段落的详细内容是什么？", "query": "select other_details from paragraphs where paragraph_text = '韩文'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where paragraphs.paragraph_text like '%韩文%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 包含'韩文'一词的段落的详细内容是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示名称为'欢迎来到纽约'的文件的所有段落ID和文本。", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '上海欢迎你'", "predicted_sql": "select paragraphs.paragraph_id  , paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = '欢迎来到纽约'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示名称为'欢迎来到纽约'的文件的所有段落ID和文本。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "在名称为'欢迎来到纽约'的文件中，段落的ID和文本是什么？", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '上海欢迎你'", "predicted_sql": "select paragraphs.paragraph_id  , paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = '欢迎来到纽约'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 在名称为'欢迎来到纽约'的文件中，段落的ID和文本是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示名称为'客户评论'的文档的所有段落文本。", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '顾客评价'", "predicted_sql": "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = '客户评论'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示名称为'客户评论'的文档的所有段落文本。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "名称为'客户评论'的文档中的段落文本是什么？", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '顾客评价'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = '客户评论'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 名称为'客户评论'的文档中的段落文本是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "按文件ID排序，显示所有文档ID和每个文档中的段落数。", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select documents.document_id  , count ( paragraphs.paragraph_id ) as num_paragraphs from documents left join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 按文件ID排序，显示所有文档ID和每个文档中的段落数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "按id排序，返回不同的文档id以及每个文档对应的段落数量。", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select documents.document_id  , count ( paragraphs.paragraph_id ) as paragraph_count from documents inner join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 按id排序，返回不同的文档id以及每个文档对应的段落数量。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示所有文档ID、名称和每个文档中的段落数。", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select documents.document_id  , documents.document_name  , count ( paragraphs.paragraph_id ) as num_paragraphs from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id  , documents.document_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示所有文档ID、名称和每个文档中的段落数。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "每个文档的id和名称是什么，以及每个文档中的段落数量是多少？", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select documents.document_id  , documents.document_name  , count ( paragraphs.paragraph_id ) as paragraph_count from documents left join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id  , documents.document_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 每个文档的id和名称是什么，以及每个文档中的段落数量是多少？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "列出至少包含两个段落的所有文档的ID。", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count ( paragraphs.paragraph_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 列出至少包含两个段落的所有文档的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "有2个或更多段落的文档的ID是什么？", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select documents.document_id from documents join paragraphs on paragraphs.document_id = documents.document_id group by documents.document_id having count ( paragraphs.paragraph_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 有2个或更多段落的文档的ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "段落数量最多的文档的ID和名称是什么？", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select documents.document_id  , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( paragraphs.paragraph_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 段落数量最多的文档的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回拥有最多段落数量的文档的ID和名称。", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select documents.document_id  , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id  , documents.document_name order by count ( paragraphs.paragraph_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回拥有最多段落数量的文档的ID和名称。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "段落数量最少的文档的ID是多少？", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( paragraphs.paragraph_id ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 段落数量最少的文档的ID是多少？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "返回段落数量最少的文档的ID。", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 返回段落数量最少的文档的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "有1个或2个段落的文档ID是什么？", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 有1个或2个段落的文档ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "给出包含一到两个段落的文档的ID。", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select documents.document_id from documents join paragraphs on paragraphs.document_id = documents.document_id group by documents.document_id having count ( paragraphs.paragraph_id ) between 1 and 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 给出包含一到两个段落的文档的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "显示段落包含文本'巴西'和'爱尔兰'的文档的ID。", "query": "select document_id from paragraphs where paragraph_text = '巴西' intersect select document_id from paragraphs where paragraph_text = '爱尔兰'", "predicted_sql": "select documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id where paragraphs.paragraph_text like '%巴西%' and paragraphs.paragraph_text like '%爱尔兰%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 显示段落包含文本'巴西'和'爱尔兰'的文档的ID。 \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "段落包含文本'巴西'和'爱尔兰'的文档的ID是什么？", "query": "select document_id from paragraphs where paragraph_text = '巴西' intersect select document_id from paragraphs where paragraph_text = '爱尔兰'", "predicted_sql": "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%巴西%' and paragraphs.paragraph_text like '%爱尔兰%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 段落包含文本'巴西'和'爱尔兰'的文档的ID是什么？ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "course_teach", "question": "有多少老师？", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( * ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 有多少老师？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "教师总数是多少？", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( teacher_id ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 教师总数是多少？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "按年龄递增顺序列出教师姓名。", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher order by teacher.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 按年龄递增顺序列出教师姓名。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "按照年龄递增排序，老师的姓名是什么？", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher order by teacher.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 按照年龄递增排序，老师的姓名是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "教师的年龄和家乡是什么？", "query": "select age , hometown from teacher", "predicted_sql": "select teacher.age  , teacher.hometown from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 教师的年龄和家乡是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "每个老师的年龄和家乡是什么？", "query": "select age , hometown from teacher", "predicted_sql": "select teacher.age  , teacher.hometown from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 每个老师的年龄和家乡是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "列出家乡不是'小杠杆市区'的教师的姓名。", "query": "select name from teacher where hometown != '下城区'", "predicted_sql": "select teacher.name from teacher where teacher.hometown <> '小杠杆市区'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 列出家乡不是'小杠杆市区'的教师的姓名。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "家乡不是'小杠杆城区'的老师叫什么名字？", "query": "select name from teacher where hometown != '下城区'", "predicted_sql": "select teacher.name from teacher where teacher.hometown <> '小杠杆城区'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 家乡不是'小杠杆城区'的老师叫什么名字？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "显示32岁或33岁的教师姓名。", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 显示32岁或33岁的教师姓名。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "32岁或33岁的老师的名字是什么？", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 32岁或33岁的老师的名字是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "最年轻的老师的家乡是哪里？", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.hometown from teacher order by teacher.age asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 最年轻的老师的家乡是哪里？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "最年轻的老师来自哪里？", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.hometown from teacher order by teacher.age asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 最年轻的老师来自哪里？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "展示来自不同家乡的教师和来自每个家乡的教师数量。", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select teacher.hometown  , count ( teacher.teacher_id ) as teacher_count from teacher group by teacher.hometown", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 展示来自不同家乡的教师和来自每个家乡的教师数量。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "每一个家乡对应有多少老师？", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select teacher.hometown  , count ( teacher.teacher_id ) as teacher_count from teacher group by teacher.hometown", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 每一个家乡对应有多少老师？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "列出最常见的教师的家乡。", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "select teacher.hometown from teacher group by teacher.hometown order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 列出最常见的教师的家乡。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "最常见的教师的家乡是哪里？", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "select teacher.hometown from teacher group by teacher.hometown order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 最常见的教师的家乡是哪里？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "展示至少有两位老师来自的家乡。", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 展示至少有两位老师来自的家乡。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "至少有两位教师来自的家乡是哪些？", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 至少有两位教师来自的家乡是哪些？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "展示老师的名字和安排他们教的课程。", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 展示老师的名字和安排他们教的课程。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "每个老师的名字是什么？他们教什么课程？", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 每个老师的名字是什么？他们教什么课程？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "按照老师名字的字母升序排列，显示老师的名字和安排他们教的课程。", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 按照老师名字的字母升序排列，显示老师的名字和安排他们教的课程。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "将老师姓名按字母顺序升序排列，老师的姓名和他们教的课程是什么？", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 将老师姓名按字母顺序升序排列，老师的姓名和他们教的课程是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "展示数学课的老师的名字。", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = '数学'", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id where course.course = '数学课'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 展示数学课的老师的名字。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "教数学课的老师的名字是什么？", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = '数学'", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id where course.course = '数学'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 教数学课的老师的名字是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "显示教师姓名和他们教的课程数量。", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course_arrange.course_id ) as course_count from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 显示教师姓名和他们教的课程数量。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "老师的名字是什么？他们教了多少门课？", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course_arrange.course_id ) as num_courses from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 老师的名字是什么？他们教了多少门课？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "显示至少教两门课的教师的姓名。", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.teacher_id having count ( distinct course_arrange.course_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 显示至少教两门课的教师的姓名。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "教至少两门课程的老师的名字是什么？", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher where teacher.teacher_id in ( select course_arrange.teacher_id from course_arrange group by course_arrange.teacher_id having count ( distinct course_arrange.course_id ) >= 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 教至少两门课程的老师的名字是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "列出没有被安排上课的老师的名字。", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher where teacher.teacher_id not in ( select teacher_id from course_arrange )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 列出没有被安排上课的老师的名字。 \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "没有被安排教课的老师的名字是什么？", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 没有被安排教课的老师的名字是什么？ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "museum_visit", "question": "30岁以下的游客有多少？", "query": "select count ( * ) from visitor where age < 30", "predicted_sql": "select count ( * ) from visitor where age < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 30岁以下的游客有多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "查找会员级别高于4的游客的姓名，并将结果按级别从高到低排序。", "query": "select name from visitor where level_of_membership > 4 order by level_of_membership desc", "predicted_sql": "select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 查找会员级别高于4的游客的姓名，并将结果按级别从高到低排序。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "会员级别不高于4的游客的平均年龄是多少？", "query": "select avg ( age ) from visitor where level_of_membership <= 4", "predicted_sql": "select avg ( visitor.age ) from visitor where visitor.level_of_membership <= 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 会员级别不高于4的游客的平均年龄是多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "查找会员级别高于4的游客的姓名和会员级别，并按年龄从高到低进行排序。", "query": "select name , level_of_membership from visitor where level_of_membership > 4 order by age desc", "predicted_sql": "select visitor.name  , visitor.level_of_membership from visitor where visitor.level_of_membership > 4 order by visitor.age desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 查找会员级别高于4的游客的姓名和会员级别，并按年龄从高到低进行排序。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "找到员工人数最多的博物馆的ID和名称？", "query": "select museum_id , name from museum order by num_of_staff desc limit 1", "predicted_sql": "select museum_id  , name from museum order by num_of_staff desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 找到员工人数最多的博物馆的ID和名称？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "查找在2009年之前开放的博物馆的平均工作人员数量。", "query": "select avg ( num_of_staff ) from museum where open_year < 2009", "predicted_sql": "select avg ( num_of_staff ) from museum where open_year < 2009", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 查找在2009年之前开放的博物馆的平均工作人员数量。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "名称是'国家艺术馆'的博物馆的开馆年和员工人数是多少？", "query": "select num_of_staff , open_year from museum where name = '国家艺术馆'", "predicted_sql": "select museum.open_year  , museum.num_of_staff from museum where museum.name = '国家艺术馆'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 名称是'国家艺术馆'的博物馆的开馆年和员工人数是多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "查找工作人员人数超过2010年后开馆的博物馆的最少工作人员人数的博物馆的名称。", "query": "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )", "predicted_sql": "select museum.name from museum where museum.open_year > 2010 group by museum.name having museum.num_of_staff = min ( museum.num_of_staff )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 查找工作人员人数超过2010年后开馆的博物馆的最少工作人员人数的博物馆的名称。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "找到不止一次参观博物馆的游客的id、姓名和年龄。", "query": "select visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id having count ( * ) > 1", "predicted_sql": "select visitor.id  , visitor.name  , visitor.age from visitor join visit on visit.visitor_id = visitor.id group by visitor.id  , visitor.name  , visitor.age having count ( visit.visitor_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 找到不止一次参观博物馆的游客的id、姓名和年龄。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "在所有的博物馆门票中，花钱最多的游客的id、姓名和会员级别是多少？", "query": "select visit.visitor_id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1", "predicted_sql": "select visitor.id  , visitor.name  , visitor.level_of_membership from visit join visitor on visit.visitor_id = visitor.id order by visit.total_spent desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 在所有的博物馆门票中，花钱最多的游客的id、姓名和会员级别是多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "被参观次数最多的博物馆的ID和名称是什么时候？", "query": "select visit.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1", "predicted_sql": "select museum_id  , name from museum order by num_of_staff desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 被参观次数最多的博物馆的ID和名称是什么时候？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "至今没有游客的博物馆叫什么名字？", "query": "select name from museum where museum_id not in ( select museum_id from visit )", "predicted_sql": "select museum.name from museum where museum.museum_id not in ( select visit.museum_id from visit )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 至今没有游客的博物馆叫什么名字？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "找出一次买下最多票的游客的姓名和年龄。", "query": "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1", "predicted_sql": "select visitor.name  , visitor.age from visitor join visit on visit.visitor_id = visitor.id where visit.num_of_ticket = ( select max ( num_of_ticket ) from visit )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 找出一次买下最多票的游客的姓名和年龄。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "在所有的游玩中，购买的平均票数和最大票数是多少？", "query": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit", "predicted_sql": "select avg ( num_of_ticket )  , max ( num_of_ticket ) from visit", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 在所有的游玩中，购买的平均票数和最大票数是多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "会员级别为'1'的游客的门票总费用是多少？", "query": "select sum ( visit.total_spent ) from visitor join visit on visitor.id = visit.visitor_id where visitor.level_of_membership = 1", "predicted_sql": "select sum ( visit.total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = '1'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 会员级别为'1'的游客的门票总费用是多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "既参观过2009年之前开放的博物馆又参观过2011年之后开放的博物馆的游客的名字是什么？", "query": "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year > 2011", "predicted_sql": "select visitor.name from visitor join visit on visit.visitor_id = visitor.id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 and museum.open_year > 2011", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 既参观过2009年之前开放的博物馆又参观过2011年之后开放的博物馆的游客的名字是什么？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "找到没有参观过2010年开放的博物馆的游客的人数。", "query": "select count ( * ) from visitor where id not in ( select visit.visitor_id from museum join visit on museum.museum_id = visit.museum_id where museum.open_year > 2010 )", "predicted_sql": "select count ( visitor.id ) from visitor where visitor.id not in ( select visit.visitor_id from visit inner join museum on visit.museum_id = museum.museum_id where museum.open_year = 2010 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 找到没有参观过2010年开放的博物馆的游客的人数。 \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2008年前或2013年后开放的博物馆有多少？", "query": "select count ( * ) from museum where open_year > 2013 or open_year < 2008", "predicted_sql": "select count ( * ) from museum where museum.open_year < 2008 or museum.open_year > 2013", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2008年前或2013年后开放的博物馆有多少？ \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "wta_1", "question": "找出球员总数。", "query": "select count ( * ) from players", "predicted_sql": "select count ( distinct player_id ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出球员总数。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "有多少球员？", "query": "select count ( * ) from players", "predicted_sql": "select count ( distinct player_id ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 有多少球员？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出比赛的总数。", "query": "select count ( * ) from matches", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出比赛的总数。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "计算比赛的数量。", "query": "select count ( * ) from matches", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 计算比赛的数量。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "列出来自国家代码为'中国'的所有球员的名字和生日。", "query": "select first_name , birth_date from players where country_code = '中国'", "predicted_sql": "select players.first_name  , players.birth_date from players where players.country_code = '中国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 列出来自国家代码为'中国'的所有球员的名字和生日。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "来自'中国'的选手的名字和出生日期是什么？", "query": "select first_name , birth_date from players where country_code = '中国'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players where players.country_code = '中国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 来自'中国'的选手的名字和出生日期是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出所有比赛的失败者和胜利者的平均年龄。", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select avg ( matches.loser_age ) as average_loser_age  , avg ( matches.winner_age ) as average_winner_age from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出所有比赛的失败者和胜利者的平均年龄。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "所有比赛中输家和赢家的平均年龄是多少？", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select avg ( matches.loser_age ) as average_loser_age  , avg ( matches.winner_age ) as average_winner_age from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 所有比赛中输家和赢家的平均年龄是多少？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出所有比赛中胜利者的平均排名。", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select avg ( rankings.ranking ) as average_ranking from matches inner join rankings on matches.winner_id = rankings.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出所有比赛中胜利者的平均排名。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在所有比赛中胜利者平均排名是多少？", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select avg ( rankings.ranking ) as average_ranking from matches inner join rankings on matches.winner_id = rankings.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在所有比赛中胜利者平均排名是多少？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出所有比赛中失败者的最高排名。", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select max ( rankings.ranking ) as highest_ranking from matches join rankings on matches.loser_id = rankings.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出所有比赛中失败者的最高排名。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在所有比赛中输家的最好的排名是多少？", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select max ( rankings.ranking ) as best_ranking from matches join rankings on rankings.player_id = matches.loser_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在所有比赛中输家的最好的排名是多少？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出所有球员所属的不同的国家代码的数量。", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select count ( distinct players.country_code ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出所有球员所属的不同的国家代码的数量。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "球员来自多少个不同的国家？", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select count ( distinct players.country_code ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 球员来自多少个不同的国家？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出不同的失败者姓名的数量。", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select count ( distinct loser_name ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出不同的失败者姓名的数量。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "失败者有多少不同的的名字？", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select count ( distinct loser_name ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 失败者有多少不同的的名字？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找到有超过10场比赛的联赛的名称。", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select matches.tourney_name from matches group by matches.tourney_name having count ( matches.match_num ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找到有超过10场比赛的联赛的名称。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "有超过10场比赛的联赛名称是什么？", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select matches.tourney_name from matches group by matches.tourney_name having count ( matches.match_num ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 有超过10场比赛的联赛名称是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "列出所有在2013年和2016年中获胜者的名字。", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select matches.winner_name from matches where matches.tourney_date like '2013%' or matches.tourney_date like '2016%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 列出所有在2013年和2016年中获胜者的名字。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在2013年和2016年中获胜的球员的名字是什么？", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year in ( 2013  , 2016 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在2013年和2016年中获胜的球员的名字是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "列出所有在2013年或2016年中的比赛的数量。", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( * ) from matches where year = 2013 or year = 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 列出所有在2013年或2016年中的比赛的数量。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在2013年或2016年中有多少场比赛？", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( * ) from matches where year = 2013 or year = 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在2013年或2016年中有多少场比赛？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在'WTA锦标赛'和'澳大利亚公开赛'中都取胜的球员的国家代码和名字是什么？", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA 锦标赛' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = '澳网'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在'WTA锦标赛'和'澳大利亚公开赛'中都取胜的球员的国家代码和名字是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "获得'WTA锦标赛'和'澳大利亚公开赛冠军'的球员的名字和国家代码是什么？", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA 锦标赛' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = '澳网'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 获得'WTA锦标赛'和'澳大利亚公开赛冠军'的球员的名字和国家代码是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "查找最老的球员的名字和国家代码。", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players order by players.birth_date asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 查找最老的球员的名字和国家代码。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "最老的球员的名字和国家代码是什么？", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players order by players.birth_date asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 最老的球员的名字和国家代码是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "按出生日期顺序列出所有球员的名字和姓氏。", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 按出生日期顺序列出所有球员的名字和姓氏。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "按出生日期排序，所有球员的全名是什么？", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name || ' ' || players.last_name as full_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 按出生日期排序，所有球员的全名是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "按照出生日期的顺序列出左手球员的名字和姓氏。", "query": "select first_name , last_name from players where hand = '左' order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players where players.hand = 'L' order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 按照出生日期的顺序列出左手球员的名字和姓氏。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "根据出生日期顺序，所有左手球员的全名是什么？", "query": "select first_name , last_name from players where hand = '左' order by birth_date asc", "predicted_sql": "select players.first_name || ' ' || players.last_name as full_name from players where players.hand = 'L' order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 根据出生日期顺序，所有左手球员的全名是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出巡回比赛次数最多的球员的名字和国家代码。", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players join matches on matches.winner_id = players.player_id group by players.player_id order by count ( matches.match_num ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出巡回比赛次数最多的球员的名字和国家代码。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "巡回次数最多的球员的名字和国家代码是什么？", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 巡回次数最多的球员的名字和国家代码是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出比赛数量最多的一年。", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select year  , count ( * ) as num_matches from matches group by year order by num_matches desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出比赛数量最多的一年。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "哪一年的比赛最多？", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select year  , count ( * ) as num_matches from matches group by year order by num_matches desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 哪一年的比赛最多？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出获胜次数最多的获胜者的名字和排名积分。", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select winner_name  , winner_rank_points from matches join players on matches.winner_id = players.player_id group by winner_name order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出获胜次数最多的获胜者的名字和排名积分。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "赢得比赛最多的赢家的名字是什么？这些球员的排名积分是多少？", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , max ( rankings.ranking_points ) as ranking_points from players join rankings on players.player_id = rankings.player_id where players.player_id in ( select winner_id from matches group by winner_id having count ( * ) = ( select max ( win_count ) from ( select winner_id  , count ( * ) as win_count from matches group by winner_id ) ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 赢得比赛最多的赢家的名字是什么？这些球员的排名积分是多少？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出那些排名积分最高的并且参加过'澳大利亚公开赛'的获胜者的名字。", "query": "select winner_name from matches where tourney_name = '澳网' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_name = '澳大利亚公开赛' order by rankings.ranking_points desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出那些排名积分最高的并且参加过'澳大利亚公开赛'的获胜者的名字。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "参加'澳大利亚公开赛'的排名积分最高的获胜者叫什么名字？", "query": "select winner_name from matches where tourney_name = '澳网' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_name = '澳大利亚公开赛' order by rankings.ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 参加'澳大利亚公开赛'的排名积分最高的获胜者叫什么名字？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出比赛时间最长的输家和赢家的名字。", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select matches.winner_name  , matches.loser_name from matches order by matches.minutes desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出比赛时间最长的输家和赢家的名字。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "比赛时间最长的胜利者和失败者的名字是什么？", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select matches.winner_name  , matches.loser_name from matches order by matches.minutes desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 比赛时间最长的胜利者和失败者的名字是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出每个球员的平均排名和他们的名字。", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , avg ( rankings.ranking ) as average_ranking from players join rankings on players.player_id = rankings.player_id group by players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出每个球员的平均排名和他们的名字。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "所有球员的名字以及他们的平均排名是什么？", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , avg ( rankings.ranking ) as average_ranking from players join rankings on players.player_id = rankings.player_id group by players.first_name  , players.last_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 所有球员的名字以及他们的平均排名是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出每个球员的总排名得分和他们的名字。", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , sum ( rankings.ranking_points ) as total_ranking_points from players join rankings on players.player_id = rankings.player_id group by players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出每个球员的总排名得分和他们的名字。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "所有球员的名字，以及他们的总排名积分是什么？", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , rankings.ranking_points from players join rankings on players.player_id = rankings.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 所有球员的名字，以及他们的总排名积分是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出每个国家的球员数量。", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select players.country_code  , count ( players.player_id ) as player_count from players group by players.country_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出每个国家的球员数量。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "每个国家有多少球员？", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select players.country_code  , count ( players.player_id ) as player_count from players group by players.country_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 每个国家有多少球员？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找到拥有球员数量最多的国家的代码。", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.country_code from players group by players.country_code order by count ( players.player_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找到拥有球员数量最多的国家的代码。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "拥有最多球员的国家的代码是什么？", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.country_code from players group by players.country_code order by count ( players.player_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 拥有最多球员的国家的代码是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出拥有超过50名球员的国家的代码。", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.country_code from players group by players.country_code having count ( distinct players.player_id ) > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出拥有超过50名球员的国家的代码。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "拥有超过50名球员的国家的代码是什么？", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.country_code from players group by players.country_code having count ( players.player_id ) > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 拥有超过50名球员的国家的代码是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "查找每个排名日期的巡回比赛的总数。", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select rankings.ranking_date  , count ( matches.match_num ) as total_matches from rankings join matches on rankings.player_id = matches.winner_id or rankings.player_id = matches.loser_id group by rankings.ranking_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 查找每个排名日期的巡回比赛的总数。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "每个排名日期总共有多少次巡回比赛？", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select ranking_date  , count ( * ) as total_matches from rankings group by ranking_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 每个排名日期总共有多少次巡回比赛？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出每年进行的比赛次数。", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select year  , count ( * ) as num_matches from matches group by year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出每年进行的比赛次数。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "每年有多少场比赛？", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( * ) as num_matches from matches group by year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 每年有多少场比赛？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出所有比赛中3个最年轻的获胜者的名字和排名。", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , rankings.ranking from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id order by players.birth_date asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出所有比赛中3个最年轻的获胜者的名字和排名。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在所有比赛中，三个最年轻的获胜者的名字和等级是什么？", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , rankings.ranking from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id order by players.birth_date asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在所有比赛中，三个最年轻的获胜者的名字和等级是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "有多少不同的获胜者都参加了'WTA锦标赛'，并且都是左撇子？", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA 锦标赛' and winner_hand = '左'", "predicted_sql": "select count ( distinct winner_id ) from matches where tourney_name = 'WTA锦标赛' and winner_hand = '左撇子'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 有多少不同的获胜者都参加了'WTA锦标赛'，并且都是左撇子？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出参加'WTA锦标赛'的左撇子获胜者的数目。", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA 锦标赛' and winner_hand = '左'", "predicted_sql": "select count ( distinct matches.winner_id ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA锦标赛' and players.hand = 'L'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出参加'WTA锦标赛'的左撇子获胜者的数目。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出在所有比赛中排名积分最高的获胜者的姓名、国家代码和生日。", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code  , players.birth_date from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id order by rankings.ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出在所有比赛中排名积分最高的获胜者的姓名、国家代码和生日。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "在所有比赛中得分最高的选手的名字、国家代码和生日是什么？", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code  , players.birth_date from players join matches on matches.winner_id = players.player_id order by matches.score desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 在所有比赛中得分最高的选手的名字、国家代码和生日是什么？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "找出每个手型的球员数。", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select players.hand  , count ( players.player_id ) as player_count from players group by players.hand", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 找出每个手型的球员数。 \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "每一种手型有多少球员？", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select players.hand  , count ( players.player_id ) as player_count from players group by players.hand", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 每一种手型有多少球员？ \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "battle_death", "question": "有多少艘船最终被'俘虏'？", "query": "select count ( * ) from ship where disposition_of_ship = '俘虏'", "predicted_sql": "select count ( distinct ship.id ) from ship where ship.disposition_of_ship = '俘虏'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 有多少艘船最终被'俘虏'？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "按名称的字母顺序降序列出名称和吨位。", "query": "select name , tonnage from ship order by name desc", "predicted_sql": "select ship.name  , ship.tonnage from ship order by ship.name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 按名称的字母顺序降序列出名称和吨位。 \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "列出每一场战斗的名称、日期和结果。", "query": "select name , date from battle", "predicted_sql": "select battle.name  , battle.date  , battle.result from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 列出每一场战斗的名称、日期和结果。 \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "每一次造成的最大和最小死亡人数是多少？", "query": "select max ( killed ) , min ( killed ) from death", "predicted_sql": "select max ( death.killed ) as max_killed  , min ( death.killed ) as min_killed from death", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 每一次造成的最大和最小死亡人数是多少？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "平均每次受伤次数是多少？", "query": "select avg ( injured ) from death", "predicted_sql": "select avg ( injured ) from death", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 平均每次受伤次数是多少？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "吨位为'T'的船舶造成的伤亡事故是什么？", "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'", "predicted_sql": "select death.note from ship join death on death.caused_by_ship_id = ship.id where ship.tonnage = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 吨位为'T'的船舶造成的伤亡事故是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "当保加利亚的指挥官不是'博瑞尔'时，战争的名称和结果是什么？", "query": "select name , result from battle where bulgarian_commander != '博瑞尔'", "predicted_sql": "select battle.name  , battle.result from battle where battle.bulgarian_commander  != '博瑞尔'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 当保加利亚的指挥官不是'博瑞尔'时，战争的名称和结果是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "损失过'帆船'船只的战斗的不同的id和名称是什么？", "query": "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = '帆船'", "predicted_sql": "select battle.id  , battle.name from battle join ship on ship.lost_in_battle = battle.id where ship.ship_type = '帆船'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 损失过'帆船'船只的战斗的不同的id和名称是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "导致总共超过10人死亡的战斗的ID和名称是什么？", "query": "select battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id group by battle.id having sum ( death.killed ) > 10", "predicted_sql": "select battle.id  , battle.name from battle join death on death.caused_by_ship_id = battle.id group by battle.id  , battle.name having sum ( death.killed ) + sum ( death.injured ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 导致总共超过10人死亡的战斗的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "造成总伤害最多的船的ID和名称是什么？", "query": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id order by count ( * ) desc limit 1", "predicted_sql": "select ship.id  , ship.name from ship join death on death.caused_by_ship_id = ship.id group by ship.id  , ship.name order by sum ( death.killed + death.injured ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 造成总伤害最多的船的ID和名称是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "在保加利亚指挥官'卡洛扬'和拉丁指挥官'鲍德温一世'之间，有哪些不同的战斗名称？", "query": "select name from battle where bulgarian_commander = '卡洛扬' and latin_commander = '鲍德温一世'", "predicted_sql": "select distinct battle.name from battle where battle.bulgarian_commander = '卡洛扬' and battle.latin_commander = '鲍德温一世'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 在保加利亚指挥官'卡洛扬'和拉丁指挥官'鲍德温一世'之间，有哪些不同的战斗名称？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "战斗共有多少不同的结果？", "query": "select count ( distinct result ) from battle", "predicted_sql": "select count ( distinct battle.result ) from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 战斗共有多少不同的结果？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "有多少次战斗没有失去吨位为'225'的船只？", "query": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )", "predicted_sql": "select count ( distinct battle.id ) from battle left join ship on ship.lost_in_battle = battle.id where ship.tonnage  != '225' or ship.tonnage is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 有多少次战斗没有失去吨位为'225'的船只？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "列出失去'远征'号和'长征号'号战舰的战斗的名称和日期。", "query": "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = '远征' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = '长征号'", "predicted_sql": "select battle.name  , battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = '远征号' or ship.name = '长征号'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 列出失去'远征'号和'长征号'号战舰的战斗的名称和日期。 \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "显示在'英吉利海峡'中没有船只损失的战斗的名称、结果和保加利亚指挥官。", "query": "select name , result , bulgarian_commander from battle except select battle.name , battle.result , battle.bulgarian_commander from battle join ship on battle.id = ship.lost_in_battle where ship.location = '英吉利海峡'", "predicted_sql": "select battle.name  , battle.result  , battle.bulgarian_commander from battle left join ship on ship.lost_in_battle = battle.id where ship.location = '英吉利海峡' and ship.lost_in_battle is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 显示在'英吉利海峡'中没有船只损失的战斗的名称、结果和保加利亚指挥官。 \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "包含文本为'东'的死亡事件的注解是什么？", "query": "select note from death where note like '东'", "predicted_sql": "select death.note from death where death.note like '%东%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 包含文本为'东'的死亡事件的注解是什么？ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "student_transcripts_tracking", "question": "包括第一行和第二行的所有地址是什么？", "query": "select line_1 , line_2 from addresses", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 包括第一行和第二行的所有地址是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "所有地址的第一和第二行是什么？", "query": "select line_1 , line_2 from addresses", "predicted_sql": "select addresses.line_1  , addresses.line_2 from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 所有地址的第一和第二行是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "总共列出了多少门课程？", "query": "select count ( * ) from courses", "predicted_sql": "select count ( distinct courses.course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 总共列出了多少门课程？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有多少门课？", "query": "select count ( * ) from courses", "predicted_sql": "select count ( course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有多少门课？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'数学'课程是怎样描述的？", "query": "select course_description from courses where course_name = '数学'", "predicted_sql": "select courses.course_description from courses where courses.course_name = '数学'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '数学'课程是怎样描述的？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "所有数学课程的描述是什么？", "query": "select course_description from courses where course_name = '数学'", "predicted_sql": "select courses.course_description from courses where courses.course_name like '%Math%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 所有数学课程的描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'大连'城市的邮政编码是什么？", "query": "select zip_postcode from addresses where city = '大连'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = '大连'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '大连'城市的邮政编码是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'大连'的邮政编码是什么？", "query": "select zip_postcode from addresses where city = '大连'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = '大连'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '大连'的邮政编码是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "哪个学院授予的学位最多？列出学院名称和ID。", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_id  , departments.department_name from departments join degree_programs on departments.department_id = degree_programs.department_id group by departments.department_id order by count ( degree_programs.degree_program_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 哪个学院授予的学位最多？列出学院名称和ID。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "对于每个学院ID，学位数目最多的学院的名称是什么？", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name from departments join degree_programs on departments.department_id = degree_programs.department_id group by departments.department_id order by count ( degree_programs.degree_program_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 对于每个学院ID，学位数目最多的学院的名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有多少学院可以授予学位？", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "select count ( distinct departments.department_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有多少学院可以授予学位？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有多少不同的学院可以授予学位？", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "select count ( distinct departments.department_id ) as num_departments from departments join degree_programs on departments.department_id = degree_programs.department_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有多少不同的学院可以授予学位？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有多少个不同的学位名称？", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select count ( distinct degree_summary_name ) from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有多少个不同的学位名称？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "授予多少个不同的学位？", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select count ( distinct degree_program_id ) from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 授予多少个不同的学位？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'工程'学院提供多少学位？", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = '摄影师'", "predicted_sql": "select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = '工程'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '工程'学院提供多少学位？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'工程'学院有多少学位？", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = '摄影师'", "predicted_sql": "select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = '工程'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '工程'学院有多少学位？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "所有章节的名称和描述是什么？", "query": "select section_name , section_description from sections", "predicted_sql": "select sections.section_name  , sections.section_description from sections", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 所有章节的名称和描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "所有章节的名称和描述是什么？", "query": "select section_name , section_description from sections", "predicted_sql": "select sections.section_name  , sections.section_description from sections", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 所有章节的名称和描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最多有2个章节的课程的名称和ID是什么？", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_id  , courses.course_name from courses join sections on courses.course_id = sections.course_id group by courses.course_id  , courses.course_name having count ( sections.section_id ) <= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最多有2个章节的课程的名称和ID是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "每个少于2个章节的课程的名字和ID是什么？", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_id  , courses.course_name from courses where courses.course_id in ( select sections.course_id from sections group by sections.course_id having count ( sections.section_id ) < 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 每个少于2个章节的课程的名字和ID是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "以逆向词典顺序列出章节名称。", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select section_name from sections order by section_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 以逆向词典顺序列出章节名称。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "按逆字母顺序排列的章节的名称是什么？", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select sections.section_name from sections order by sections.section_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 按逆字母顺序排列的章节的名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最多学生注册的学期是哪一学期？显示名称和ID。", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select semesters.semester_name  , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( student_enrolment.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最多学生注册的学期是哪一学期？显示名称和ID。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "对于每个学期，注册学生最多的那个学期的名字和id是什么？", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select semesters.semester_id  , semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id  , semesters.semester_name order by count ( student_enrolment.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 对于每个学期，注册学生最多的那个学期的名字和id是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "名字里含有子串为'计算机'的学院的描述是什么？", "query": "select department_description from departments where department_name like '计算机'", "predicted_sql": "select departments.department_description from departments where departments.department_name like '%计算机%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 名字里含有子串为'计算机'的学院的描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "那个名字里有'计算机'的学院的描述是什么？", "query": "select department_description from departments where department_name like '计算机'", "predicted_sql": "select departments.department_description from departments where departments.department_name like '%计算机%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 那个名字里有'计算机'的学院的描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "谁在一个学期内修读了2个学位课程？列出名字、中间名、姓氏和ID。", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id where student_enrolment.semester_id = [semester_id] group by students.student_id having count ( student_enrolment_courses.course_id ) = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 谁在一个学期内修读了2个学位课程？列出名字、中间名、姓氏和ID。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "在一学期内修读2个学位课程的所有学生的名字、中间名、姓氏和id是什么？", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id where student_enrolment.semester_id = [semester_id] group by students.student_id having count ( student_enrolment_courses.course_id ) = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 在一学期内修读2个学位课程的所有学生的名字、中间名、姓氏和id是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "谁在攻读'学士'学位课程？列出名字，中间名字，姓氏。", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '本科'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '学士'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 谁在攻读'学士'学位课程？列出名字，中间名字，姓氏。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "申请'学士'学位的每个人的名字、中间名、姓氏是什么？", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '本科'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '学士'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 申请'学士'学位的每个人的名字、中间名、姓氏是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "找到最多数学生报名参加的项目？", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_summary_name  , count ( student_enrolment.student_id ) as num_students from student_enrolment inner join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by num_students desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 找到最多数学生报名参加的项目？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "申请学生人数最多的学位摘要名称是什么？", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 申请学生人数最多的学位摘要名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "找出最多数学生报名参加的项目。列出ID和摘要。", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_program_id  , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( student_enrolment.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 找出最多数学生报名参加的项目。列出ID和摘要。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最多数学生申请的学位的项目编号和学位摘要是什么？", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_program_id  , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( student_enrolment.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最多数学生申请的学位的项目编号和学位摘要是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "哪些学生报名参加任何项目的次数最多？列出id、名字、中间名、姓氏、参加次数和学生id。", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name  , count ( student_enrolment.student_id ) as enrolment_count from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by enrolment_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 哪些学生报名参加任何项目的次数最多？列出id、名字、中间名、姓氏、参加次数和学生id。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "参与任何一个课程次数最多的学生的姓名、中间名、姓氏、id和参与次数是多少？", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.student_id  , count ( student_enrolment_courses.student_enrolment_id ) as enrolment_count from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id group by students.student_id order by enrolment_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 参与任何一个课程次数最多的学生的姓名、中间名、姓氏、id和参与次数是多少？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "哪些学期没有录取学生？列出学期名称。", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select semesters.semester_name from semesters left join student_enrolment on semesters.semester_id = student_enrolment.semester_id where student_enrolment.student_enrolment_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 哪些学期没有录取学生？列出学期名称。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "没有学生入学的学期名称是什么？", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select semesters.semester_name from semesters where semesters.semester_id not in ( select student_enrolment.semester_id from student_enrolment )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 没有学生入学的学期名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有学生参加过的所有课程的名称是什么？", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from student_enrolment_courses join courses on student_enrolment_courses.course_id = courses.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有学生参加过的所有课程的名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "有学生注册过的所有课程的名称是什么？", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from student_enrolment_courses join courses on student_enrolment_courses.course_id = courses.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 有学生注册过的所有课程的名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "注册人数最多的课程名称是什么？", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( student_enrolment_courses.student_enrolment_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 注册人数最多的课程名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最多人数注册的课程名称是什么？", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最多人数注册的课程名称是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "查找目前居住在'湖北'，但没有注册任何学位课程的学生的姓氏。", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = '湖北' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id join departments on degree_programs.department_id = departments.department_id where addresses.state_province_county = '湖北' and student_enrolment.student_enrolment_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 查找目前居住在'湖北'，但没有注册任何学位课程的学生的姓氏。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "那些住在'湖北'但没有注册任何学位课程的学生的姓氏是什么？", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = '湖北' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select students.last_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.state_province_county = '湖北' and students.student_id not in ( select student_id from student_enrolment )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 那些住在'湖北'但没有注册任何学位课程的学生的姓氏是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "显示至少包括2个课程成绩的成绩单的日期和id。", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count ( distinct transcript_contents.student_course_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 显示至少包括2个课程成绩的成绩单的日期和id。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "至少有2个课程的成绩单的日期和id是什么？", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_id  , transcripts.transcript_date from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count ( distinct transcript_contents.student_course_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 至少有2个课程的成绩单的日期和id是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "名字是'钟'、姓氏是'睿'的人的电话号码是多少？", "query": "select cell_mobile_number from students where first_name = '钟' and last_name = '睿'", "predicted_sql": "select students.cell_mobile_number from students where students.first_name = '睿' and students.last_name = '钟'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 名字是'钟'、姓氏是'睿'的人的电话号码是多少？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "叫'钟睿'的学生的手机号码是多少？", "query": "select cell_mobile_number from students where first_name = '钟' and last_name = '睿'", "predicted_sql": "select students.cell_mobile_number from students where students.first_name = '钟睿'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 叫'钟睿'的学生的手机号码是多少？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "谁是第一个注册的学生？列出名字、中间名和姓氏。", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students order by students.date_first_registered asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 谁是第一个注册的学生？列出名字、中间名和姓氏。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "第一个注册的学生的名字、中间名和姓氏是什么？", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students order by students.date_first_registered asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 第一个注册的学生的名字、中间名和姓氏是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "谁是学校最早毕业的学生？列出名字、中间名和姓氏。", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students order by students.date_left asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 谁是学校最早毕业的学生？列出名字、中间名和姓氏。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最早的学校毕业生的名字、中间名和姓氏是什么？", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students order by students.date_first_registered asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最早的学校毕业生的名字、中间名和姓氏是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "谁的永久地址不同于他或她的当前地址？列出他或她的名字。", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id <> addresses.address_id where students.current_address_id <> addresses.address_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 谁的永久地址不同于他或她的当前地址？列出他或她的名字。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "永久地址与当前地址不同的学生的名字是什么？", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 永久地址与当前地址不同的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "目前哪个地址包含的学生最多？列出地址ID和地址的第1行和第2行。", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2 from addresses join students on students.permanent_address_id = addresses.address_id group by addresses.address_id order by count ( students.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 目前哪个地址包含的学生最多？列出地址ID和地址的第1行和第2行。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "包含最多数学生的地址的ID、第1行和第2行是什么？", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2 from addresses join students on students.permanent_address_id = addresses.address_id group by addresses.address_id order by count ( students.student_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 包含最多数学生的地址的ID、第1行和第2行是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "平均来说，成绩单是什么时候印的？", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "select avg ( transcripts.transcript_date ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 平均来说，成绩单是什么时候印的？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "成绩单的平均日期是什么？", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "select avg ( transcripts.transcript_date ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 成绩单的平均日期是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "第一份成绩单是什么时候发布的？列出日期和细节。", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts where transcripts.transcript_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 第一份成绩单是什么时候发布的？列出日期和细节。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "发布最早的成绩单的日期是什么？你能告诉我什么细节？", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts order by transcripts.transcript_date asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 发布最早的成绩单的日期是什么？你能告诉我什么细节？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "发布多少成绩单？", "query": "select count ( * ) from transcripts", "predicted_sql": "select count ( distinct transcripts.transcript_id ) as number_of_transcripts from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 发布多少成绩单？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "列出了多少个成绩单？", "query": "select count ( * ) from transcripts", "predicted_sql": "select count ( transcripts.transcript_id ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 列出了多少个成绩单？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最后一份成绩单发布日期是什么？", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts order by transcripts.transcript_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最后一份成绩单发布日期是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "最后一份成绩单是什么时候发布的？", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts order by transcripts.transcript_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 最后一份成绩单是什么时候发布的？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "一个课程的注册结果最多能在不同的成绩单显示多少次？同时显示课程注册ID。", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "select student_enrolment_courses.course_id  , count ( transcript_contents.transcript_id ) as num_transcripts from student_enrolment_courses left join transcript_contents on student_enrolment_courses.student_course_id = transcript_contents.student_course_id group by student_enrolment_courses.course_id order by num_transcripts desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 一个课程的注册结果最多能在不同的成绩单显示多少次？同时显示课程注册ID。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "一个课程在不同成绩单中出现的最大次数是多少？该课程的注册号是多少？", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "select max ( count )  , course_id from ( select course_id  , count ( * ) as count from student_enrolment_courses group by course_id ) as subquery group by course_id order by max ( count ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 一个课程在不同成绩单中出现的最大次数是多少？该课程的注册号是多少？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "显示成绩数量最少的成绩单的日期，并列出ID。", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select transcripts.transcript_date  , count ( transcript_contents.transcript_id ) as num_grades from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id order by num_grades asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 显示成绩数量最少的成绩单的日期，并列出ID。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "成绩数量最少的成绩单的日期和id是什么？", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id order by count ( transcript_contents.student_course_id ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 成绩数量最少的成绩单的日期和id是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "找到'硕士生'和'本科生'都有注册的那个学期。", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = '硕士' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = '本科'", "predicted_sql": "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '硕士生' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = '本科生'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 找到'硕士生'和'本科生'都有注册的那个学期。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "同时招收了'硕士生'和'本科生'的学期的id是什么？", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = '硕士' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = '本科'", "predicted_sql": "select semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by semesters.semester_id having count ( distinct degree_programs.degree_summary_name ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 同时招收了'硕士生'和'本科生'的学期的id是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "学生现在有多少不同的住址？", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select count ( distinct addresses.address_id ) from students join addresses on students.current_address_id = addresses.address_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 学生现在有多少不同的住址？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "学生现在居住的不同地址有哪些？", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from students join addresses on students.current_address_id = addresses.address_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 学生现在居住的不同地址有哪些？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "按照字母顺序倒序列出所有学生的详细资料。", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "select students.student_id  , students.current_address_id  , students.permanent_address_id  , students.first_name  , students.middle_name  , students.last_name  , students.cell_mobile_number  , students.email_address  , students.ssn  , students.date_first_registered  , students.date_left  , students.other_student_details from students order by students.last_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 按照字母顺序倒序列出所有学生的详细资料。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "按字母顺序逆序排列，你能告诉我学生其他的一些细节吗？", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "select students.other_student_details from students order by students.other_student_details desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 按字母顺序逆序排列，你能告诉我学生其他的一些细节吗？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "描述'第三'章节。", "query": "select section_description from sections where section_name = '第三'", "predicted_sql": "select sections.section_description from sections where sections.section_name = '第三'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 描述'第三'章节。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "'第三'章节的描述是什么？", "query": "select section_description from sections where section_name = '第三'", "predicted_sql": "select sections.section_description from sections where sections.section_name = '第三'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### '第三'章节的描述是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "找到永久居住在'海地'或手机电话号码是'09700166582'的学生的名字。", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = '海地' union select first_name from students where cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = '海地' or students.cell_mobile_number = '09700166582'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 找到永久居住在'海地'或手机电话号码是'09700166582'的学生的名字。 \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "永久居住在'海地'或手机号码是'09700166582'的学生的名字是什么？", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = '海地' union select first_name from students where cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = '海地' or students.cell_mobile_number = '09700166582'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 永久居住在'海地'或手机号码是'09700166582'的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "tvshow", "question": "按字母顺序列出所有卡通的标题。", "query": "select title from cartoon order by title asc", "predicted_sql": "select cartoon.title from cartoon order by cartoon.title asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 按字母顺序列出所有卡通的标题。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "按字母顺序排列，卡通的标题是什么？", "query": "select title from cartoon order by title asc", "predicted_sql": "select cartoon.title from cartoon order by cartoon.title asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 按字母顺序排列，卡通的标题是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出所有由'黄伟明'导演的卡通。", "query": "select title from cartoon where directed_by = '黄伟明'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = '黄伟明'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出所有由'黄伟明'导演的卡通。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'黄伟明'导演的卡通作品的名字是什么？", "query": "select title from cartoon where directed_by = '黄伟明'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = '黄伟明'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '黄伟明'导演的卡通作品的名字是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'李辉'写了多少动画片？", "query": "select count ( * ) from cartoon where written_by = '李辉'", "predicted_sql": "select count ( cartoon.id ) from cartoon where cartoon.directed_by = '李辉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '李辉'写了多少动画片？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'李辉'导演的动画片的数量是多少？", "query": "select count ( * ) from cartoon where written_by = '李辉'", "predicted_sql": "select count ( cartoon.id ) from cartoon where cartoon.directed_by = '李辉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '李辉'导演的动画片的数量是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出所有的卡通片的名字和他们的导演。", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "select cartoon.title  , cartoon.directed_by from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出所有的卡通片的名字和他们的导演。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "按照播出日期排序，所有卡通的名字和导演是什么？", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "select cartoon.title  , cartoon.directed_by from cartoon order by cartoon.original_air_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 按照播出日期排序，所有卡通的名字和导演是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出'黄伟明'或'姜文'导演的所有卡通片的标题。", "query": "select title from cartoon where directed_by = '黄伟明' or directed_by = '姜文'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = '黄伟明' or cartoon.directed_by = '姜文'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出'黄伟明'或'姜文'导演的所有卡通片的标题。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'黄伟明'或'姜文'导演的卡通作品的标题是什么？", "query": "select title from cartoon where directed_by = '黄伟明' or directed_by = '姜文'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = '黄伟明' or cartoon.directed_by = '姜文'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '黄伟明'或'姜文'导演的卡通作品的标题是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "哪个国家拥有最多的电视频道？列出这些国家和它们所拥有的电视频道的数量。", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.country order by channel_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 哪个国家拥有最多的电视频道？列出这些国家和它们所拥有的电视频道的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视频道最多的国家是什么？它们有多少个频道？", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.country order by channel_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视频道最多的国家是什么？它们有多少个频道？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出电视频道表中不同的系列名称的数量和不同内容的数量。", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select count ( distinct tv_channel.series_name ) as series_name_count  , count ( distinct tv_channel.content ) as content_count from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出电视频道表中不同的系列名称的数量和不同内容的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视频道表中列出了多少个不同的系列和内容？", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视频道表中列出了多少个不同的系列和内容？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视频道播出的连续剧'潜伏'的内容是什么？", "query": "select content from tv_channel where series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视频道播出的连续剧'潜伏'的内容是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "连续剧'潜伏'的内容是什么？", "query": "select content from tv_channel where series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 连续剧'潜伏'的内容是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "播出电视连续剧'潜伏'的电视频道的套餐选项是什么？", "query": "select package_option from tv_channel where series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 播出电视连续剧'潜伏'的电视频道的套餐选项是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "包含了连续剧'潜伏'的电视频道有哪些套餐选择？", "query": "select package_option from tv_channel where series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 包含了连续剧'潜伏'的电视频道有哪些套餐选择？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "有多少电视频道使用语言为'英语'？", "query": "select count ( * ) from tv_channel where language = '英语'", "predicted_sql": "select count ( * ) from tv_channel where language = '英语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 有多少电视频道使用语言为'英语'？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "使用'英语'的电视频道有多少？", "query": "select count ( * ) from tv_channel where language = '英语'", "predicted_sql": "select count ( * ) from tv_channel where language = '英语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 使用'英语'的电视频道有多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出使用语言数量最少的电视频道所使用的语言和这些电视频道的数量。", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.language order by channel_count asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出使用语言数量最少的电视频道所使用的语言和这些电视频道的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视频道使用的最少的语言是什么？有多少频道使用它？", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.language order by channel_count asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视频道使用的最少的语言是什么？有多少频道使用它？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出每种语言和使用它的电视频道的数量。", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.language", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出每种语言和使用它的电视频道的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "对于每种语言，列出使用它的电视频道的数量。", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.language", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 对于每种语言，列出使用它的电视频道的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "播放卡通'黑猫警长'的电视频道是什么？列出电视频道的连续剧的名称。", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = '黑猫警长'", "predicted_sql": "select tv_channel.series_name from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.title = '黑猫警长'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 播放卡通'黑猫警长'的电视频道是什么？列出电视频道的连续剧的名称。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "放映卡通片'黑猫警长'的电视频道播放的连续剧名称是什么？", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = '黑猫警长'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 放映卡通片'黑猫警长'的电视频道播放的连续剧名称是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出播放连续剧'潜伏'的电视频道播出的卡通片名称。", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出播放连续剧'潜伏'的电视频道播出的卡通片名称。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "播放连续剧'潜伏'的电视频道播出的卡通片标题是什么？", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = '潜伏'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 播放连续剧'潜伏'的电视频道播出的卡通片标题是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "根据收视率排序列出所有电视剧剧集。", "query": "select episode from tv_series order by rating asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 根据收视率排序列出所有电视剧剧集。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "按照收视率排序的所有剧集是什么？", "query": "select episode from tv_series order by rating asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 按照收视率排序的所有剧集是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出收视率排名前3位的电视剧。列出电视连续剧的剧集和收视率。", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_series.episode  , tv_series.rating from tv_series order by tv_series.rating desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出收视率排名前3位的电视剧。列出电视连续剧的剧集和收视率。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "在电视连续剧表中收视率最高的3个是什么？收视率是多少？", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 在电视连续剧表中收视率最高的3个是什么？收视率是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视剧的最小和最大份额是多少？", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select min ( tv_series.share )  , max ( tv_series.share ) from tv_series", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视剧的最小和最大份额是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视连续剧的最大和最小份额是多少？", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select max ( tv_series.share )  , min ( tv_series.share ) from tv_series", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视连续剧的最大和最小份额是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视剧的'大宅门'这一集的播出日期是什么时候？", "query": "select air_date from tv_series where episode = '大宅门'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视剧的'大宅门'这一集的播出日期是什么时候？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'大宅门'这一集是什么时候播出的？", "query": "select air_date from tv_series where episode = '大宅门'", "predicted_sql": "select tv_series.air_date from tv_series where tv_series.episode = '大宅门'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '大宅门'这一集是什么时候播出的？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'一生的爱'这一集的每周排名是多少？", "query": "select weekly_rank from tv_series where episode = '大宅门'", "predicted_sql": "select tv_series.weekly_rank from tv_series where tv_series.episode = '一生的爱'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '一生的爱'这一集的每周排名是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "'大宅门'这一集的每周排名是多少？", "query": "select weekly_rank from tv_series where episode = '大宅门'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### '大宅门'这一集的每周排名是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "电视连续剧剧集'大宅门'播出的电视频道是什么？列出这个电视频道的连续剧名称。", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = '大宅门'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 电视连续剧剧集'大宅门'播出的电视频道是什么？列出这个电视频道的连续剧名称。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "包含'大宅门'这一集的电视剧所在的电视频道的连续剧的名字是什么？", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = '大宅门'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 包含'大宅门'这一集的电视剧所在的电视频道的连续剧的名字是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "列出播出电视剧'潜伏'的电视频道所播出的所有电视剧的剧集。", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = '潜伏'", "predicted_sql": "select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = '潜伏'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 列出播出电视剧'潜伏'的电视频道所播出的所有电视剧的剧集。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "播出电视连续剧'潜伏'的电视频道的剧集是什么？", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = '潜伏'", "predicted_sql": "select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = '潜伏'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 播出电视连续剧'潜伏'的电视频道的剧集是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找出每个列出来的导演所导演的卡通作品的数量。", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "select cartoon.directed_by  , count ( cartoon.id ) as cartoon_count from cartoon group by cartoon.directed_by", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找出每个列出来的导演所导演的卡通作品的数量。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "每个导演创作了多少动画片？", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "select cartoon.directed_by  , count ( cartoon.id ) as num_of_cartoons from cartoon group by cartoon.directed_by", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 每个导演创作了多少动画片？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找到最近播出的卡通片的制作代码和频道。", "query": "select production_code , channel from cartoon order by original_air_date asc limit 1", "predicted_sql": "select cartoon.production_code  , tv_channel.id from cartoon join tv_channel on cartoon.channel = tv_channel.id order by cartoon.original_air_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找到最近播出的卡通片的制作代码和频道。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "最新的动画片的制作代码和频道是什么？", "query": "select production_code , channel from cartoon order by original_air_date asc limit 1", "predicted_sql": "select cartoon.production_code  , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 最新的动画片的制作代码和频道是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找到高清晰度电视频道的套餐选择和系列节目名称。", "query": "select package_option , series_name from tv_channel where hight_definition_tv = '确定'", "predicted_sql": "select tv_channel.package_option  , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找到高清晰度电视频道的套餐选择和系列节目名称。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "支持高清电视的电视频道的套餐选项和系列节目名称是什么？", "query": "select package_option , series_name from tv_channel where hight_definition_tv = '确定'", "predicted_sql": "select tv_channel.package_option  , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 支持高清电视的电视频道的套餐选项和系列节目名称是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "哪些国家的电视频道在播放'白英'写的漫画？", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = '白英'", "predicted_sql": "select tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by = '白英'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 哪些国家的电视频道在播放'白英'写的漫画？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "在电视上播放'白英'写的漫画的国家有哪些？", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = '白英'", "predicted_sql": "select tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by = '白英'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 在电视上播放'白英'写的漫画的国家有哪些？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "哪些国家的电视频道没有播放'白英'写的漫画？", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = '白英'", "predicted_sql": "select tv_channel.country from tv_channel left join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by  != '白英' or cartoon.written_by is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 哪些国家的电视频道没有播放'白英'写的漫画？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "没有播放'白英'写的漫画的国家有哪些？", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = '白英'", "predicted_sql": "select tv_channel.country from tv_channel left join cartoon on cartoon.channel = tv_channel.id where cartoon.title  != '白英'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 没有播放'白英'写的漫画的国家有哪些？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找到正在播放由'黄伟明'和'杨洁'执导的卡通片的电视频道的系列名称和国家。", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = '杨洁' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = '黄伟明'", "predicted_sql": "select tv_channel.series_name  , tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by = '黄伟明' and cartoon.directed_by = '杨洁'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找到正在播放由'黄伟明'和'杨洁'执导的卡通片的电视频道的系列名称和国家。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "所有播放由'黄伟明'和'杨洁'导演的卡通片的电视频道的系列名称和国家是什么？", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = '杨洁' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = '黄伟明'", "predicted_sql": "select tv_channel.series_name  , tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by = '黄伟明' and cartoon.directed_by = '杨洁'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 所有播放由'黄伟明'和'杨洁'导演的卡通片的电视频道的系列名称和国家是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找出不使用'英语'的电视频道的像素纵横比和国家。", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != '英语'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.country from tv_channel where tv_channel.language  != '英语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找出不使用'英语'的电视频道的像素纵横比和国家。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "不使用'英语'的所有电视频道的像素宽高比和国家是多少？", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != '英语'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.country from tv_channel where tv_channel.language  != '英语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 不使用'英语'的所有电视频道的像素宽高比和国家是多少？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "有两个以上电视频道的国家的电视频道的ID。", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id from tv_channel group by tv_channel.country having count ( tv_channel.id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 有两个以上电视频道的国家的电视频道的ID。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "拥有超过2个电视频道的所有电视频道的ID是什么？", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id from tv_channel group by tv_channel.id having count ( tv_channel.id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 拥有超过2个电视频道的所有电视频道的ID是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找到没有播放'黄伟明'导演的卡通片的电视频道的ID。", "query": "select id from tv_channel except select channel from cartoon where directed_by = '黄伟明'", "predicted_sql": "select tv_channel.id from cartoon left join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by <> '黄伟明'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找到没有播放'黄伟明'导演的卡通片的电视频道的ID。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "没有播放'黄伟明'导演的卡通片的电视频道id是什么？", "query": "select id from tv_channel except select channel from cartoon where directed_by = '黄伟明'", "predicted_sql": "select tv_channel.id from tv_channel left join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by <> '黄伟明' or cartoon.directed_by is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 没有播放'黄伟明'导演的卡通片的电视频道id是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "找到没有播放'黄伟明'导演的任何卡通片的电视频道的套餐选项。", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = '黄伟明' )", "predicted_sql": "select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = '黄伟明' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 找到没有播放'黄伟明'导演的任何卡通片的电视频道的套餐选项。 \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "目前没有播放'黄伟明'导演的卡通片的所有电视频道的套餐选择是什么？", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = '黄伟明' )", "predicted_sql": "select tv_channel.package_option from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by  != '黄伟明'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 目前没有播放'黄伟明'导演的卡通片的所有电视频道的套餐选择是什么？ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "poker_player", "question": "有多少扑克玩家？", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( * ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 有多少扑克玩家？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "计算扑克玩家的数量。", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( * ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 计算扑克玩家的数量。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按降序排列列出扑克玩家的收入。", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.earnings from poker_player order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按降序排列列出扑克玩家的收入。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按价值降序排序的扑克玩家的收入是什么？", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.earnings from poker_player order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按价值降序排序的扑克玩家的收入是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "列出决赛牌桌和扑克玩家的最佳表现。", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.final_table_made  , poker_player.best_finish from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 列出决赛牌桌和扑克玩家的最佳表现。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "所有扑克玩家的决赛牌桌和最佳表现是什么？", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.final_table_made  , poker_player.best_finish from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 所有扑克玩家的决赛牌桌和最佳表现是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "扑克玩家的平均收入是多少？", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select avg ( poker_player.earnings ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 扑克玩家的平均收入是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回所有扑克玩家的平均收入。", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select avg ( poker_player.earnings ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回所有扑克玩家的平均收入。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "收入最高的扑克玩家的财富级别是多少？", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 收入最高的扑克玩家的财富级别是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回收入最高的玩家的财富级别。", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回收入最高的玩家的财富级别。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "在收入少于200000的扑克玩家中，决赛牌桌的最大数量是多少？", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select max ( final_table_made ) from poker_player where earnings < 200000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 在收入少于200000的扑克玩家中，决赛牌桌的最大数量是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回所有收入低于200000的扑克玩家的决赛牌桌。", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select poker_player.final_table_made from poker_player where poker_player.earnings < 200000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回所有收入低于200000的扑克玩家的决赛牌桌。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "扑克玩家的名字是什么？", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 扑克玩家的名字是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回所有扑克玩家的名字。", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回所有扑克玩家的名字。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "收入在300000以上的扑克玩家的名字是什么？", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 收入在300000以上的扑克玩家的名字是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "给我收入在300000以上的扑克玩家的名字。", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 给我收入在300000以上的扑克玩家的名字。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "列出按升序排列的决赛牌桌的扑克玩家的姓名。", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 列出按升序排列的决赛牌桌的扑克玩家的姓名。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按照所在的决赛牌桌的数量升序排列的扑克玩家的姓名是什么？", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按照所在的决赛牌桌的数量升序排列的扑克玩家的姓名是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "收入最低的扑克玩家的出生日期是什么？", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 收入最低的扑克玩家的出生日期是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回收入最低的扑克玩家的出生日期。", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回收入最低的扑克玩家的出生日期。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "身高最高的扑克玩家的财富等级是多少？", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 身高最高的扑克玩家的财富等级是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回身高最高的扑克玩家的财富等级。", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回身高最高的扑克玩家的财富等级。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "身高在200以上的扑克玩家的平均收入是多少？", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select avg ( poker_player.earnings ) from poker_player join people on poker_player.people_id = people.people_id where people.height > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 身高在200以上的扑克玩家的平均收入是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "给出高于200的扑克玩家的平均收入。", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select avg ( earnings ) from poker_player where earnings > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 给出高于200的扑克玩家的平均收入。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按照收入降序排列的扑克玩家的名字是什么？", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按照收入降序排列的扑克玩家的名字是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回按照收入降序排列的扑克玩家的名字。", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回按照收入降序排列的扑克玩家的名字。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "有哪些不同的民族，来自每个民族的相应人数是多少？", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select people.nationality  , count ( people.people_id ) as count from people group by people.nationality", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 有哪些不同的民族，来自每个民族的相应人数是多少？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "每个民族有多少人？", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select people.nationality  , count ( people.people_id ) as total_people from people group by people.nationality", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 每个民族有多少人？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "最常见的国籍是什么？", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select people.nationality from people group by people.nationality order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 最常见的国籍是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "给我在所有人中最常见的国籍。", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select people.nationality from people group by people.nationality order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 给我在所有人中最常见的国籍。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "至少有两个人共同所属的名族有哪些？", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.nationality from people group by people.nationality having count ( distinct people.people_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 至少有两个人共同所属的名族有哪些？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "返回有两个或更多人所属的国籍。", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.nationality from people group by people.nationality having count ( * ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 返回有两个或更多人所属的国籍。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按姓名的升序列出所有人的姓名和生日。", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from people order by people.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按姓名的升序列出所有人的姓名和生日。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "按照名字的字母顺序排列，所有人的姓名和生日是什么？", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from people order by people.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 按照名字的字母顺序排列，所有人的姓名和生日是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "显示国籍不是'俄罗斯'的人的姓名。", "query": "select name from people where nationality != '俄罗斯'", "predicted_sql": "select people.name from people where people.nationality  != '俄罗斯'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 显示国籍不是'俄罗斯'的人的姓名。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "不是来自'俄罗斯'的人的名字是什么？", "query": "select name from people where nationality != '俄罗斯'", "predicted_sql": "select people.name from people where people.nationality  != '俄罗斯'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 不是来自'俄罗斯'的人的名字是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "列出不是扑克玩家的人的名字。", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 列出不是扑克玩家的人的名字。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "不玩扑克的人的名字是什么？", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 不玩扑克的人的名字是什么？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "有多少个不同的民族？", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select count ( distinct nationality ) from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 有多少个不同的民族？ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "统计不同民族的数量。", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select people.nationality  , count ( * ) as count from people group by people.nationality", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 统计不同民族的数量。 \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "voter_1", "question": "有多少州？", "query": "select count ( * ) from area_code_state", "predicted_sql": "select count ( distinct state ) from area_code_state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 有多少州？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "按参赛者的姓名降序排列，列出参赛选手的编号和姓名。", "query": "select contestant_number , contestant_name from contestants order by contestant_name desc", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants order by contestants.contestant_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 按参赛者的姓名降序排列，列出参赛选手的编号和姓名。 \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "列出投票ID、电话号码和所有投票的州。", "query": "select vote_id , phone_number , state from votes", "predicted_sql": "select votes.vote_id  , votes.phone_number  , votes.state from votes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 列出投票ID、电话号码和所有投票的州。 \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "区域代码的最大值和最小值是多少？", "query": "select max ( area_code ) , min ( area_code ) from area_code_state", "predicted_sql": "select max ( area_code_state.area_code ) as max_area_code  , min ( area_code_state.area_code ) as min_area_code from area_code_state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 区域代码的最大值和最小值是多少？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "'浙江'省最后的投票创建日期是什么时候？", "query": "select max ( created ) from votes where state = '浙江'", "predicted_sql": "select max ( created ) from votes where state = '浙江'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### '浙江'省最后的投票创建日期是什么时候？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "那些名字不是'李红'的参赛者的名字是什么？", "query": "select contestant_name from contestants where contestant_name != '李红'", "predicted_sql": "select contestants.contestant_name from contestants where contestants.contestant_name <> '李红'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 那些名字不是'李红'的参赛者的名字是什么？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "不同的州和投票的开始时间是什么？", "query": "select distinct state , created from votes", "predicted_sql": "select state  , min ( created ) as start_time from votes group by state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 不同的州和投票的开始时间是什么？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "至少有两张选票的参赛者号码和参赛者名字是什么？", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants where contestants.contestant_number in ( select votes.contestant_number from votes group by votes.contestant_number having count ( votes.vote_id ) >= 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 至少有两张选票的参赛者号码和参赛者名字是什么？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "在所有得票的参赛者中，得票最少的参赛者的号码和名字是什么？", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants where contestants.contestant_number = ( select votes.contestant_number from votes group by votes.contestant_number order by count ( votes.contestant_number ) asc limit 1 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 在所有得票的参赛者中，得票最少的参赛者的号码和名字是什么？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "来自'江苏'州或'浙江'州的票数是多少？", "query": "select count ( * ) from votes where state = '江苏' or state = '浙江'", "predicted_sql": "select count ( * ) from votes where state = '江苏' or state = '浙江'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 来自'江苏'州或'浙江'州的票数是多少？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "有多少参赛者没有被投票？", "query": "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )", "predicted_sql": "select count ( contestants.contestant_number ) from contestants left join votes on contestants.contestant_number = votes.contestant_number where votes.contestant_number is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 有多少参赛者没有被投票？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "最多选民投票的区号是多少？", "query": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1", "predicted_sql": "select area_code_state.area_code from area_code_state join votes on votes.state = area_code_state.state group by area_code_state.area_code order by count ( votes.vote_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 最多选民投票的区号是多少？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "名字叫'王伟'的选手的选票创建日期、州和电话号码是什么？", "query": "select votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = '王伟'", "predicted_sql": "select votes.created  , votes.state  , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = '王伟'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 名字叫'王伟'的选手的选票创建日期、州和电话号码是什么？ \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "列出既投票给选手'王伟'又投票给选手'王芳'的选民的地区代码。", "query": "select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = '王伟' intersect select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = '王芳'", "predicted_sql": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = '王伟' and votes.phone_number in ( select votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = '王芳' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 列出既投票给选手'王伟'又投票给选手'王芳'的选民的地区代码。 \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "返回名字中包含子字符串'勇'的参赛者的名字。", "query": "select contestant_name from contestants where contestant_name like '%勇%'", "predicted_sql": "select contestant_name from contestants where contestant_name like '%勇%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### 返回名字中包含子字符串'勇'的参赛者的名字。 \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "world_1", "question": "1950年后所有独立的国家的名字是什么？", "query": "select name from country where indepyear > 1950", "predicted_sql": "select country.name from country where country.indepyear > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 1950年后所有独立的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "说出1950后建立的国家的名字。", "query": "select name from country where indepyear > 1950", "predicted_sql": "select country.name from country where country.indepyear > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 说出1950后建立的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "有多少国家拥有'共和制'政体？", "query": "select count ( * ) from country where governmentform = '共和制'", "predicted_sql": "select count ( * ) from country where governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 有多少国家拥有'共和制'政体？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "有多少国家有'共和制'政府？", "query": "select count ( * ) from country where governmentform = '共和制'", "predicted_sql": "select count ( * ) from country where governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 有多少国家有'共和制'政府？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'加勒比'地区国家的总表面积是多少？", "query": "select sum ( surfacearea ) from country where region = '加勒比'", "predicted_sql": "select sum ( surfacearea ) from country where region = '加勒比'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '加勒比'地区国家的总表面积是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'加勒比'的国家的覆盖面积是多少？", "query": "select sum ( surfacearea ) from country where region = '加勒比'", "predicted_sql": "select country.surfacearea from country where country.continent = '加勒比'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'加勒比'的国家的覆盖面积是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'安圭拉'在哪个洲？", "query": "select continent from country where name = '安圭拉'", "predicted_sql": "select country.continent from country where country.name = '安圭拉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '安圭拉'在哪个洲？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'安圭拉'所在的大陆名称是什么？", "query": "select continent from country where name = '安圭拉'", "predicted_sql": "select country.continent from country where country.name = '安圭拉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '安圭拉'所在的大陆名称是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'温州市'的所在地是哪个地区？", "query": "select region from country join city on country.code = city.countrycode where city.name = '温州市'", "predicted_sql": "select city.district from city where city.name = '温州市'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '温州市'的所在地是哪个地区？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'温州市'在哪个地区？", "query": "select region from country join city on country.code = city.countrycode where city.name = '温州市'", "predicted_sql": "select country.region from city join country on city.countrycode = country.code where city.name = '温州市'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '温州市'在哪个地区？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'阿鲁巴'哪种语言最受欢迎？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿鲁巴' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ABW' order by countrylanguage.percentage desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'阿鲁巴'哪种语言最受欢迎？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'阿鲁巴'主要讲什么语言？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿鲁巴' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = '阿鲁巴'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '阿鲁巴'主要讲什么语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'巴西'的人口和预期寿命是多少？", "query": "select population , lifeexpectancy from country where name = '巴西'", "predicted_sql": "select country.population  , country.lifeexpectancy from country where country.name = '巴西'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '巴西'的人口和预期寿命是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "列举出'巴西'的人口数和预期寿命.", "query": "select population , lifeexpectancy from country where name = '巴西'", "predicted_sql": "select country.population  , country.lifeexpectancy from country where country.name = '巴西'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 列举出'巴西'的人口数和预期寿命. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'安哥拉'的所在区域和人口是多少？", "query": "select population , region from country where name = '安哥拉'", "predicted_sql": "select country.region  , country.population from country where country.name = '安哥拉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '安哥拉'的所在区域和人口是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'安哥拉'属于哪个地区，人口是多少？", "query": "select population , region from country where name = '安哥拉'", "predicted_sql": "select country.region  , country.population from country where country.name = '安哥拉'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '安哥拉'属于哪个地区，人口是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'非洲'中部区域各国的平均预期寿命是多少？", "query": "select avg ( lifeexpectancy ) from country where region = '非洲'", "predicted_sql": "select avg ( country.lifeexpectancy ) from country where country.region = '非洲中部'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '非洲'中部区域各国的平均预期寿命是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'非洲'中部的平均预期寿命是多少？?", "query": "select avg ( lifeexpectancy ) from country where region = '非洲'", "predicted_sql": "select avg ( lifeexpectancy ) from country where continent = '非洲' and region = '中部'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '非洲'中部的平均预期寿命是多少？? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'亚洲'预期寿命最短的国家是什么？", "query": "select name from country where continent = '亚洲' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.continent = '亚洲' order by country.lifeexpectancy asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'亚洲'预期寿命最短的国家是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出最短预期寿命的'亚洲'国家名称。", "query": "select name from country where continent = '亚洲' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.continent = 'Asia' order by country.lifeexpectancy asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出最短预期寿命的'亚洲'国家名称。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'的总人口数和最大GNP是多少？", "query": "select sum ( population ) , max ( gnp ) from country where continent = '亚洲'", "predicted_sql": "select sum ( country.population ) as total_population  , max ( country.gnp ) as max_gnp from country where country.continent = '亚洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'的总人口数和最大GNP是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'有多少人，其中最大的GNP是多少？", "query": "select sum ( population ) , max ( gnp ) from country where continent = '亚洲'", "predicted_sql": "select sum ( country.population ) as total_population  , max ( country.gnp ) as max_gnp from country where country.continent = '亚洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'有多少人，其中最大的GNP是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'非洲''共和制'国家的平均预期寿命是多少？", "query": "select avg ( lifeexpectancy ) from country where continent = '非洲' and governmentform = '共和制'", "predicted_sql": "select avg ( country.lifeexpectancy ) from country where country.continent = '非洲' and country.governmentform = '共和制'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '非洲''共和制'国家的平均预期寿命是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出'非洲''共和制'国家的平均预期寿命", "query": "select avg ( lifeexpectancy ) from country where continent = '非洲' and governmentform = '共和制'", "predicted_sql": "select avg ( country.lifeexpectancy ) from country where country.continent = 'Africa' and country.governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出'非洲''共和制'国家的平均预期寿命 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'和'欧洲'大陆的总表面积是多少？", "query": "select sum ( surfacearea ) from country where continent = '亚洲' or continent = '欧洲'", "predicted_sql": "select sum ( surfacearea ) from country where continent = '亚洲' or continent = '欧洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'和'欧洲'大陆的总表面积是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出'亚洲'或'欧洲'国家覆盖的总表面积。", "query": "select sum ( surfacearea ) from country where continent = '亚洲' or continent = '欧洲'", "predicted_sql": "select sum ( country.surfacearea ) from country where country.continent = '亚洲' or country.continent = '欧洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出'亚洲'或'欧洲'国家覆盖的总表面积。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'西湖'区有多少人居住？", "query": "select sum ( population ) from city where district = '西湖'", "predicted_sql": "select count ( city.population ) from city where city.district = '西湖'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '西湖'区有多少人居住？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'西湖'区的总人口是多少？", "query": "select sum ( population ) from city where district = '西湖'", "predicted_sql": "select sum ( city.population ) from city where city.district = '西湖'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '西湖'区的总人口是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "政府为'美国属地'的国家的平均GNP和总人口是多少？", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = '美国属地'", "predicted_sql": "select avg ( country.gnp ) as average_gnp  , sum ( country.population ) as total_population from country where country.governmentform = 'US Territory'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 政府为'美国属地'的国家的平均GNP和总人口是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出被认为是'美国属地'的国家的平均GNP和总人口。", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = '美国属地'", "predicted_sql": "select avg ( country.gnp ) as average_gnp  , sum ( country.population ) as total_population from country where country.continent = 'North America' and country.region = 'Caribbean'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出被认为是'美国属地'的国家的平均GNP和总人口。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "世界上有多少种不同的语言？", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 世界上有多少种不同的语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "世界上使用的不同语言的数量是多少？", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 世界上使用的不同语言的数量是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'非洲'有多少种类型政府？", "query": "select count ( distinct governmentform ) from country where continent = '非洲'", "predicted_sql": "select count ( distinct governmentform ) from country where continent = '非洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '非洲'有多少种类型政府？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'非洲'有多少种不同形式的政府？", "query": "select count ( distinct governmentform ) from country where continent = '非洲'", "predicted_sql": "select count ( distinct country.governmentform ) from country where country.continent = '非洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '非洲'有多少种不同形式的政府？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'阿鲁巴'使用的语言总数是多少？", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿鲁巴'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'阿鲁巴'使用的语言总数是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'阿鲁巴'说多少种语言？", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿鲁巴'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = '阿鲁巴'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'阿鲁巴'说多少种语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'阿富汗'有多少官方语言？", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿富汗' and isofficial = 'T'", "predicted_sql": "select count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '阿富汗'有多少官方语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'阿富汗'有几种官方语言？", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = '阿富汗' and isofficial = 'T'", "predicted_sql": "select count ( distinct language ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '阿富汗'有几种官方语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "使用语言数量最多的国家的名字是什么？", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select country.name from country where country.code in ( select countrylanguage.countrycode from countrylanguage group by countrylanguage.countrycode order by count ( countrylanguage.language ) desc limit 1 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 使用语言数量最多的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出使用最多语言数量的国家的名字。", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( distinct countrylanguage.language ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出使用最多语言数量的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪一个大陆有最多不同种的语言？", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select country.continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent having count ( distinct countrylanguage.language ) = ( select max ( language_count ) from ( select count ( distinct countrylanguage.language ) as language_count from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪一个大陆有最多不同种的语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪个大陆讲的语言种类最多？", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select country.continent  , count ( distinct countrylanguage.language ) as language_count from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by language_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪个大陆讲的语言种类最多？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "有多少国家既讲'英语'又讲'荷兰语'？", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '荷兰语' )", "predicted_sql": "select count ( distinct countrylanguage.countrycode ) as num_countries from countrylanguage where countrylanguage.language = '英语' and countrylanguage.countrycode in ( select countrycode from countrylanguage where language = '荷兰语' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 有多少国家既讲'英语'又讲'荷兰语'？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "使用'英语'和'荷兰语'的国家的数量是多少？", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '荷兰语' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 使用'英语'和'荷兰语'的国家的数量是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "既说'英语'又说'法语'的国家的名字是什么？", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '法语'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 既说'英语'又说'法语'的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出既说'英语'又说'法语'的国家的名字。", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '法语'", "predicted_sql": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.language = 'French'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出既说'英语'又说'法语'的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'英语'和'法语'都是官方语言的国家的名字是什么？", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '法语' and countrylanguage.isofficial = 'T'", "predicted_sql": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and countrylanguage.isofficial = 'T' and countrylanguage.language = '法语' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '英语'和'法语'都是官方语言的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "以'英语'和'法语'为官方语言的国家名称。", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '法语' and countrylanguage.isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' and ( countrylanguage.language = 'English' or countrylanguage.language = 'French' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 以'英语'和'法语'为官方语言的国家名称。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "讲'汉语'的不同洲的数量是多少？", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '汉语'", "predicted_sql": "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = '汉语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 讲'汉语'的不同洲的数量是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "有多少洲说'汉语'？", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '汉语'", "predicted_sql": "select count ( distinct country.continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '汉语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 有多少洲说'汉语'？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "使用'英语'或'荷兰语'的地区是什么？", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' or countrylanguage.language = '荷兰语'", "predicted_sql": "select city.district from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = '英语' or countrylanguage.language = '荷兰语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 使用'英语'或'荷兰语'的地区是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪个地区讲'荷兰语'或'英语'？", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' or countrylanguage.language = '荷兰语'", "predicted_sql": "select country.region from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = '荷兰语' or countrylanguage.language = '英语'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪个地区讲'荷兰语'或'英语'？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'英语'或'荷兰语'是官方语言的国家是什么？", "query": "select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and isofficial = 'T' union select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '荷兰语' and isofficial = 'T'", "predicted_sql": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and ( countrylanguage.language = '英语' or countrylanguage.language = '荷兰语' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '英语'或'荷兰语'是官方语言的国家是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪些国家以'英语'或'荷兰语'作为官方语言？", "query": "select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and isofficial = 'T' union select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '荷兰语' and isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' and ( countrylanguage.language = '英语' or countrylanguage.language = '荷兰语' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪些国家以'英语'或'荷兰语'作为官方语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'大陆最流行哪种语言？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = '亚洲' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = '亚洲' order by countrylanguage.percentage desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'大陆最流行哪种语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'国家中使用最多的语言是什么？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = '亚洲' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = '亚洲' group by countrylanguage.language order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'国家中使用最多的语言是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "只有一个'共和制'国家讲的语言是哪种语言？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = '共和制' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = '共和制'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 只有一个'共和制'国家讲的语言是哪种语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪一种语言只由一个'共和制'政府的国家使用？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = '共和制' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = '共和制' group by countrylanguage.language having count ( distinct countrylanguage.countrycode ) = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪一种语言只由一个'共和制'政府的国家使用？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "找到使用'英语'的人口最多的城市。", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = '英语' order by city.population desc limit 1", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 找到使用'英语'的人口最多的城市。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "说'英语'的人口最多的城市是什么？", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = '英语' order by city.population desc limit 1", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = '英语' order by city.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 说'英语'的人口最多的城市是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "找出面积最大的'亚洲'国家的名称、人口和预期寿命。", "query": "select name , population , lifeexpectancy from country where continent = '亚洲' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country where country.continent = 'Asia' order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 找出面积最大的'亚洲'国家的名称、人口和预期寿命。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "面积最大的'亚洲'国家的名称、人口和预期寿命是什么？", "query": "select name , population , lifeexpectancy from country where continent = '亚洲' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country where country.continent = '亚洲' order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 面积最大的'亚洲'国家的名称、人口和预期寿命是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'英语'不是官方语言的国家中，平均预期寿命是多少？", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and countrylanguage.isofficial = 'T' )", "predicted_sql": "select avg ( country.lifeexpectancy ) from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'英语'不是官方语言的国家中，平均预期寿命是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出'英语'不'是'官方语言国家的平均预期寿命。", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' and countrylanguage.isofficial = 'T' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出'英语'不'是'官方语言国家的平均预期寿命。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "生活在不使用'英语'的国家的总人数是多少？", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' )", "predicted_sql": "select sum ( country.population ) from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 生活在不使用'英语'的国家的总人数是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "有多少人生活在不讲'英语'的国家？", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = '英语' )", "predicted_sql": "select count ( * ) from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 有多少人生活在不讲'英语'的国家？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "国家元首是'布什'的国家的官方语言是什么？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.headofstate = '布什' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 国家元首是'布什'的国家的官方语言是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "国家元首是'布什'的国家使用的官方语言是什么？", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.headofstate = '布什' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 国家元首是'布什'的国家使用的官方语言是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在1930年前建立的国家中，使用不同的官方语言的总数是多少？", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.indepyear < 1930", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在1930年前建立的国家中，使用不同的官方语言的总数是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "对于1930年以前成立的国家来说，不同官方语言的总数是多少？", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 对于1930年以前成立的国家来说，不同官方语言的总数是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪些国家的表面积比'欧洲'任何国家都大？", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = '欧洲' )", "predicted_sql": "select country.name from country where country.surfacearea > ( select max ( country.surfacearea ) from country where country.continent = 'Europe' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪些国家的表面积比'欧洲'任何国家都大？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "面积比'欧洲'任何一个国家都大的是哪个国家？", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = '欧洲' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 面积比'欧洲'任何一个国家都大的是哪个国家？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪些'非洲'国家的人口比'亚洲'任何国家都少?", "query": "select name from country where continent = '非洲' and population < ( select max ( population ) from country where continent = '亚洲' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' and country.population < ( select max ( country.population ) from country where country.continent = 'Asia' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪些'非洲'国家的人口比'亚洲'任何国家都少? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人口比'亚洲'任何国家都少的'非洲'国家有哪些？", "query": "select name from country where continent = '非洲' and population < ( select min ( population ) from country where continent = '亚洲' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' and country.population < ( select max ( country.population ) from country where country.continent = 'Asia' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人口比'亚洲'任何国家都少的'非洲'国家有哪些？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪些'亚洲'国家的人口比'非洲'任何一个国家都多？", "query": "select name from country where continent = '亚洲' and population > ( select max ( population ) from country where continent = '非洲' )", "predicted_sql": "select country.name from country where country.continent = 'Asia' and country.population > ( select max ( country.population ) from country where country.continent = 'Africa' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪些'亚洲'国家的人口比'非洲'任何一个国家都多？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人口比'非洲'任何一个国家都多的'亚洲'国家有哪些？", "query": "select name from country where continent = '亚洲' and population > ( select min ( population ) from country where continent = '非洲' )", "predicted_sql": "select country.name from country where country.continent = 'Asia' and country.population > ( select max ( country.population ) from country where country.continent = 'Africa' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人口比'非洲'任何一个国家都多的'亚洲'国家有哪些？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "不讲'英语'的国家的国家代码是什么？", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = '英语'", "predicted_sql": "select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 不讲'英语'的国家的国家代码是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回哪些不讲'英语'国家的国家代码。", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = '英语'", "predicted_sql": "select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回哪些不讲'英语'国家的国家代码。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人们使用'英语'以外的语言的国家的国家代码是什么？", "query": "select distinct countrycode from countrylanguage where language != '英语'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人们使用'英语'以外的语言的国家的国家代码是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出那些不使用'英语'语言的国家的国家代码。", "query": "select distinct countrycode from countrylanguage where language != '英语'", "predicted_sql": "select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出那些不使用'英语'语言的国家的国家代码。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "不讲'英语'且政府形式不是'共和制'的国家的国家代码有哪些？", "query": "select code from country where governmentform != '共和制' except select countrycode from countrylanguage where language = '英语'", "predicted_sql": "select country.code from country where country.governmentform  != '共和制' and country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = '英语' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 不讲'英语'且政府形式不是'共和制'的国家的国家代码有哪些？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回那些不讲'英语'且没有'共和制'政府的国家的代码。", "query": "select code from country where governmentform != '共和制' except select countrycode from countrylanguage where language = '英语'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回那些不讲'英语'且没有'共和制'政府的国家的代码。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在'欧洲'国家，哪些城市不是以'英语'为官方语言？", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = '欧洲' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = '英语' )", "predicted_sql": "select city.name from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where country.continent = 'Europe' and countrylanguage.language  != 'English' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在'欧洲'国家，哪些城市不是以'英语'为官方语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "哪些'欧洲'国家的城市不把'英文'为其官方语言？", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = '欧洲' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = '英语' )", "predicted_sql": "select country.name from country where country.continent = 'Europe' and country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 哪些'欧洲'国家的城市不把'英文'为其官方语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "在官方语言是'中文'的'亚洲'国家有哪些不同的城市？", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = '中文' and country.continent = '亚洲'", "predicted_sql": "select city.name from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where countrylanguage.language = '中文' and country.continent = '亚洲' group by city.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 在官方语言是'中文'的'亚洲'国家有哪些不同的城市？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回在'亚洲'，以'中文'为官方语言的城市的不同名称。", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = '中文' and country.continent = '亚洲'", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = '亚洲' and countrylanguage.language = '中文' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回在'亚洲'，以'中文'为官方语言的城市的不同名称。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人口最少的国家的名称、独立年份和表面积是多少？", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select country.name  , country.indepyear  , country.surfacearea from country order by country.population asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人口最少的国家的名称、独立年份和表面积是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出人口最少的国家的名称、独立年份和表面积。", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select country.name  , country.indepyear  , country.surfacearea from country order by country.population asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出人口最少的国家的名称、独立年份和表面积。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "面积最大的国家的人口、名字和领导人是什么？", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select country.population  , country.name  , country.headofstate from country order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 面积最大的国家的人口、名字和领导人是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出面积最大的国家的名称、人口和领导人。", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.headofstate from country order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出面积最大的国家的名称、人口和领导人。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回至少使用3种语言的不同国家名称和语言数量。", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select country.name  , count ( distinct countrylanguage.language ) as language_count from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( distinct countrylanguage.language ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回至少使用3种语言的不同国家名称和语言数量。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "讲2种以上语言的国家的名称是什么，以及它们讲多少种语言？", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select country.name  , count ( distinct countrylanguage.language ) as language_count from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( distinct countrylanguage.language ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 讲2种以上语言的国家的名称是什么，以及它们讲多少种语言？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "找出每个地区其人口大于城市平均人口的城市数量。", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select country.region  , count ( city.id ) as city_count from city join country on city.countrycode = country.code group by country.region having avg ( city.population ) < ( select avg ( population ) from city )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 找出每个地区其人口大于城市平均人口的城市数量。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "每个地区有多少城市的人口高于所有城市的平均人口？", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select country.region  , count ( city.name ) as city_count from city join country on city.countrycode = country.code group by country.region having avg ( city.population ) < ( select avg ( population ) from city )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 每个地区有多少城市的人口高于所有城市的平均人口？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "找出每个平均预期寿命超过72岁的政府形式的名称及其对应的总人口。", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select country.governmentform  , sum ( country.population ) as total_population from country where country.lifeexpectancy > 72 group by country.governmentform", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 找出每个平均预期寿命超过72岁的政府形式的名称及其对应的总人口。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "平均预期寿命大于72岁的政府形式及其总人口是多少？", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select country.governmentform  , sum ( country.population ) as total_population from country where country.lifeexpectancy > 72 group by country.governmentform", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 平均预期寿命大于72岁的政府形式及其总人口是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "找出平均预期寿命短于72岁的每个大洲的平均预期寿命和总人口。", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select country.continent  , avg ( country.lifeexpectancy ) as avg_life_expectancy  , sum ( country.population ) as total_population from country where country.lifeexpectancy < 72 group by country.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 找出平均预期寿命短于72岁的每个大洲的平均预期寿命和总人口。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "对于平均预期寿命小于72的大洲，不同的大洲以及相应的人口总数和平均预期寿命是什么？", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select country.continent  , sum ( country.population ) as total_population  , avg ( country.lifeexpectancy ) as average_life_expectancy from country where country.lifeexpectancy < 72 group by country.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 对于平均预期寿命小于72的大洲，不同的大洲以及相应的人口总数和平均预期寿命是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "世界排名前5大面积的国家的名称和国家地区是什么？", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select country.name  , country.region from country order by country.surfacearea desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 世界排名前5大面积的国家的名称和国家地区是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回最大5个国家的名称和表面积。", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select country.name  , country.surfacearea from country order by country.surfacearea desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回最大5个国家的名称和表面积。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人口前3多的国家的名字是什么？", "query": "select name from country order by population desc limit 3", "predicted_sql": "select country.name from country order by country.population desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人口前3多的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回人口前3多的国家的名字。", "query": "select name from country order by population desc limit 3", "predicted_sql": "select country.name from country order by country.population desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回人口前3多的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "3个最少人口的国家的名字是什么？", "query": "select name from country order by population asc limit 3", "predicted_sql": "select country.name from country order by country.population asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 3个最少人口的国家的名字是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回3个人口最少的国家的名字。", "query": "select name from country order by population asc limit 3", "predicted_sql": "select country.name from country order by country.population asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回3个人口最少的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'亚洲'有多少国家？", "query": "select count ( * ) from country where continent = '亚洲'", "predicted_sql": "select count ( * ) from country where continent = '亚洲'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '亚洲'有多少国家？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "统计'亚洲'国家的数量。", "query": "select count ( * ) from country where continent = '亚洲'", "predicted_sql": "select count ( * ) from country where continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 统计'亚洲'国家的数量。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "'欧洲'大陆有'80000'人口的国家叫什么名字？", "query": "select name from country where continent = '欧洲' and population = '80000'", "predicted_sql": "select country.name from country where country.continent = '欧洲' and country.population = 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### '欧洲'大陆有'80000'人口的国家叫什么名字？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出'欧洲'人口数是'80000'的国家的名字。", "query": "select name from country where continent = '欧洲' and population = '80000'", "predicted_sql": "select country.name from country where country.continent = '欧洲' and country.population = 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出'欧洲'人口数是'80000'的国家的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "面积大于3000的'北美'洲国家的总人口数和平均表面积是多少？", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = '北美' and surfacearea > 3000", "predicted_sql": "select sum ( country.population )  , avg ( country.surfacearea ) from country where country.continent = '北美' and country.surfacearea > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 面积大于3000的'北美'洲国家的总人口数和平均表面积是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出面积大于3000的'北美'洲国家的总人口数和平均表面积。", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = '北美' and surfacearea > 3000", "predicted_sql": "select sum ( country.population ) as total_population  , avg ( country.surfacearea ) as average_surfacearea from country where country.continent = 'North America' and country.surfacearea > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出面积大于3000的'北美'洲国家的总人口数和平均表面积。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "人口在160000到900000之间的城市是什么？", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 人口在160000到900000之间的城市是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回人口在160000到900000之间的城市的名字。", "query": "select name from city where population between 160000 and 90000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回人口在160000到900000之间的城市的名字。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "那个语言被最多的国家使用？", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 那个语言被最多的国家使用？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "给出最多国家使用的语言。", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language having count ( * ) = ( select max ( language_count ) from ( select count ( * ) as language_count from countrylanguage group by countrylanguage.language ) as counts )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 给出最多国家使用的语言。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "每个国家中最大比例的人所讲的语言是什么？", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage group by countrylanguage.countrycode )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 每个国家中最大比例的人所讲的语言是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "不同国家的国家代码是什么？每个国家被最多数人讲的语言是什么？", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select country.code from country group by country.code order by count ( * ) desc limit 1 ;", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 不同国家的国家代码是什么？每个国家被最多数人讲的语言是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "讲'西班牙语'的人口比例最大的国家的总数是多少？", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = '西班牙语' group by countrycode", "predicted_sql": "select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.language = 'Spanish' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 讲'西班牙语'的人口比例最大的国家的总数是多少？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "计算以讲'西班牙语'为主的国家的数目。", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = '西班牙语' group by countrycode", "predicted_sql": "select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 计算以讲'西班牙语'为主的国家的数目。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "讲'西班牙语'的人口比例最大的国家的代码是什么？", "query": "select countrycode , max ( percentage ) from countrylanguage where language = '西班牙语' group by countrycode", "predicted_sql": "select countrylanguage.countrycode from countrylanguage where countrylanguage.language = '西班牙语' order by countrylanguage.percentage desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 讲'西班牙语'的人口比例最大的国家的代码是什么？ \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "返回以'西班牙语'为主的国家的代码。", "query": "select countrycode , max ( percentage ) from countrylanguage where language = '西班牙语' group by countrycode", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 返回以'西班牙语'为主的国家的代码。 \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "orchestra", "question": "那里有多少个指挥家？", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( conductor.conductor_id ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 那里有多少个指挥家？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "计算指挥家的数量。", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( conductor_id ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 计算指挥家的数量。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "列出按年限升序排列的指挥家的名字。", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 列出按年限升序排列的指挥家的名字。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "按年龄顺序排列的指挥家名字是什么？", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor order by conductor.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 按年龄顺序排列的指挥家名字是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "国籍不是'美国'的指挥家的名字是什么？", "query": "select name from conductor where nationality != '美国'", "predicted_sql": "select conductor.name from conductor where conductor.nationality  != '美国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 国籍不是'美国'的指挥家的名字是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "返回不是'美国'国籍的指挥人员的姓名。", "query": "select name from conductor where nationality != '美国'", "predicted_sql": "select conductor.name from conductor where conductor.nationality <> '美国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 返回不是'美国'国籍的指挥人员的姓名。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "按创立年份的降序排列的管弦乐队唱片公司是哪些？", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select orchestra.record_company from orchestra order by orchestra.year_of_founded desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 按创立年份的降序排列的管弦乐队唱片公司是哪些？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "返回按创立年份降序排列的乐团唱片公司的名称。", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select orchestra.record_company from orchestra order by orchestra.year_of_founded desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 返回按创立年份降序排列的乐团唱片公司的名称。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "表演的平均出席率是多少？", "query": "select avg ( attendance ) from show", "predicted_sql": "select avg ( attendance ) from show", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 表演的平均出席率是多少？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "返回所有表演的平均出席率。", "query": "select avg ( attendance ) from show", "predicted_sql": "select avg ( attendance ) from show", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 返回所有表演的平均出席率。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "不是'决赛直播'类型的最大和最小份额的表现类型是什么。", "query": "select max ( share ) , min ( share ) from performance where type != '决赛直播'", "predicted_sql": "select performance.type from performance join show on performance.performance_id = show.performance_id where show.result  != '决赛直播' group by performance.type having max ( performance.share ) and min ( performance.share )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 不是'决赛直播'类型的最大和最小份额的表现类型是什么。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "返回不是'决赛直播'类型的表演的最大和最小份额。", "query": "select max ( share ) , min ( share ) from performance where type != '决赛直播'", "predicted_sql": "select max ( performance.share )  , min ( performance.share ) from performance where performance.type  != '决赛直播'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 返回不是'决赛直播'类型的表演的最大和最小份额。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "指挥家有多少个不同的国籍？", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select count ( distinct conductor.nationality ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 指挥家有多少个不同的国籍？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "统计指挥家不同的国籍数量。", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select count ( distinct conductor.nationality ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 统计指挥家不同的国籍数量。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "按照工作年限的降序顺序列出指挥家的名字。", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 按照工作年限的降序顺序列出指挥家的名字。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "按工作年限降序排列的指挥家的名字是什么？", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 按工作年限降序排列的指挥家的名字是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "列出工作年限最长的指挥家的姓名。", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 列出工作年限最长的指挥家的姓名。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "那位工作时间最长的指挥家叫什么名字？", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 那位工作时间最长的指挥家叫什么名字？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "显示指挥家的名字和他们指挥的管弦乐队的名字。", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 显示指挥家的名字和他们指挥的管弦乐队的名字。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "指挥家的名字以及他们指挥的管弦乐队叫什么？", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 指挥家的名字以及他们指挥的管弦乐队叫什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "显示指挥过超过一支管弦乐队的指挥家的名字。", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor where conductor.conductor_id in ( select conductor_id from orchestra group by conductor_id having count ( distinct orchestra_id ) > 1 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 显示指挥过超过一支管弦乐队的指挥家的名字。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "指挥过超过一个管弦乐队的指挥家的名字是什么？", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor where conductor.conductor_id in ( select conductor_id from orchestra group by conductor_id having count ( distinct orchestra_id ) > 1 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 指挥过超过一个管弦乐队的指挥家的名字是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "显示指挥过最多的管弦乐队的指挥家的名字。", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 显示指挥过最多的管弦乐队的指挥家的名字。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "指挥过最多的管弦乐队的指挥家叫什么名字？", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 指挥过最多的管弦乐队的指挥家叫什么名字？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "请显示指挥过2008年后成立的管弦乐队的指挥家姓名。", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 请显示指挥过2008年后成立的管弦乐队的指挥家姓名。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "指挥过2008年后成立的管弦乐队的指挥家叫什么名字？", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 指挥过2008年后成立的管弦乐队的指挥家叫什么名字？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "请显示不同唱片公司及相应管弦乐队的数量。", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select orchestra.record_company  , count ( distinct orchestra.orchestra_id ) as orchestra_count from orchestra group by orchestra.record_company", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 请显示不同唱片公司及相应管弦乐队的数量。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "每家唱片公司管理多少支管弦乐队？", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select record_company  , count ( distinct orchestra_id ) as num_of_orchestras from orchestra group by record_company", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 每家唱片公司管理多少支管弦乐队？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "请以数量升序显示管弦乐队的唱片格式。", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select orchestra.major_record_format from orchestra order by orchestra.major_record_format asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 请以数量升序显示管弦乐队的唱片格式。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "按频率排列的管弦乐队的主要唱片格式是什么？", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select orchestra.major_record_format from orchestra order by orchestra.orchestra_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 按频率排列的管弦乐队的主要唱片格式是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "列出被最多数量的管弦乐队共享的唱片公司。", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select orchestra.record_company from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by orchestra.record_company having count ( distinct orchestra.orchestra_id ) = ( select max ( count ) from ( select count ( distinct orchestra.orchestra_id ) as count from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by orchestra.record_company ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 列出被最多数量的管弦乐队共享的唱片公司。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "管弦乐队使用最多的唱片公司是什么？", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select orchestra.record_company from orchestra group by orchestra.record_company order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 管弦乐队使用最多的唱片公司是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "列出没有演出过的管弦乐队的名称。", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id from performance )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 列出没有演出过的管弦乐队的名称。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "没有演出的管弦乐队是什么？", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.orchestra_id not in ( select orchestra_id from performance )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 没有演出的管弦乐队是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "显示2003年前和2003年后成立的管弦乐队所共享的唱片公司。", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.record_company in ( select orchestra.record_company from orchestra where orchestra.year_of_founded >= 2003 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 显示2003年前和2003年后成立的管弦乐队所共享的唱片公司。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "2003年之前成立的和2003年以后成立的乐团都使用的唱片公司有哪些？", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.record_company in ( select orchestra.record_company from orchestra where orchestra.year_of_founded >= 2003 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 2003年之前成立的和2003年以后成立的乐团都使用的唱片公司有哪些？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "找到记录格式为'CD'或'DVD'的管弦乐队的数量。", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format ( CD , DVD ) | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 找到记录格式为'CD'或'DVD'的管弦乐队的数量。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "计算以'CD'或'DVD'作为记录格式的管弦乐队的数量。", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select count ( distinct orchestra.orchestra_id ) from orchestra where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format ( CD , DVD ) | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 计算以'CD'或'DVD'作为记录格式的管弦乐队的数量。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "显示不止一次演出的管弦乐队成立的年份。", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by orchestra.orchestra_id having count ( distinct performance.performance_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 显示不止一次演出的管弦乐队成立的年份。 \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "拥有超过一次演出经历的管弦乐队的创立年份是什么？", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by orchestra.orchestra_id having count ( performance.performance_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 拥有超过一次演出经历的管弦乐队的创立年份是什么？ \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "network_1", "question": "有多少高中生？", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有多少高中生？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "统计高中生的人数。", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 统计高中生的人数。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示每个高中学生的姓名和年级。", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示每个高中学生的姓名和年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "每个高中生的名字和年级是什么？", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 每个高中生的名字和年级是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示所有高中生的年级。", "query": "select grade from highschooler", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示所有高中生的年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "每个高中生的年级是多少？", "query": "select grade from highschooler", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 每个高中生的年级是多少？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "'小军'在几年级？", "query": "select grade from highschooler where name = '小军'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### '小军'在几年级？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "返回高中生'小军'的年级。", "query": "select grade from highschooler where name = '小军'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 返回高中生'小军'的年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示10年级所有高中生的名字。", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示10年级所有高中生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "10年级所有高中生的名字是什么？", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 10年级所有高中生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示名字叫'小军'的高中学生的ID。", "query": "select id from highschooler where name = '小军'", "predicted_sql": "select highschooler.id from highschooler where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示名字叫'小军'的高中学生的ID。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "'小军'的id是什么？", "query": "select id from highschooler where name = '小军'", "predicted_sql": "select highschooler.id from highschooler where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### '小军'的id是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "9年级或10年级有多少高中生？", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( * ) from highschooler where grade = 9 or grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 9年级或10年级有多少高中生？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "计算9年级或10年级的高中生人数。", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( * ) from highschooler where grade = 9 or grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 计算9年级或10年级的高中生人数。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示每个年级的高中生人数。", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select grade  , count ( * ) as count from highschooler group by grade", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示每个年级的高中生人数。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "每个年级有多少高中生？", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select grade  , count ( * ) as count from highschooler group by grade", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 每个年级有多少高中生？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "哪个年级的学生最多？", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select grade  , count ( * ) as count from highschooler group by grade order by count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 哪个年级的学生最多？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "返回高中人数最多的年级。", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 返回高中人数最多的年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示所有至少有4名学生的年级。", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select grade from highschooler group by grade having count ( * ) >= 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示所有至少有4名学生的年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "哪一个年级有4个或更多的高中生？", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select grade from highschooler group by grade having count ( * ) >= 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 哪一个年级有4个或更多的高中生？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示学生ID和其对应的朋友数量。", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select highschooler.id  , count ( friend.friend_id ) as friend_count from highschooler left join friend on friend.student_id = highschooler.id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示学生ID和其对应的朋友数量。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "每个学生有多少个朋友？", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select highschooler.id  , count ( friend.friend_id ) as num_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 每个学生有多少个朋友？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示高中生的名字和他们相应的朋友数量。", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as friend_count from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示高中生的名字和他们相应的朋友数量。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "高中生的名字是什么，每个人有多少朋友？", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as num_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 高中生的名字是什么，每个人有多少朋友？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "拥有最多人数朋友的高中生的名字是什么？", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.id order by count ( friend.friend_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 拥有最多人数朋友的高中生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "返回有最多朋友数量的高中生的名字。", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.id order by count ( friend.friend_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 返回有最多朋友数量的高中生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示至少有3个朋友的高中生的名字。", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示至少有3个朋友的高中生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有3个或更多朋友的高中生的名字是什么？", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有3个或更多朋友的高中生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示高中学生'小军'的所有朋友的名字。", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示高中学生'小军'的所有朋友的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "返回名字是'小军'高中学生的朋友的名字。", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 返回名字是'小军'高中学生的朋友的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "高中生'小军'有多少个朋友？", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "select count ( friend.friend_id ) from highschooler join friend on friend.student_id = highschooler.id where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 高中生'小军'有多少个朋友？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "统计下'小军'的朋友数。", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "select count ( friend.friend_id ) from highschooler join friend on friend.student_id = highschooler.id where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 统计下'小军'的朋友数。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示所有没有朋友的学生的id。", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.id from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示所有没有朋友的学生的id。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "没有朋友的高中生的id是什么？", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.id from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 没有朋友的高中生的id是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示所有没有任何朋友的高中生的名字。", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示所有没有任何朋友的高中生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "没有朋友的学生的名字是什么？", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 没有朋友的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "展示一下那些有朋友而且被别人喜欢的高中生的id。", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.id from highschooler join friend on friend.friend_id = highschooler.id join likes on likes.liked_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 展示一下那些有朋友而且被别人喜欢的高中生的id。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "既有朋友又被人喜欢的学生的id是什么？", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.id from highschooler join friend on friend.student_id = highschooler.id join likes on likes.student_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 既有朋友又被人喜欢的学生的id是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示所有有朋友和被别人喜欢的学生的名字。", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.id in ( select friend.student_id from friend ) and highschooler.id in ( select likes.student_id from likes )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示所有有朋友和被别人喜欢的学生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "那些既有朋友又有人喜欢的高中生的名字是什么？", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id join likes on likes.student_id = highschooler.id where highschooler.id in ( select friend_id from friend where student_id = highschooler.id ) and highschooler.id in ( select liked_id from likes where student_id = highschooler.id )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 那些既有朋友又有人喜欢的高中生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "针对每个学生ID，统计其对应的喜欢数量。", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select likes.student_id  , count ( likes.liked_id ) as num_likes from likes group by likes.student_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 针对每个学生ID，统计其对应的喜欢数量。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有每个学生id对应的喜欢数有多少？", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select highschooler.id  , count ( likes.liked_id ) as num_likes from highschooler left join likes on highschooler.id = likes.student_id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有每个学生id对应的喜欢数有多少？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示有喜欢的高中学生的名字，以及每个人喜欢的数量。", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name  , count ( likes.liked_id ) as num_likes from highschooler join likes on likes.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示有喜欢的高中学生的名字，以及每个人喜欢的数量。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有喜欢的高中生叫什么名字？每人有多少喜欢的？", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name  , count ( likes.liked_id ) as num_likes from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有喜欢的高中生叫什么名字？每人有多少喜欢的？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有最多喜欢数的高中生叫什么名字？", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name order by count ( likes.liked_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有最多喜欢数的高中生叫什么名字？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "给出有最多喜欢数的学生的名字。", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name order by count ( likes.liked_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 给出有最多喜欢数的学生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示至少有2个喜欢的学生的名字。", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name having count ( likes.liked_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示至少有2个喜欢的学生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有2个或更多喜欢的学生的名字是什么？", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name having count ( likes.liked_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有2个或更多喜欢的学生的名字是什么？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "显示年级高于5级且至少有2个朋友的学生的名字。", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id where highschooler.grade > 5 group by highschooler.name having count ( friend.friend_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 显示年级高于5级且至少有2个朋友的学生的名字。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "那些年级在5岁以上且有2个或更多朋友的高中生叫什么名字？", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade > 5 and highschooler.id in ( select friend.student_id from friend group by friend.student_id having count ( friend.friend_id ) >= 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 那些年级在5岁以上且有2个或更多朋友的高中生叫什么名字？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "'小军'有多少喜欢？", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "select count ( * ) from highschooler join likes on highschooler.id = likes.student_id where highschooler.name = '小军'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### '小军'有多少喜欢？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "返回高中生'小军'的喜欢数。", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = '小军'", "predicted_sql": "select count ( * ) from likes where student_id = ( select id from highschooler where name = '小军' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 返回高中生'小军'的喜欢数。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "找出所有有朋友的学生的平均年级。", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 找出所有有朋友的学生的平均年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "有朋友的学生的平均年级是多少？", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 有朋友的学生的平均年级是多少？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "找出没有朋友的学生的最低年级。", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select min ( highschooler.grade ) from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 找出没有朋友的学生的最低年级。 \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "没有任何朋友的最低年级学生是谁？", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 没有任何朋友的最低年级学生是谁？ \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "dog_kennels", "question": "哪些州既有主人又有专家居住？", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select owners.state from owners join professionals on owners.state = professionals.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些州既有主人又有专家居住？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出既有主人又有专家居住的州。", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select owners.state from owners inner join professionals on owners.state = professionals.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出既有主人又有专家居住的州。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "经过治疗的狗的平均年龄是多少？", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 经过治疗的狗的平均年龄是多少？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出经过治疗的狗的平均年龄。", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出经过治疗的狗的平均年龄。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家住在印第安纳州，或者已经做过两次以上的治疗？列出他或她的ID、姓和手机。", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select professionals.professional_id  , professionals.last_name  , professionals.cell_number from professionals where professionals.state = 'Indiana' or professionals.professional_id in ( select professional_id from treatments group by professional_id having count ( * ) >= 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家住在印第安纳州，或者已经做过两次以上的治疗？列出他或她的ID、姓和手机。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出居住在印第安纳州且曾做过两次以上治疗的专家的ID、姓氏和手机。", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select professionals.professional_id  , professionals.last_name  , professionals.cell_number from professionals join treatments on treatments.professional_id = professionals.professional_id where professionals.state = 'Indiana' group by professionals.professional_id having count ( treatments.treatment_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出居住在印第安纳州且曾做过两次以上治疗的专家的ID、姓氏和手机。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些狗没有花费他们的主人超过1000元的治疗费？列出狗的名字。", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs where dogs.dog_id not in ( select treatments.dog_id from treatments where treatments.cost_of_treatment > 1000 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些狗没有花费他们的主人超过1000元的治疗费？列出狗的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "主人花了1000元以上来治疗的狗的名字是什么？", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 主人花了1000元以上来治疗的狗的名字是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些名字可用于专家或主人，但不用作狗的名字？", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select owners.first_name  , owners.last_name  , professionals.first_name  , professionals.last_name from owners left join dogs on owners.owner_id = dogs.owner_id left join professionals on owners.owner_id = professionals.professional_id where dogs.name is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些名字可用于专家或主人，但不用作狗的名字？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出专业人士或主人使用的名字，但不用作狗名的名字。", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select owners.first_name  , owners.last_name  , professionals.first_name  , professionals.last_name from owners left join dogs on owners.owner_id = dogs.owner_id left join professionals on owners.owner_id = professionals.professional_id where dogs.name is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出专业人士或主人使用的名字，但不用作狗名的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家没有对狗进行任何治疗？列出专业人员的id、角色和电子邮件。", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.email_address from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家没有对狗进行任何治疗？列出专业人员的id、角色和电子邮件。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "请告诉我没有对狗进行任何治疗的专家的id、角色和电子邮件。", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.email_address from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 请告诉我没有对狗进行任何治疗的专家的id、角色和电子邮件。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "那个主人拥有最多的狗？列出主人的ID、名字和姓氏。", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id group by owners.owner_id order by count ( dogs.dog_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 那个主人拥有最多的狗？列出主人的ID、名字和姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "返回拥有最多狗的主人的ID、名字和姓氏。", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id group by owners.owner_id order by count ( dogs.dog_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 返回拥有最多狗的主人的ID、名字和姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家至少做过两次治疗？列出专业人员的ID、角色和名字。", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.first_name from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count ( treatments.treatment_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家至少做过两次治疗？列出专业人员的ID、角色和名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "进行过两次或更多次治疗的专家的ID、角色和名字是什么？", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.first_name from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count ( treatments.treatment_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 进行过两次或更多次治疗的专家的ID、角色和名字是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "被养最多数量狗的品种名称叫什么？", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( dogs.dog_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 被养最多数量狗的品种名称叫什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "被喂养最多数量的狗都有哪些品种？给我这个品种的名字。", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds join dogs on dogs.breed_code = breeds.breed_code group by breeds.breed_name order by count ( dogs.dog_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 被喂养最多数量的狗都有哪些品种？给我这个品种的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪一位主人为他或她的狗支付了最多的治疗费？列出主人的ID和姓氏。", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪一位主人为他或她的狗支付了最多的治疗费？列出主人的ID和姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "告诉我花在他或她的狗身上最多治疗费的主人的ID和姓氏。", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 告诉我花在他或她的狗身上最多治疗费的主人的ID和姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "总花费最少的治疗类型的描述是什么？", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_description order by sum ( treatments.cost_of_treatment ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 总花费最少的治疗类型的描述是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "请给我描述一下总花费最低的治疗类型。", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_description order by sum ( treatments.cost_of_treatment ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 请给我描述一下总花费最低的治疗类型。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪一个主人为他们的狗支付了最多的钱？显示主人的ID和邮政编码。", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.zip_code from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id join professionals on treatments.professional_id = professionals.professional_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪一个主人为他们的狗支付了最多的钱？显示主人的ID和邮政编码。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出总计为他或她的狗花了最多钱的主人的ID和邮政编码。", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.zip_code from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id join charges on charges.charge_id = treatments.treatment_type_code group by owners.owner_id order by sum ( charges.charge_amount ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出总计为他或她的狗花了最多钱的主人的ID和邮政编码。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家至少做过两种治疗？列出他们的专业ID和手机号码。", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select professionals.professional_id  , professionals.cell_number from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count ( distinct treatments.treatment_type_code ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家至少做过两种治疗？列出他们的专业ID和手机号码。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出做过两种或更多种治疗的专业人员的ID和手机号码。", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select professionals.professional_id  , professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count ( distinct treatments.treatment_type_code ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出做过两种或更多种治疗的专业人员的ID和手机号码。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "治疗费用低于平均的专家的名字和姓氏是什么？", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select professionals.first_name  , professionals.last_name from professionals join treatments on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 治疗费用低于平均的专家的名字和姓氏是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家的治疗费用低于平均水平？给出名字和姓氏。", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select professionals.first_name  , professionals.last_name from professionals join treatments on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家的治疗费用低于平均水平？给出名字和姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出每个治疗的日期，以及操作它的专业人员的名字。", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select treatments.date_of_treatment  , professionals.first_name  , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出每个治疗的日期，以及操作它的专业人员的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每次治疗的日期和操作专业人员的名字是什么？", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select treatments.date_of_treatment  , professionals.first_name || ' ' || professionals.last_name as professional_name from treatments inner join professionals on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每次治疗的日期和操作专业人员的名字是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出每种治疗的费用和相应的治疗类型描述。", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select treatments.cost_of_treatment  , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出每种治疗的费用和相应的治疗类型描述。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个治疗的费用和治疗类型描述是什么？", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select charges.charge_amount  , treatment_types.treatment_type_description from charges join treatments on charges.charge_id = treatments.treatment_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个治疗的费用和治疗类型描述是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出每个主人的名字、姓氏和他的狗的大小。", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , sizes.size_description from owners join dogs on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出每个主人的名字、姓氏和他的狗的大小。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个主人的名字、姓氏和他们的狗的大小是什么？", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , sizes.size_description from owners join dogs on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个主人的名字、姓氏和他们的狗的大小是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出主人的名字和狗的名字对。", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出主人的名字和狗的名字对。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个主人的名字和他们的狗的名字是什么？", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个主人的名字和他们的狗的名字是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出最稀有品种的狗的名字和它们的治疗日期。", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select dogs.name  , treatments.date_of_treatment from dogs join treatments on treatments.dog_id = dogs.dog_id join breeds on dogs.breed_code = breeds.breed_code group by breeds.breed_name having count ( * ) = 1 order by treatments.date_of_treatment asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出最稀有品种的狗的名字和它们的治疗日期。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪种狗最稀有？显示他们的名字和治疗日期。", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select dogs.name  , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id group by dogs.breed_code having count ( * ) = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪种狗最稀有？显示他们的名字和治疗日期。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些狗是在'山西'的人拥有的？列出主人的名字和狗的名字。", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = '山西'", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where owners.state = '山西'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些狗是在'山西'的人拥有的？列出主人的名字和狗的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出居住在'山西'的主人的名字和他们拥有的狗的名字。", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = '山西'", "predicted_sql": "select owners.first_name  , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = '山西'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出居住在'山西'的主人的名字和他们拥有的狗的名字。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "接受治疗的狗的住院日期和出院日期是什么？", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs join treatments on treatments.dog_id = dogs.dog_id where dogs.date_departed is not null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 接受治疗的狗的住院日期和出院日期是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出接受治疗的狗的住院日期和出院日期。", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs inner join treatments on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出接受治疗的狗的住院日期和出院日期。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出拥有年纪最小的狗的主人的姓氏。", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id where dogs.age = ( select min ( age ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出拥有年纪最小的狗的主人的姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "谁拥有年纪最小的狗？给我他或她的姓氏。", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id where dogs.age = ( select min ( age ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 谁拥有年纪最小的狗？给我他或她的姓氏。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出居住在'台湾'省或'福建'省的专家的电子邮件。", "query": "select email_address from professionals where state = '台湾' or state = '福建'", "predicted_sql": "select professionals.email_address from professionals where professionals.state = '台湾' or professionals.state = '福建'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出居住在'台湾'省或'福建'省的专家的电子邮件。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "居住在'台湾'省或'福建'省的专家的电子邮件是什么？", "query": "select email_address from professionals where state = '台湾' or state = '福建'", "predicted_sql": "select professionals.email_address from professionals where professionals.state = '台湾' or professionals.state = '福建'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 居住在'台湾'省或'福建'省的专家的电子邮件是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "所有狗的住院日期和出院日期是什么？", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 所有狗的住院日期和出院日期是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出所有狗的住院日期和出院日期。", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出所有狗的住院日期和出院日期。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少狗经过治疗？", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select count ( distinct dogs.dog_id ) as total_dogs_treated from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少狗经过治疗？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "计算经过治疗的狗的数量。", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select count ( distinct dogs.dog_id ) from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 计算经过治疗的狗的数量。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少专家对狗进行过治疗？", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select count ( distinct professionals.professional_id ) as num_of_professionals from professionals join treatments on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少专家对狗进行过治疗？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出曾经治疗过狗的专业人员的数量。", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select count ( distinct professionals.professional_id ) from professionals join treatments on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出曾经治疗过狗的专业人员的数量。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些专家居住在一个包含'西'字的城市？列出他或她的角色，街道，城市和州。", "query": "select role_code , street , city , state from professionals where city like '%西%'", "predicted_sql": "select professionals.role_code  , professionals.street  , professionals.city  , professionals.state from professionals where professionals.city like '%西%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些专家居住在一个包含'西'字的城市？列出他或她的角色，街道，城市和州。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出居住在包含子字符串'西'的城市的专家的角色，街道，城市和州。", "query": "select role_code , street , city , state from professionals where city like '%西%'", "predicted_sql": "select professionals.role_code  , professionals.street  , professionals.city  , professionals.state from professionals where professionals.city like '%西%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出居住在包含子字符串'西'的城市的专家的角色，街道，城市和州。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "哪些主人居住在名称中包含子字符串'北'的州？列出他的名字、姓氏和电子邮件。", "query": "select first_name , last_name , email_address from owners where state like '%北%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.state like '%北%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 哪些主人居住在名称中包含子字符串'北'的州？列出他的名字、姓氏和电子邮件。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "返回居住在名称包含子字符串'北'的州的所有者的姓氏、姓氏和电子邮件。", "query": "select first_name , last_name , email_address from owners where state like '%北%'", "predicted_sql": "select owners.last_name  , owners.first_name  , owners.email_address from owners where owners.state like '%北%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 返回居住在名称包含子字符串'北'的州的所有者的姓氏、姓氏和电子邮件。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少狗的年龄低于平均年龄？", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少狗的年龄低于平均年龄？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "计算年龄低于平均的狗的数量。", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 计算年龄低于平均的狗的数量。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "最近的治疗费用是多少？", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select treatments.cost_of_treatment from treatments order by treatments.date_of_treatment desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 最近的治疗费用是多少？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "给我看看最近执行的治疗费用。", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select treatments.date_of_treatment  , treatments.cost_of_treatment from treatments order by treatments.date_of_treatment desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 给我看看最近执行的治疗费用。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少狗没有经过任何治疗？", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select count ( dog_id ) from dogs where dog_id not in ( select dog_id from treatments )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少狗没有经过任何治疗？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "告诉我接受治疗的狗的数量。", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select count ( distinct dogs.dog_id ) from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 告诉我接受治疗的狗的数量。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少主人暂时没有狗？", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少主人暂时没有狗？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找到在现在不拥有任何狗的主人。", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners where owners.owner_id not in ( select owner_id from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找到在现在不拥有任何狗的主人。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "有多少专家没有对狗进行任何治疗？", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select count ( professionals.professional_id ) from professionals left join treatments on professionals.professional_id = treatments.professional_id where treatments.treatment_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 有多少专家没有对狗进行任何治疗？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出没有治疗过狗的专家的数量。", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select count ( distinct professionals.professional_id ) from professionals left join treatments on professionals.professional_id = treatments.professional_id where treatments.treatment_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出没有治疗过狗的专家的数量。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出被遗弃的狗的名字、年龄和体重。1代表是，0代表不。", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "select dogs.name  , dogs.age  , dogs.weight from dogs where dogs.abandoned_yn = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出被遗弃的狗的名字、年龄和体重。1代表是，0代表不。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "被遗弃的狗的名字、年龄和体重是多少？注意在表中1表示是，0表示不。", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "select dogs.name  , dogs.age  , dogs.weight from dogs where dogs.abandoned_yn = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 被遗弃的狗的名字、年龄和体重是多少？注意在表中1表示是，0表示不。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "所有狗的平均年龄是多少？", "query": "select avg ( age ) from dogs", "predicted_sql": "select avg ( age ) from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 所有狗的平均年龄是多少？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "计算所有狗的平均年龄。", "query": "select avg ( age ) from dogs", "predicted_sql": "select avg ( age ) from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 计算所有狗的平均年龄。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "最老的狗的年龄是多少？", "query": "select max ( age ) from dogs", "predicted_sql": "select min ( age ) as oldest_age from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 最老的狗的年龄是多少？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "告诉我最老的狗的年龄。", "query": "select max ( age ) from dogs", "predicted_sql": "select max ( age ) from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 告诉我最老的狗的年龄。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个收费类型要多少钱？列出费用类型及其金额。", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charges.charge_type  , charges.charge_amount from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个收费类型要多少钱？列出费用类型及其金额。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出每个费用类型及其金额。", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charges.charge_type  , charges.charge_amount from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出每个费用类型及其金额。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "最贵的收费类型要多少钱？", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select max ( charge_amount ) from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 最贵的收费类型要多少钱？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "最贵的收费类型的金额是多少？", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select max ( charge_amount ) from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 最贵的收费类型的金额是多少？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出所有专家的电子邮件、手机号码和家庭电话。", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select professionals.email_address  , professionals.home_phone  , professionals.cell_number from professionals", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出所有专家的电子邮件、手机号码和家庭电话。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个专家的电子邮件、手机号码和家庭电话是什么？", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select professionals.email_address  , professionals.home_phone  , professionals.cell_number from professionals", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个专家的电子邮件、手机号码和家庭电话是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "所有品种类型和大小的组合是什么？", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_name  , sizes.size_description from breeds  , sizes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 所有品种类型和大小的组合是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "找出不同的狗品种类型和体型的组合。", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_name  , sizes.size_description from breeds  , sizes  , dogs where dogs.breed_code = breeds.breed_code and dogs.size_code = sizes.size_code group by breeds.breed_name  , sizes.size_description", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 找出不同的狗品种类型和体型的组合。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "列出所有专家的名字以及他们已经做治疗的描述。", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select professionals.first_name  , professionals.last_name  , treatment_types.treatment_type_description from professionals join treatments on treatments.professional_id = professionals.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 列出所有专家的名字以及他们已经做治疗的描述。 \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "每个专家的名字和所实施的治疗的描述是什么？", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select professionals.first_name  , professionals.last_name  , treatment_types.treatment_type_description from professionals join treatments on treatments.professional_id = professionals.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### 每个专家的名字和所实施的治疗的描述是什么？ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "singer", "question": "有多少歌手？", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 有多少歌手？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "歌手的总数是多少？", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 歌手的总数是多少？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "按净资产升序排列歌手姓名。", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 按净资产升序排列歌手姓名。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "按净资产升序排序的歌手的名字是什么？", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 按净资产升序排序的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "歌手的出生年份和国籍是什么？", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.birth_year  , singer.citizenship from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 歌手的出生年份和国籍是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "歌手的出生年份和国籍是什么？", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.birth_year  , singer.citizenship from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 歌手的出生年份和国籍是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "列出国籍不是'巴黎'的歌手的名字。", "query": "select name from singer where citizenship != '巴黎'", "predicted_sql": "select singer.name from singer where singer.citizenship  != '巴黎'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 列出国籍不是'巴黎'的歌手的名字。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "那些不是'法国'公民的歌手的名字是什么？", "query": "select name from singer where citizenship != '法国'", "predicted_sql": "select singer.name from singer where singer.citizenship  != '法国'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 那些不是'法国'公民的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示出生年份是1948年或1949年的歌手的名字", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示出生年份是1948年或1949年的歌手的名字 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "1948年或1949年出生的歌手的名字是什么？", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 1948年或1949年出生的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "拥有最大净资产的歌手叫什么名字？", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 拥有最大净资产的歌手叫什么名字？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "最富裕的歌手叫什么名字？", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 最富裕的歌手叫什么名字？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示歌手的不同国籍和每个国籍的歌手人数。", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select singer.citizenship  , count ( singer.singer_id ) as singer_count from singer group by singer.citizenship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示歌手的不同国籍和每个国籍的歌手人数。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "对于每一个国籍，有多少歌手来自那个国家？", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select singer.citizenship  , count ( singer.singer_id ) as num_of_singers from singer group by singer.citizenship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 对于每一个国籍，有多少歌手来自那个国家？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "请显示歌手最常见的国籍。", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.citizenship from singer group by singer.citizenship order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 请显示歌手最常见的国籍。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "歌手最常见的国籍是什么？", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.citizenship from singer group by singer.citizenship order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 歌手最常见的国籍是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示不同的国籍和每个国籍歌手的最大净资产。", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select singer.citizenship  , max ( singer.net_worth_millions ) from singer group by singer.citizenship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示不同的国籍和每个国籍歌手的最大净资产。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "对于每个国籍来说，最大的净资产是多少？", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select singer.citizenship  , max ( singer.net_worth_millions ) as max_net_worth from singer group by singer.citizenship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 对于每个国籍来说，最大的净资产是多少？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示歌曲名和歌手的名字。", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select song.title  , singer.name from song join singer on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示歌曲名和歌手的名字。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "歌曲名和歌手名字是什么？", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select song.title  , singer.name from song join singer on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 歌曲名和歌手名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示销量超过300000首的不同歌手的名字。", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id where song.sales > 300000 group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示销量超过300000首的不同歌手的名字。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "销售超过300000的歌手的不同的名字是什么？", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select distinct singer.name from singer join song on song.singer_id = singer.singer_id where song.sales > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 销售超过300000的歌手的不同的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示有不止一首歌曲的歌手的名字。", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( song.song_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示有不止一首歌曲的歌手的名字。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "那些有不止一首歌的歌手的名字是什么？", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id group by singer.name having count ( song.song_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 那些有不止一首歌的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示歌手的名字和他们的歌曲的总销售。", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , sum ( song.sales ) as total_sales from singer join song on song.singer_id = singer.singer_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示歌手的名字和他们的歌曲的总销售。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "对于每个歌手的名字，他们的歌曲的总销量是多少？", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , sum ( song.sales ) as total_sales from singer join song on song.singer_id = singer.singer_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 对于每个歌手的名字，他们的歌曲的总销量是多少？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "列出没有歌曲的歌手的名字。", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer left join song on singer.singer_id = song.singer_id where song.singer_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 列出没有歌曲的歌手的名字。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "没有任何歌曲的歌手的名字是什么？", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer where singer.singer_id not in ( select singer_id from song )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 没有任何歌曲的歌手的名字是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "显示1945年前和1955年后出生的歌手所共有的国籍。", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select singer.citizenship from singer where singer.birth_year < 1945 or singer.birth_year > 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 显示1945年前和1955年后出生的歌手所共有的国籍。 \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "在1945年之前和1955年之后出生的歌手所共有的国籍是什么？", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select singer.citizenship from singer where singer.birth_year < 1945 or singer.birth_year > 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 在1945年之前和1955年之后出生的歌手所共有的国籍是什么？ \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "real_estate_properties", "question": "一共有多少个可用的特性？", "query": "select count ( * ) from other_available_features", "predicted_sql": "select count ( * ) from other_available_features", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### 一共有多少个可用的特性？ \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "'春秋航空公司'的特征类型名称是什么？", "query": "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = '春秋航空公司'", "predicted_sql": "select ref_feature_types.feature_type_name from ref_feature_types where ref_feature_types.feature_type_code = '春秋航空公司'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### '春秋航空公司'的特征类型名称是什么？ \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "显示属于该代码的属性的属性类型说明。", "query": "select ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code", "predicted_sql": "select ref_property_types.property_type_description from ref_property_types join properties on properties.property_type_code = ref_property_types.property_type_code where properties.property_id = [property_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### 显示属于该代码的属性的属性类型说明。 \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "超过1个房间的'房子'或'公寓'的属性名称是什么？", "query": "select property_name from properties where property_type_code = '房子' union select property_name from properties where property_type_code = '公寓' and room_count > 1", "predicted_sql": "select properties.property_name from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code where properties.room_count > 1 and ( ref_property_types.property_type_description = '房子' or ref_property_types.property_type_description = '公寓' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### 超过1个房间的'房子'或'公寓'的属性名称是什么？ \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
