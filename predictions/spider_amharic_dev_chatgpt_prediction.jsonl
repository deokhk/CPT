{"db_id": "concert_singer", "question": "ምን ያህል ዘፋኞች አሉን?", "query": "select count ( * ) from singer", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ምን ያህል ዘፋኞች አሉን? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "አጠቃላይ የዘፋኞች ብዛት ስንት ነው?", "query": "select count ( * ) from singer", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### አጠቃላይ የዘፋኞች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለሁሉም ዘፋኖች በቅደም ተከተል ከትንሽ ወደ ትልቅ ስም ፣ ሀገር እና እድሜ አሳይ።", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select stadium.name  , stadium.location  , singer.name  , singer.country  , singer.age  , concert.concert_name from stadium join concert on concert.stadium_id = stadium.stadium_id join singer_in_concert on singer_in_concert.concert_id = concert.concert_id join singer on singer.singer_id = singer_in_concert.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለሁሉም ዘፋኖች በቅደም ተከተል ከትንሽ ወደ ትልቅ ስም ፣ ሀገር እና እድሜ አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ዘፋኝ በእድሜ ቅደም ተከተል ከትልቅ ወደ ትንሽ ስም ፣ አገር፣ እና እድሜ ምንድናቸው?", "query": "select name , country , age from singer order by age desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ዘፋኝ በእድሜ ቅደም ተከተል ከትልቅ ወደ ትንሽ ስም ፣ አገር፣ እና እድሜ ምንድናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከFrance ዘፋኖች ውስጥ አማካይ ፣ ዝቅተኛው እና ከፍተኛው እድሜ ምን ያህል ነው?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "select singer.name  , singer.age from singer where singer.country = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከFrance ዘፋኖች ውስጥ አማካይ ፣ ዝቅተኛው እና ከፍተኛው እድሜ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከሁሉም French ዘፋኞች ውስጥ አማካይ ፣ ዝቅተኛው እና ከፍተኛው እድሜ ምን ያህል ነው?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "select singer.name  , singer.age from singer where singer.country = 'French'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከሁሉም French ዘፋኞች ውስጥ አማካይ ፣ ዝቅተኛው እና ከፍተኛው እድሜ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የዘፈኑን ስም እና የተለቀቀበትን ዓመተ ምህረት በትንሹ ዘፋኝ አሳይ።", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.name  , singer.age from singer where singer.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የዘፈኑን ስም እና የተለቀቀበትን ዓመተ ምህረት በትንሹ ዘፋኝ አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የወጣቶቹን ዘፋኞች የዘፈን ሰምና ዘፈኖቹ የተለቀቁበትን አመት አሳይ።", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.name  , singer.age from singer where singer.is_male = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የወጣቶቹን ዘፋኞች የዘፈን ሰምና ዘፈኖቹ የተለቀቁበትን አመት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "አድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች የመጡባቸው አገሮች የትኞቹ ናቸው?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select singer.name from singer order by singer.age desc limit 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### አድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች የመጡባቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች ያላቸው የተለያዩ አገሮች የትኞቹ ናቸው?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select singer.name from singer where singer.age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች ያላቸው የተለያዩ አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ሁሉንም አገሮች እና በእያንዳንዱ ሀገር ውስጥ ያሉትን የዘፋኞች ብዛት አሳይ።", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select stadium.name  , count ( singer.singer_id ) as total_singers from stadium join concert on concert.stadium_id = stadium.stadium_id join singer_in_concert on singer_in_concert.concert_id = concert.concert_id join singer on singer.singer_id = singer_in_concert.singer_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ሁሉንም አገሮች እና በእያንዳንዱ ሀገር ውስጥ ያሉትን የዘፋኞች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከእያንዳንዱ አገሮች ስንት ዘፋኞች ናቸው?", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select count ( distinct stadium_id ) as num_stadiums from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከእያንዳንዱ አገሮች ስንት ዘፋኞች ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከአማካይ እድሜ በላይ የሆኑትን ሁሉንም የዘፈን ስሞች ይዘርዝሩ ።", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከአማካይ እድሜ በላይ የሆኑትን ሁሉንም የዘፈን ስሞች ይዘርዝሩ ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከአማካይ እድሜ በላይ የሆኑ ሁሉም ዘፋኞች፤ የዘፋኝ ስሞች ምንድን ናቸው?", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.name from singer where singer.is_male = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከአማካይ እድሜ በላይ የሆኑ ሁሉም ዘፋኞች፤ የዘፋኝ ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ5000 እና 10000 መካካል አቅም ያላቸው  ስታዲዮሞች ቦታ እና ስም አሳይ።", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.stadium_id  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ5000 እና 10000 መካካል አቅም ያላቸው  ስታዲዮሞች ቦታ እና ስም አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ500 እና 10000 መካከል አቅም ያላቸው ጣቢያዎች ፤ ቦታዎችና ስሞች ምንድን ነው?", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average  , singer.singer_id  , singer.name  , singer.country  , singer.song_name  , singer.song_release_year  , singer.age  , singer.is_male  , concert.concert_id  , concert.concert_name  , concert.theme  , concert.stadium_id  , concert.year  , singer_in_concert.concert_id  , singer_in_concert.singer_id from stadium  , singer  , concert  , singer_in_concert where concert.stadium_id = stadium.stadium_id and singer_in_concert.singer_id = singer.singer_id and singer_in_concert.concert_id = concert.concert_id and stadium.capacity between 500 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ500 እና 10000 መካከል አቅም ያላቸው ጣቢያዎች ፤ ቦታዎችና ስሞች ምንድን ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም ስታዲየሞች ከፍተኛ የመያዝ አቅም እና አማካይ ምን ያህል ነው?", "query": "select max ( capacity ) , average from stadium", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም ስታዲየሞች ከፍተኛ የመያዝ አቅም እና አማካይ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም ስታዲዮሞች አማካይ እና ከፍተኛ አቅም ምን ያህል ነው?", "query": "select avg ( capacity ) , max ( capacity ) from stadium", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም ስታዲዮሞች አማካይ እና ከፍተኛ አቅም ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከፍተኛ አማካይ ተመልካች ያለው ስታዲዮም ስም እና የመያዝ አቅም ምንድነው?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከፍተኛ አማካይ ተመልካች ያለው ስታዲዮም ስም እና የመያዝ አቅም ምንድነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከፍተኛ አማካይ ተመልካች ያለው ስታዲዮም ስም እና የመያዝ አቅም ምንድነው?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከፍተኛ አማካይ ተመልካች ያለው ስታዲዮም ስም እና የመያዝ አቅም ምንድነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ወይም 2015 ምን ያህል ኮንሰርቶች አሉ?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select concert.concert_name from concert where concert.year = 2014 or concert.year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ወይም 2015 ምን ያህል ኮንሰርቶች አሉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ወይም 2015 ምን ያህል ኮንሰርቶች ተካሂደዋል?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select concert.concert_name from concert where concert.year = 2014 or concert.year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ወይም 2015 ምን ያህል ኮንሰርቶች ተካሂደዋል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በእያንዳንዱ ስታዲዮም የስታዲዮም ስም እና የኮንሰርቶች ብዛት አሳይ።", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select stadium.name  , count ( concert.concert_id ) as num_concerts from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በእያንዳንዱ ስታዲዮም የስታዲዮም ስም እና የኮንሰርቶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በእያንዳንዱ ስታዲዮም ስንት ኮንስርቶች ይካሄዳሉ?", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select count ( concert.concert_id ) from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በእያንዳንዱ ስታዲዮም ስንት ኮንስርቶች ይካሄዳሉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ወይም ከዚያ በኋላ የስታዲዮም ስም እና የመያዝ አቅም ከአብዛኛው የኮንሰርት ብዛት ጋር አሳይ።", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select stadium.name  , stadium.highest from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year >= 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ወይም ከዚያ በኋላ የስታዲዮም ስም እና የመያዝ አቅም ከአብዛኛው የኮንሰርት ብዛት ጋር አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከ2013 በኋላ ብዙ ኮንሰርቶች የተካሄዱበት የስታዲዮም ስም እና የመያዝ አቅም ምን ያህል ነው?", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select concert.concert_name  , concert.year from concert where concert.year >= 2013", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከ2013 በኋላ ብዙ ኮንሰርቶች የተካሄዱበት የስታዲዮም ስም እና የመያዝ አቅም ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ብዙ የኮንሰርት ብዛት ያለው አመት የትኛው ነው?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select max ( age ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ብዙ የኮንሰርት ብዛት ያለው አመት የትኛው ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ብዙ ኮንሰርቶች የበዙበት አመት የቱ ነው?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct concert.year ) from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ብዙ ኮንሰርቶች የበዙበት አመት የቱ ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ምንም ኮንሰርት ያልተካሄዱባቸው ስታዲዮሞችን አሳይ።", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ምንም ኮንሰርት ያልተካሄዱባቸው ስታዲዮሞችን አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ምንም ኮንሰርት ያልተካሄዱባቸው ስታዲዮሞች እነማን ናቸው?", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ምንም ኮንሰርት ያልተካሄዱባቸው ስታዲዮሞች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እድሜው ከ40 በላይ የሆነ ዘፋኝ እና ከ30 በታች የሆነ ዘፋኝ የመጡበትን ሀገራት አሳይ።", "query": "select country from singer where age > 40 intersect select country from singer where age < 30", "predicted_sql": "select stadium.name from stadium where stadium.highest > 40 and stadium.lowest < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እድሜው ከ40 በላይ የሆነ ዘፋኝ እና ከ30 በታች የሆነ ዘፋኝ የመጡበትን ሀገራት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 የሚዚቃ ድግስ ከካሄዱት ስታዲዮሞች በስተቀር የሁሉንም ስታዲየሞች ስም አሳይ።", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join concert on singer.singer_id = singer_in_concert.singer_id join singer_in_concert on concert.concert_id = singer_in_concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 የሚዚቃ ድግስ ከካሄዱት ስታዲዮሞች በስተቀር የሁሉንም ስታዲየሞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 የሙዚቃ ድግስ ያለካሄዱት ስታዲየሞች ስም ማው?", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 የሙዚቃ ድግስ ያለካሄዱት ስታዲየሞች ስም ማው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እያንዳንዱን የሙዚቃ ድግስ ስም፣ አይነት እና የዘፋኞች ብዛት አሳይ።", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select singer.name  , singer.song_name  , singer.song_release_year  , singer.age from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እያንዳንዱን የሙዚቃ ድግስ ስም፣ አይነት እና የዘፋኞች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም የሙዚቃ ድግስ የዘፋኖች ብዛት፣ አይነት እና ስም ማነው?", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select singer.name  , singer.song_name  , singer.song_release_year from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም የሙዚቃ ድግስ የዘፋኖች ብዛት፣ አይነት እና ስም ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ዘፋኝ ስም እና የሙዚቃ ድግስ ብዛት ዘርዝር::", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , singer.song_name  , count ( singer.song_name ) as song_count from singer group by singer.name  , singer.song_name having count ( singer.song_name ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ዘፋኝ ስም እና የሙዚቃ ድግስ ብዛት ዘርዝር:: \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ሰው የሙዚቃ ድግስ ብዛት እና የዘፋኝ ስም ማነው?", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.song_name  , singer.name from singer where singer.song_release_year = 'ዘፋኝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ሰው የሙዚቃ ድግስ ብዛት እና የዘፋኝ ስም ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ውስጥ ባሉት የሙዚቃ ድግሶች ውስጥ ያሉትን የዘፋኖች ስም ዘርዝር፡፡", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer where singer.song_release_year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ውስጥ ባሉት የሙዚቃ ድግሶች ውስጥ ያሉትን የዘፋኖች ስም ዘርዝር፡፡ \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 የሙዚቃ ድግስ ላይ ያቀረቡት የዘፋኖች ስም ማነው?", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 የሙዚቃ ድግስ ላይ ያቀረቡት የዘፋኖች ስም ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በዘፈኑ ውስጥ Hey ያለው የዘፋኝ ስም እና ክልል ማነው?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , singer.country  , singer.song_name  , singer.song_release_year  , singer.age  , singer.is_male from singer where singer.name = 'Hey'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በዘፈኑ ውስጥ Hey ያለው የዘፋኝ ስም እና ክልል ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በዘፈኑ ርዕስ ውስጥ Hey የሚለውን ቃል ያለው የዘፋኝ ስም እና የትውልድ ሀገር ማነው?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , concert.theme from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where singer.name = 'Hey'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በዘፈኑ ርዕስ ውስጥ Hey የሚለውን ቃል ያለው የዘፋኝ ስም እና የትውልድ ሀገር ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በሁለቱም 2014 እና 2015 የተወሰኑ የሙዚቃ ድግሶችን ያስተናገዱ ስታዲየሞች ስም እና አድራሻ ፈልግ።", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select singer.name  , singer.song_name  , singer.song_release_year from singer where singer.song_release_year = 2014 or singer.song_release_year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በሁለቱም 2014 እና 2015 የተወሰኑ የሙዚቃ ድግሶችን ያስተናገዱ ስታዲየሞች ስም እና አድራሻ ፈልግ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በሁለቱም 2014 እና 2015 የሙዚቃ ድግሶችን የስተናገዱ ስታዲየሞች ስም እና አድራሻ ማነው?", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select singer.name  , singer.song_name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year in ( 2014  , 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በሁለቱም 2014 እና 2015 የሙዚቃ ድግሶችን የስተናገዱ ስታዲየሞች ስም እና አድራሻ ማነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከሁሉም ትልቅ አቅም ባለው ስታዲየም የተካሄዱትን የሙዚቃ ድግሶች ብዛት ፈልግ።", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "select stadium.name  , count ( singer.song_name ) as total_songs from stadium join concert on stadium.stadium_id = concert.stadium_id join singer_in_concert on concert.concert_id = singer_in_concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by stadium.name order by total_songs desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከሁሉም ትልቅ አቅም ባለው ስታዲየም የተካሄዱትን የሙዚቃ ድግሶች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከሁሉም ሰፊ አቅም ባለው ስታዲያም ውስጥ የተካሄዱት የሙዚቃ ድግሶች ብዛት ስንት ነዉ?", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "select count ( singer.singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከሁሉም ሰፊ አቅም ባለው ስታዲያም ውስጥ የተካሄዱት የሙዚቃ ድግሶች ብዛት ስንት ነዉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "pets_1", "question": "ክብደታቸው ከ10 በላይ የሆኑትን የለማዳ እንስሳት ብዛት ፈልግ።", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.city_code = 'ለማዳ' limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ክብደታቸው ከ10 በላይ የሆኑትን የለማዳ እንስሳት ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከ10 በላይ ክብደት ያላቸው ለማዳ እንስሳት ስንት ናቸው?", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select count ( distinct pettype ) from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከ10 በላይ ክብደት ያላቸው ለማዳ እንስሳት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በእድሜ ትንሹን ወሻ ክብደት ፈልግ።", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በእድሜ ትንሹን ወሻ ክብደት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በእድሜ ትንሹ ውሻ ምን ያህል ይከብዳል?", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname from student where student.city_code = 'እድሜ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በእድሜ ትንሹ ውሻ ምን ያህል ይከብዳል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የለማዳ እንስሳ አይነት ከፍተኛ ክብደት ፈልግ። ከፍተኛውን ክብደት እና የለማዳ እንስሳ አይነት ዘርዝር።", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , student.age  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.major = 'Computer Science' and pets.pettype = 'Dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የለማዳ እንስሳ አይነት ከፍተኛ ክብደት ፈልግ። ከፍተኛውን ክብደት እና የለማዳ እንስሳ አይነት ዘርዝር። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የለማዳ እንስሳ አይነት ከፍተኛ ክብደት እና አይነት ፈልግ።", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , student.age  , pets.pettype from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.major = 'Computer Science' and pets.pettype = 'Dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የለማዳ እንስሳ አይነት ከፍተኛ ክብደት እና አይነት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "እድሜያቸው ከ20 በላይ የሆኑ ተማሪዎች የተያዙትን ለማዳ እንስሳት ብዛት ፈልግ።", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student limit 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### እድሜያቸው ከ20 በላይ የሆኑ ተማሪዎች የተያዙትን ለማዳ እንስሳት ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "እድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙት የለማዳ እንስሳት ብዛት ስንት ነው?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select count ( * ) from student where major = 'Computer Science'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### እድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙት የለማዳ እንስሳት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በሴት ተማሪዎች የሚያድጉትን ውሾች ብዛት ፈልግ።", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select student.sex  , count ( has_pet.petid ) as pet_count from student inner join has_pet on student.stuid = has_pet.stuid inner join pets on has_pet.petid = pets.petid where student.sex = 'Female' group by student.sex", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በሴት ተማሪዎች የሚያድጉትን ውሾች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በሴት ተማሪዎች የሚያድጉት ውሾች ብዛት ስንት ነው?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select count ( distinct student.stuid ) from student where student.sex = 'Female'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በሴት ተማሪዎች የሚያድጉት ውሾች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የተለያዩ የለማዳ እንስሳትን ብዛት ፈልግ።", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select count ( * ) from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የተለያዩ የለማዳ እንስሳትን ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ስንት የተለያዩ አይነት ለማዳ እንስሳቶች አሉ?", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select distinct pettype from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ስንት የተለያዩ አይነት ለማዳ እንስሳቶች አሉ? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት ወይም ውሻ ያላቸውን ተማሪዎች የመጀመሪያ ስም ፈልግ።", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት ወይም ውሻ ያላቸውን ተማሪዎች የመጀመሪያ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት ወይም ውሻ ያላቸውን ተማሪዎች የመጀመሪያ ስም ማነው?", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት ወይም ውሻ ያላቸውን ተማሪዎች የመጀመሪያ ስም ማነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻም ድመትም ያላቸውን ተማሪዎች የመጀመሪያ ስም ፈልግ።", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻም ድመትም ያላቸውን ተማሪዎች የመጀመሪያ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻም ድመትም ያላቸው ተማሪዎች የመጀመሪያ ስም ማነው?", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻም ድመትም ያላቸው ተማሪዎች የመጀመሪያ ስም ማነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት የሌላቸውን ተማሪዎች ዋና የትምህርት አይነት እና እድሜ ፈልግ።", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.major  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት የሌላቸውን ተማሪዎች ዋና የትምህርት አይነት እና እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የእያንዳንዱ ድመት የሌሌው ተማሪ ዋና የትምህርት አይነት ምንድነው? እንዲሁም እድሜያቸው ስንት ነው?", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.major  , student.age from student where student.fname = 'እያንዳንዱ' and student.lname = 'ድመት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የእያንዳንዱ ድመት የሌሌው ተማሪ ዋና የትምህርት አይነት ምንድነው? እንዲሁም እድሜያቸው ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት የሌላቸውን ተማሪዎች መታወቂያ ፈልግ።", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "select student.stuid  , student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት የሌላቸውን ተማሪዎች መታወቂያ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት የሌላቸው ተማሪዎች መታወቂያዎች ምንድናቸው?", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "select student.stuid  , student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት የሌላቸው ተማሪዎች መታወቂያዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻ ኖሮት ድመት የሌለውን ተማሪ የመጀመሪያ ስም እና እድሜ ፈልግ።", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname  , student.age from student where student.age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻ ኖሮት ድመት የሌለውን ተማሪ የመጀመሪያ ስም እና እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻ ኖሮት ድመት የሌለው የእያንዳንዱ ተማሪ የመጀመሪያ ስም ማነው?", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname from student where student.age = 25", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻ ኖሮት ድመት የሌለው የእያንዳንዱ ተማሪ የመጀመሪያ ስም ማነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በእድሜ ትንሹን የለማዳ እንስሳ አይነት እና ክብደት ፈልግ።", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code  , pets.pettype  , pets.pet_age  , pets.weight from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በእድሜ ትንሹን የለማዳ እንስሳ አይነት እና ክብደት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በእድሜ ትንሹ ለማዳ እንስሳ አይነት ምንድነው?  እና ምን ያህል ይከብዳል?", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በእድሜ ትንሹ ለማዳ እንስሳ አይነት ምንድነው?  እና ምን ያህል ይከብዳል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የሁሉም ከ1 አመት በላይ የሆኑ ለማዳ እንስሳት መታወቂያ እና  ክብደት ፈልግ።", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student where student.age >= 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የሁሉም ከ1 አመት በላይ የሆኑ ለማዳ እንስሳት መታወቂያ እና  ክብደት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የእያንዳንዱ ከ1 አመት በላይ የሆነ ለማዳ እንስሳ መታወቂያ እና ክብደት ምንድን ነው?", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student where student.age = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የእያንዳንዱ ከ1 አመት በላይ የሆነ ለማዳ እንስሳ መታወቂያ እና ክብደት ምንድን ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለአንዳንድ አይነት ለማዳ እንስሳ አማካይ እና ከፍተኛ እድሜ ፈልግ።", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student where student.major = 'Computer Science' and student.age >= 18 and student.sex = 'Male' and student.city_code = '001'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለአንዳንድ አይነት ለማዳ እንስሳ አማካይ እና ከፍተኛ እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የአንዳንድ አይነት ለማዳ እንስሳ አማካይ እና ከፍተኛ እድሜ ምን ያህል ነው?", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select pettype from pets where pet_age > 5 and weight > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የአንዳንድ አይነት ለማዳ እንስሳ አማካይ እና ከፍተኛ እድሜ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ አይነት ለማዳ እንስሳ አማካይ ክብደት ፈልግ።", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student where student.major = 'Computer Science'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ አይነት ለማዳ እንስሳ አማካይ ክብደት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የእያንዳንዱ አይነት ለማዳ እንስሳ አማካይ ክብደት ምን ያህል ነው?", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pettype from pets where petid = '1'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የእያንዳንዱ አይነት ለማዳ እንስሳ አማካይ ክብደት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለማዳ እንስሳ ያለዉን ተማሪ የመጀመሪያ ስም እና እድሜ ፈልግ።", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.age from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለማዳ እንስሳ ያለዉን ተማሪ የመጀመሪያ ስም እና እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለማዳ እንስሳ ያላቸው ተማሪዎች የተለያዩ የመጀመሪያ ስሞች እኛ እድሜዎች ምንድን ናቸው?", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለማዳ እንስሳ ያላቸው ተማሪዎች የተለያዩ የመጀመሪያ ስሞች እኛ እድሜዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የመጨረሻ ስሙ Smith የሆነውን ተማሪ ለማዳ እንስሳ መታወቂያ ፈልግ።", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student where student.lname = 'Smith'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname ( Smith ) , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የመጨረሻ ስሙ Smith የሆነውን ተማሪ ለማዳ እንስሳ መታወቂያ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የመጨረሻ ስሙ Smith የሆነውን ተማሪ ለማዳ እንስሳ መታወቂያ ምንድን ነው?", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select major from student where lname = 'Smith'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname ( Smith ) , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የመጨረሻ ስሙ Smith የሆነውን ተማሪ ለማዳ እንስሳ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የትኛውንም አይነት ለማዳ እንስሳ እና የተማሪ መታወቂያ ያለው ተማሪ ያለዉን የለማዳ እንስሳ ብዛት ፈልግ።", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.major = 'Computer Science'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የትኛውንም አይነት ለማዳ እንስሳ እና የተማሪ መታወቂያ ያለው ተማሪ ያለዉን የለማዳ እንስሳ ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለማዳ እንስሳ ላላቸው ተማሪዎች እያንዳንዳቸው ስንት ለማዳ እንስሳት አላቸው? ስማቸውን ሳይሆን መታወቂያቸውን ዘርዝር።", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.stuid  , student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለማዳ እንስሳ ላላቸው ተማሪዎች እያንዳንዳቸው ስንት ለማዳ እንስሳት አላቸው? ስማቸውን ሳይሆን መታወቂያቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከአንድ በላይ ለማዳ እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም እና ፆታ ፈልግ።", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.lname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከአንድ በላይ ለማዳ እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም እና ፆታ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከአንድ በላይ ለማዳ እነስሳት ያላቸው ተማሪዎች የመጀመሪያ ስም እና ፆታ ምንድን ነው?", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.lname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከአንድ በላይ ለማዳ እነስሳት ያላቸው ተማሪዎች የመጀመሪያ ስም እና ፆታ ምንድን ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የ3 አመት እድሜ ያለዉ ድመት ያለው ተማሪን የመጨረሻ ስም ፈልግ።", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የ3 አመት እድሜ ያለዉ ድመት ያለው ተማሪን የመጨረሻ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የ3 አመት እድሜ ያለው ድመት የለው ተማሪ የመጨረሻ ስም ማነው?", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የ3 አመት እድሜ ያለው ድመት የለው ተማሪ የመጨረሻ ስም ማነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ምንም አይነት ለማዳ እንስሳ የሌላቸውን ተማሪዎች አማካይ እድሜ ፈልግ።", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "select student.fname  , student.lname  , student.age  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ምንም አይነት ለማዳ እንስሳ የሌላቸውን ተማሪዎች አማካይ እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ምንም አይነት ለማዳ እንስሳ የሌላቸው ተማሪዎች ከማካይ እድሜ ስንት ነዉ?", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ምንም አይነት ለማዳ እንስሳ የሌላቸው ተማሪዎች ከማካይ እድሜ ስንት ነዉ? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "car_1", "question": "ስንት አህጉራት አሉ?", "query": "select count ( * ) from continents", "predicted_sql": "select continents.continent from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አህጉራት አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የአህጉራቱ ብዛት ስንት ነው?", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የአህጉራቱ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እያንዳንዱ አህጉር ስንት አገራት አሉት? የአህጉሩን መታወቂያ ፣ ስም እና የአገሪቱን ቁጥር ዘርዝር።", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እያንዳንዱ አህጉር ስንት አገራት አሉት? የአህጉሩን መታወቂያ ፣ ስም እና የአገሪቱን ቁጥር ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የእያንዳንዱ አህጉር መታወቂያ ፣ ስም እና ስንት አገራት እንዳሉት ዘርዝር።", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid where continents.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የእያንዳንዱ አህጉር መታወቂያ ፣ ስም እና ስንት አገራት እንዳሉት ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት አገራት ተዘርዝረዋል?", "query": "select count ( * ) from countries", "predicted_sql": "select continents.continent from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አገራት ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት አገራት አሉ?", "query": "select count ( * ) from countries", "predicted_sql": "select countries.countryname from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አገራት አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እያንዳንዱ የመኪና አምራች ስንት ሞዴሎች ያመርታል? የአምራቹን ሙሉ ስም ፣ መታወቂያ እና ቁጥር ዘርዝር።", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select count ( distinct model_list.model ) as total_models from car_names join model_list on car_names.model = model_list.modelid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እያንዳንዱ የመኪና አምራች ስንት ሞዴሎች ያመርታል? የአምራቹን ሙሉ ስም ፣ መታወቂያ እና ቁጥር ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የእያንዳንዱ የመኪና አምራች ሙሉ ስሙ ማነው? ከመታወቂያው ጋር ስንት ሞዴሎችን የመርታል?", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select car_makers.fullname  , count ( model_list.model ) as total_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.fullname", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የእያንዳንዱ የመኪና አምራች ሙሉ ስሙ ማነው? ከመታወቂያው ጋር ስንት ሞዴሎችን የመርታል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው የመኪና ሞዴል ትንሽ የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.weight = 'ፈረስ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው የመኪና ሞዴል ትንሽ የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አነስተኛ የፈረስ ጉልበት መጠን ያለው የመኪና ሞዴል ምንድን ነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አነስተኛ የፈረስ ጉልበት መጠን ያለው የመኪና ሞዴል ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከአማካይ ክብደት ቦታች የሆነ ክብደት ያለዉን የመኪና ሞዴል ፈልግ።", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , car_makers.country  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከአማካይ ክብደት ቦታች የሆነ ክብደት ያለዉን የመኪና ሞዴል ፈልግ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከአማካይ ያነሰ ክብደት ያለው የመኪና ሞዴል ምንድን ነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.maker = 'አማካይ' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከአማካይ ያነሰ ክብደት ያለው የመኪና ሞዴል ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1970 አንዳንድ መኪና የመረቱትን የመኪና አምራቾች ፈልግ።", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data where cars_data.year = 1970", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1970 አንዳንድ መኪና የመረቱትን የመኪና አምራቾች ፈልግ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1970 መኪና ያመረቱ የተለያዩ የመኪና ሰሪዎች ስም ማን ይበላል?", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1970 መኪና ያመረቱ የተለያዩ የመኪና ሰሪዎች ስም ማን ይበላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመጀመሪያዎቹ አመታት ውስጥ የተመረቱትን የመኪኖች ስራት እና የምርት ጊዜ ፈልግ።", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመጀመሪያዎቹ አመታት ውስጥ የተመረቱትን የመኪኖች ስራት እና የምርት ጊዜ ፈልግ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመጀማሪያዎቹ ዓመታት ውስጥ የመረተው የመኪና አምራች ማነው? የትኛው አመትስ ነበር?", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select cars_data.year from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመጀማሪያዎቹ ዓመታት ውስጥ የመረተው የመኪና አምራች ማነው? የትኛው አመትስ ነበር? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ1980 በኋላ የትኞቹ ልዩ የመኪና ሞዴሎች ነው የተመረቱት?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ1980 በኋላ የትኞቹ ልዩ የመኪና ሞዴሎች ነው የተመረቱት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ1980 በኋላ የተመረቱት የተለያዩ የመኪና ሞዴሎች የትኞቹ ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ1980 በኋላ የተመረቱት የተለያዩ የመኪና ሞዴሎች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ አህጉር ስንት የመኪና አምራቾች አሉ? የአህጉሩን ስም እና ቁጥር ዘርዝር።", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select car_makers.maker  , car_makers.id from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ አህጉር ስንት የመኪና አምራቾች አሉ? የአህጉሩን ስም እና ቁጥር ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የእያንዳንዱ አህጉር ስም ማን ይባላል? እና በእያንዳንዱ አህጉር ውስጥ ስንት የመኪና አምራቾች አሉ?", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የእያንዳንዱ አህጉር ስም ማን ይባላል? እና በእያንዳንዱ አህጉር ውስጥ ስንት የመኪና አምራቾች አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ብዙ መኪና አምራቾች ያሉት የትኛው አገር ነው? የአገሩን ስም ዘርዝር።", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select continents.continent from continents join countries on countries.continent = continents.contid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ብዙ መኪና አምራቾች ያሉት የትኛው አገር ነው? የአገሩን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ብዙ የመኪና አምራች ያለው አገር ስም ማን ይባላል?", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select countries.countryname from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ብዙ የመኪና አምራች ያለው አገር ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ የመኪና አምራች ስንት የመኪና ሞዴሎች ይመረታሉ? ብዛቱን እና የአምራቹን ስም ብቻ ዘርዝር።", "query": "select count ( * ) , car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ የመኪና አምራች ስንት የመኪና ሞዴሎች ይመረታሉ? ብዛቱን እና የአምራቹን ስም ብቻ ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ የመኪና አምራች የሚመረተው የመኪና ሞዴሎች ብዛት ስንት ነው? እና የእያንዳንዱ የመኪና አምራች መታወቂያ እና ሙሉ ስም ምንድን ነው?", "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ የመኪና አምራች የሚመረተው የመኪና ሞዴሎች ብዛት ስንት ነው? እና የእያንዳንዱ የመኪና አምራች መታወቂያ እና ሙሉ ስም ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የመኪናው ፍጥነት ምን የህል ነው? make amc hornet sportabout (sw)?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select car_names.make from car_names where car_names.model = 'amc hornet sportabout (sw)'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( amc ) , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( amc ) | car_names : car_names.makeid , car_names.model ( amc ) , car_names.make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የመኪናው ፍጥነት ምን የህል ነው? make amc hornet sportabout (sw)? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "amc hornet sportabout (sw) የሚያደርገው መኪና ምን ያህል ይፈጥናል?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select model_list.modelid from model_list where model_list.model = 'amc hornet sportabout (sw)'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( amc ) , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( amc ) | car_names : car_names.makeid , car_names.model ( amc ) , car_names.make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### amc hornet sportabout (sw) የሚያደርገው መኪና ምን ያህል ይፈጥናል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "France ውስጥ ሰንት የመኪና አምራቾች አሉ?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select model_list.model from countries join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id where countries.countryname = 'france'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname ( france ) , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### France ውስጥ ሰንት የመኪና አምራቾች አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በFrance ውስጥ የመኪና አምራቾች ቁጥር ስንት ነዉ?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select count ( car_names.makeid ) from countries join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model where countries.countryname = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በFrance ውስጥ የመኪና አምራቾች ቁጥር ስንት ነዉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በUSA ውስጥ ስንት የመኪና ሞዴሎች ይመረታሉ?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( model_list.modelid ) from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id where countries.countryname = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በUSA ውስጥ ስንት የመኪና ሞዴሎች ይመረታሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በUnited State ውስጥ የተሰሩት የመኪና ሞዴሎች ብዛት ስንት ነዉ?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( cars_data.id ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where countries.countryname = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በUnited State ውስጥ የተሰሩት የመኪና ሞዴሎች ብዛት ስንት ነዉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 Cylinders ያሏቸው መኪኖች በአማካይ በማይል በአአንድ Gollon(mpg) ስንት ነው?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select count ( * ) from cars_data where cylinders = 4 and mpg > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 Cylinders ያሏቸው መኪኖች በአማካይ በማይል በአአንድ Gollon(mpg) ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 Cylinders ያሏቸው ሁሉም መኪኖች በ Gallon አማካይ በ mile ስንት ነው?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select count ( * ) from cars_data where cylinders = 4 and mpg = 'Gallon' and accelerate = 'mile'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 Cylinders ያሏቸው ሁሉም መኪኖች በ Gallon አማካይ በ mile ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1974 በ 8 Cylinders የተመረተው የመኪና ትንሹ ክብደት ምንድን ነው?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select cars_data.edispl from cars_data where cars_data.year = 1974 and cars_data.cylinders = 8", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1974 በ 8 Cylinders የተመረተው የመኪና ትንሹ ክብደት ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1974 በ 8 Cylinders የተመረተው የመኪና ዝቅተኛው ክብደት ስንት ነው?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select count ( * ) from cars_data where cylinders = 8 and year = 1974", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1974 በ 8 Cylinders የተመረተው የመኪና ዝቅተኛው ክብደት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ሁሉም አምራቾች እና ሞዴሎች እነማን ናቸው?", "query": "select maker , model from model_list", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ሁሉም አምራቾች እና ሞዴሎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አምራቾች እና ሞዴሎች እነማን ናቸው?", "query": "select maker , model from model_list", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , model_list.model  , cars_data.mpg from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አምራቾች እና ሞዴሎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ አንድ የመኪና አምራች ያላቸው አገሮች እነማን ናቸው? ስማቸውን እና መታወቂያቸውን ዘርዝር።", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select car_makers.maker  , car_makers.fullname  , car_makers.country from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ አንድ የመኪና አምራች ያላቸው አገሮች እነማን ናቸው? ስማቸውን እና መታወቂያቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢዮንስ አንድ የመኪና አምራች ያላቸው የሁሉም አገሮች ሰምና መታወቂያ ምንድናቸው?", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , car_names.make  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢዮንስ አንድ የመኪና አምራች ያላቸው የሁሉም አገሮች ሰምና መታወቂያ ምንድናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ150 የሚበልጥ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ150 የሚበልጥ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where cars_data.weight > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በየዓመቱ የመኪኖች አማካይ ክብደት ስንት ነው?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select count ( distinct cars_data.id ) as num_models from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በየዓመቱ የመኪኖች አማካይ ክብደት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለእያንዳንዱ አመት አማካይ ክብደት እና አመት ስንት ነው?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለእያንዳንዱ አመት አማካይ ክብደት እና አመት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 3 የመኪና አምራች ያሉት በEurope የትኞቹ አገሮች ናቸው?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select countries.countryname from countries join continents on countries.continent = continents.contid where continents.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 3 የመኪና አምራች ያሉት በEurope የትኞቹ አገሮች ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 3 አምራቾች ያሏቸው ሁሉም የEurope አገሮች ስም እነማን ናቸው?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select countries.countryname from countries join continents on countries.continent = continents.contid where continents.continent = 'Europe' limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 3 አምራቾች ያሏቸው ሁሉም የEurope አገሮች ስም እነማን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛ የፈረስ ጉልበት እና 3 cylinder ያላቸው መኪኖች ከፍተኛ የፈረስ ጉልበት እና የስሪት ሞዴል ምንድን ነው?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛ የፈረስ ጉልበት እና 3 cylinder ያላቸው መኪኖች ከፍተኛ የፈረስ ጉልበት እና የስሪት ሞዴል ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3 cylinder ያላቸው የመኪና ሞዴሎች ከፍተኛ የፈረስ ጉልበት መጠን ምን ያህል ነው? እና የትኛው ምርት ነው?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3 cylinder ያላቸው የመኪና ሞዴሎች ከፍተኛ የፈረስ ጉልበት መጠን ምን ያህል ነው? እና የትኛው ምርት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው የመኪና ሞዴል በጣም ቤንዚን ይቆጥበል? ይህ ማለት በአንድ Golone ከፍተኛ mile ነው።", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select cars_data.mpg from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'Golone'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው የመኪና ሞዴል በጣም ቤንዚን ይቆጥበል? ይህ ማለት በአንድ Golone ከፍተኛ mile ነው። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛ mpg ያለው የመኪና ሞዴል የቱ ነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select cars_data.mpg from cars_data order by cars_data.mpg desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛ mpg ያለው የመኪና ሞዴል የቱ ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ1980 በፊት ያሉ መኪኖች አማካይ ፈረስ ጉልበት ስንት ነው?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select count ( * ) from cars_data where year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ1980 በፊት ያሉ መኪኖች አማካይ ፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ1980 በፊት ለተመረቱት ሁሉም መኪኖች አማካይ የፈረስ ጉልበት ስንት ነው?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select count ( * ) from cars_data where year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ1980 በፊት ለተመረቱት ሁሉም መኪኖች አማካይ የፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የVolvo ሞዴል መኪኖች አማካይ edispl ምን ያህል ነው?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select cars_data.edispl from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = 'Volvo'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የVolvo ሞዴል መኪኖች አማካይ edispl ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለሁሉም Volvo መኪኖች አማካይ edispl ምን ያህል ነው?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select cars_data.edispl from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = 'volvo'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( volvo ) , car_makers.fullname ( Volvo ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( volvo ) | car_names : car_names.makeid , car_names.model ( volvo ) , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለሁሉም Volvo መኪኖች አማካይ edispl ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለተለያዩ cylinders ከፍተኛው ፍጥነት ስንት ነው?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select count ( distinct cylinders ) as num_of_cylinder_types from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለተለያዩ cylinders ከፍተኛው ፍጥነት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለሁሉም በተለያዩ cylinders ከፍተኛው ፍጥነት ስንት ነው?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select count ( distinct cylinders ) as num_of_unique_cylinders from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለሁሉም በተለያዩ cylinders ከፍተኛው ፍጥነት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው የመከና ሞዴል ብዙ ስሪት አለው?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው የመከና ሞዴል ብዙ ስሪት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው የመኪና ሞዴል የተለያዩ ስሪቶች አሉት?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው የመኪና ሞዴል የተለያዩ ስሪቶች አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ4 በላይ cylinders ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from cars_data where cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ4 በላይ cylinders ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ4 cylinder በላይ ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from cars_data where cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ4 cylinder በላይ ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1980 ምን ያህል መኪኖች ነው የተሸጡት?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data where cars_data.year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1980 ምን ያህል መኪኖች ነው የተሸጡት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ1980 ምን ያህል መኪኖች ነው የተመረቱት?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select cars_data.id from cars_data where cars_data.year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ1980 ምን ያህል መኪኖች ነው የተመረቱት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ሙሉ ስሙ American Motor Company በሚባለው ሞተር ኩባንያ ምን ያህል የመኪና ሞዴሎች ተመረቱ?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "select model_list.model from car_makers join model_list on model_list.maker = car_makers.id where car_makers.fullname = 'American Motor Company'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent ( america ) | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname ( American Motor Company ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ሙሉ ስሙ American Motor Company በሚባለው ሞተር ኩባንያ ምን ያህል የመኪና ሞዴሎች ተመረቱ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በAmerica'ው ሞተር ኩባንያ የተመረቱት የመኪና ሞዴሎች ብዛት ስንት ነው?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "select count ( cars_data.id ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'America'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በAmerica'ው ሞተር ኩባንያ የተመረቱት የመኪና ሞዴሎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3 በላይ የመኪና ሞዴሎችን የነደፉት የትኞቹ የመኪና አምራቾች ናቸው? ሙሉ ስማቸውን እና መታወቂያቸውን ዘርዝር።", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model from model_list group by model_list.model having count ( * ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3 በላይ የመኪና ሞዴሎችን የነደፉት የትኞቹ የመኪና አምራቾች ናቸው? ሙሉ ስማቸውን እና መታወቂያቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3 በላይ የመኪና ሞዴሎችን ያመረቱት ስም እና መታወቂያ ምንድነው?", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3 በላይ የመኪና ሞዴሎችን ያመረቱት ስም እና መታወቂያ ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የመኪና አምራች በሙሉ ስሙ General Motors ወይም ከ 3500 በላይ የሚመዝኑት የትኞቹ ልዩ ልዩ ሞዴሎች ናቸው?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname ( General Motors ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የመኪና አምራች በሙሉ ስሙ General Motors ወይም ከ 3500 በላይ የሚመዝኑት የትኞቹ ልዩ ልዩ ሞዴሎች ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመኪና አምራቹ General Motors ወይም ከ3500 በላይ ክብደት ያላቸው የተመረቱት የተለያዩ ሞዴሎች ምንድን ናቸው?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.fullname = 'General Motors' and cars_data.edispl >= 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname ( General Motors ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመኪና አምራቹ General Motors ወይም ከ3500 በላይ ክብደት ያላቸው የተመረቱት የተለያዩ ሞዴሎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3000 ያላነሱ እና ከ4000 የማይበልጡ መኪኖች በየትኛው አመት ተመረቱ?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.year between 3000 and 4000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3000 ያላነሱ እና ከ4000 የማይበልጡ መኪኖች በየትኛው አመት ተመረቱ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ4000 በታች እና ከ3000 በላይ ክብደት ያላቸው መኪኖች የተመረቱባቸው የተለያዩ ዓመታት ምን ያህል ነው?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.year >= 4000 and cars_data.year <= 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ4000 በታች እና ከ3000 በላይ ክብደት ያላቸው መኪኖች የተመረቱባቸው የተለያዩ ዓመታት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛ ፍጥነት ያለው መኪና የፈረስ ጉልበቱ ምን ያህል ነው?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛ ፍጥነት ያለው መኪና የፈረስ ጉልበቱ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እጅግ በጣም ጥሩ ፍጥነት ያለው የመኪና የፈረስ ጉልበት ምን ያህል ነው?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "select cars_data.mpg from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እጅግ በጣም ጥሩ ፍጥነት ያለው የመኪና የፈረስ ጉልበት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከVolvo መኪና model ፤ ትንሽ ፍጥነት ያለው የመኪና ስራት ስንት cylinders አሉት?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "select cars_data.cylinders from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = 'Volvo' and model_list.model = 'መኪና'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከVolvo መኪና model ፤ ትንሽ ፍጥነት ያለው የመኪና ስራት ስንት cylinders አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከVolvo መኪና model ፤ ትንሽ ፍጥነት ያለው የመኪና ስሪት ስንት cylinders አሉት?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "select cars_data.cylinders from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = 'Volvo' and model_list.model = 'መኪና'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከVolvo መኪና model ፤ ትንሽ ፍጥነት ያለው የመኪና ስሪት ስንት cylinders አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ትልቅ የፈረስ ጉልበት ካለው መኪና በላይ ምን ያህል መኪኖች ትልቅ ፍጥነት አላቸው?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "select model_list.model from model_list where model_list.maker = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ትልቅ የፈረስ ጉልበት ካለው መኪና በላይ ምን ያህል መኪኖች ትልቅ ፍጥነት አላቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ትልቅ የፈረስ ጉልበት ካላቸው መኪኖች ባላይ የበለጠ ፍጥነት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ትልቅ የፈረስ ጉልበት ካላቸው መኪኖች ባላይ የበለጠ ፍጥነት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ2 በላይ የመኪና አምራች ስንት አገሮች አሏቸው?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select count ( distinct continents.continent ) as num_continents from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ2 በላይ የመኪና አምራች ስንት አገሮች አሏቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ2 በላይ የመኪና አምራቾች ያሏቸው አገራት ቁጥር ስንት ነው?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select count ( distinct countries.countryid ) as num_countries from countries join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ2 በላይ የመኪና አምራቾች ያሏቸው አገራት ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ምን ያህል መኪናዎች ከ6 Cylinders በላይ አሏቸው?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select cars_data.id from cars_data where cars_data.cylinders = 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ምን ያህል መኪናዎች ከ6 Cylinders በላይ አሏቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ6 Cylinders በላይ ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( * ) from cars_data where cylinders = 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ6 Cylinders በላይ ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 Cylinders ካሏቸው መኪኖች ውስጥ የትኛው ሞዴል ትልቅ የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 Cylinders ካሏቸው መኪኖች ውስጥ የትኛው ሞዴል ትልቅ የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 Cylinders ካላቸው ሁሉም መሲኖች መሀል የትኛው ሞዴል ብዙ የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 Cylinders ካላቸው ሁሉም መሲኖች መሀል የትኛው ሞዴል ብዙ የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከዝቅተኛ በታች የፈረስ ጉልበት ካላቸው መኪኖች መካከል ከ3 Cylinders በላይ የሌላቸው የትኞቹ ናቸው? የመኪናውን አምራች መታወቂያ እና አምራች ስም ዘርዝር።", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders <= 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከዝቅተኛ በታች የፈረስ ጉልበት ካላቸው መኪኖች መካከል ከ3 Cylinders በላይ የሌላቸው የትኞቹ ናቸው? የመኪናውን አምራች መታወቂያ እና አምራች ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ዝቅተኛ የፈረስ ጉልበት ከሌላቸው መኪኖች መካከል ከ4 Cylinders በታች ያለው ሁሉም የመኪና አምራች መታወቂያ እና አምራች ስም ምንድን ናቸው?", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ዝቅተኛ የፈረስ ጉልበት ከሌላቸው መኪኖች መካከል ከ4 Cylinders በታች ያለው ሁሉም የመኪና አምራች መታወቂያ እና አምራች ስም ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 Cylinders ያለው ወይም ከ1980 በፊት የተመረተው መኪና በGallon የሚጓዘው ከፍተኛ mile ስንት ነው?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "select count ( * ) from cars_data where cylinders = 8 and year >= 1980 and mpg > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 Cylinders ያለው ወይም ከ1980 በፊት የተመረተው መኪና በGallon የሚጓዘው ከፍተኛ mile ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 Cylinders ከለው ወይም ከ1980 በፊት ተመርተው ከነበሩት መኪኖች ከፍተኛው mpg ስንት ነው?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "select count ( * ) from cars_data where cylinders = 8 and year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 Cylinders ከለው ወይም ከ1980 በፊት ተመርተው ከነበሩት መኪኖች ከፍተኛው mpg ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ Ford Motor Company ያልተመርቱ ከ3500 ያነሱ የመኪና models የትኞቹ ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.model from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'Ford Motor Company' limit 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( ford ) , car_makers.fullname ( Ford Motor Company ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( ford ) | car_names : car_names.makeid , car_names.model ( ford ) , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ Ford Motor Company ያልተመርቱ ከ3500 ያነሱ የመኪና models የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3500 ያነሱ ግን በ Ford Motors Company ያልተመረቱ የተለያዩ የመኪና models ምንድን ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.model from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'Ford Motors Company'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( ford ) , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( ford ) | car_names : car_names.makeid , car_names.model ( ford ) , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3500 ያነሱ ግን በ Ford Motors Company ያልተመረቱ የተለያዩ የመኪና models ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አንድም የመኪና አምራች የሌላቸው አገሮች እነማን ናቸው?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , car_names.make  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents  , countries  , car_makers  , model_list  , car_names  , cars_data where countries.continent = continents.contid and car_makers.country = countries.countryid and model_list.maker = car_makers.id and car_names.model = model_list.model and cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አንድም የመኪና አምራች የሌላቸው አገሮች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ምንም የመኪና አምራች የሌላቸው አገር ስማቸው  እነማን ነዉ?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select continents.continent from continents left join countries on countries.continent = continents.contid where countries.continent is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ምንም የመኪና አምራች የሌላቸው አገር ስማቸው  እነማን ነዉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 2 የመኪና models የሚያመርቱ እና ከ3 በላይ የመኪና ማምረቻ ያላቸው የመኪና አምራቾች እነማን ናቸው? መታወቂያ እና የአምራች ስም ዝርዝር።", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model from model_list where model_list.maker = 2 and model_list.modelid in ( select car_names.model from car_names where car_names.makeid in ( select cars_data.id from cars_data where cars_data.accelerate > 3 ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 2 የመኪና models የሚያመርቱ እና ከ3 በላይ የመኪና ማምረቻ ያላቸው የመኪና አምራቾች እነማን ናቸው? መታወቂያ እና የአምራች ስም ዝርዝር። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 2 models የሚያመርቱ እና ከ3 በላይ መኪኖችን የሚያመርቱ የሁሉም መኪና አምራቾች መታወቂያ እና አምራቾች ምንድናቸው?", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model from model_list group by model_list.model having count ( distinct model_list.maker ) = 2 and count ( distinct model_list.model ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 2 models የሚያመርቱ እና ከ3 በላይ መኪኖችን የሚያመርቱ የሁሉም መኪና አምራቾች መታወቂያ እና አምራቾች ምንድናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3 በላይ መኪና አምራች ያሏቸው ወይም የFiat model ያመረቱት አገሮች መታወቂያ እና ስም ማነው?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year  , car_names.make  , model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = 'Fiat'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3 በላይ መኪና አምራች ያሏቸው ወይም የFiat model ያመረቱት አገሮች መታወቂያ እና ስም ማነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ3 በላይ መኪና አምራች ያሏቸው ወይም የFiat model የሚያመርቱ የሁሉም አገሮች መታወቂያ እና ስሞች ምንድን ናቸው?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year  , model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = 'Fiat'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ3 በላይ መኪና አምራች ያሏቸው ወይም የFiat model የሚያመርቱ የሁሉም አገሮች መታወቂያ እና ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "flight_2", "question": "JetBlue Airway የየት አገር አየር መንገድ ነው?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airports.country from airlines join flights on airlines.airline = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### JetBlue Airway የየት አገር አየር መንገድ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "JetBlue Airway ከየት አገር ጋር ነው የተገናኘው?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airports.city from airlines join flights on airlines.airline = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### JetBlue Airway ከየት አገር ጋር ነው የተገናኘው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የJetBlue Airway አየር መንገድ ምህፃረ ቃል ምንድን ነው?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select flights.sourceairport from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airway'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የJetBlue Airway አየር መንገድ ምህፃረ ቃል ምንድን ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከJetBlue Airways የሚዛመደው የትኛው ምህፃረ ቃል ነው?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከJetBlue Airways የሚዛመደው የትኛው ምህፃረ ቃል ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በUSA ያሉ ሁሉንም የአየር መንገድ ስም እና ምህፃረ ቃል ዘርዘር::", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airports.airportname  , airports.city from airports where airports.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በUSA ያሉ ሁሉንም የአየር መንገድ ስም እና ምህፃረ ቃል ዘርዘር:: \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በUSA ውስጥ ያሉ አየር መንገዶች ስም እና ምህፃረ ቃል ምንድን ናቸው?", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airports.airportname from airports where airports.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በUSA ውስጥ ያሉ አየር መንገዶች ስም እና ምህፃረ ቃል ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAnthony ከተማ የአየር ማረፊያው Code እና ስም ዘርዝር::", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airlines.airline  , airlines.abbreviation  , airlines.country from airlines where airlines.uid = 'Anthony'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAnthony ከተማ የአየር ማረፊያው Code እና ስም ዘርዝር:: \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAnthony ከተማ ጋር የሚስማማውን የአየር መንገዱን መለያ ቁጥር እና ስም ሰጥ።", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = 'Anthony'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAnthony ከተማ ጋር የሚስማማውን የአየር መንገዱን መለያ ቁጥር እና ስም ሰጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት የአየር መንገዶች አሉን?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( distinct airports.airportcode ) as num_airports from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት የአየር መንገዶች አሉን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አጠቃላይ የአየር መንገዶች ብዛት በቁጥር ስንት ነው?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አጠቃላይ የአየር መንገዶች ብዛት በቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት የአየር መረፊያዎች አሉን?", "query": "select count ( * ) from airports", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት የአየር መረፊያዎች አሉን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአየር ማረፊያዎቻችን ቁጥር መልስ።", "query": "select count ( * ) from airports", "predicted_sql": "select airports.airportcode from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአየር ማረፊያዎቻችን ቁጥር መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት በረራዎች አሉን?", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት በረራዎች አሉን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የበረራዎችን ብዛት መልስ።", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የበረራዎችን ብዛት መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኛው አየር መንገድ የ UAL ምህፃረ ቃል አለው?", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select flights.sourceairport from flights join airlines on flights.airline = airlines.uid where airlines.abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation ( UAL ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኛው አየር መንገድ የ UAL ምህፃረ ቃል አለው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የUSA አየር መንገድን ምህፃረ ቃል ስጥ።", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select flights.sourceairport  , flights.destairport from flights join airports on flights.destairport = airports.airportcode where airports.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የUSA አየር መንገድን ምህፃረ ቃል ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከUSA ስንት አየር መንገዶች ናቸው?", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( * ) from airports where country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከUSA ስንት አየር መንገዶች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በUSA ውስጥ ያሉትን የአየር መንገደኞች ብዛት መልስ።", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( * ) from airlines where airlines.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በUSA ውስጥ ያሉትን የአየር መንገደኞች ብዛት መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የAlton አየር ማረፊያ የየትኛው ከተማ እና አገር ነው?", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.city  , airports.country from airports where airports.airportname = 'Alton'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የAlton አየር ማረፊያ የየትኛው ከተማ እና አገር ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ለAlton አየር ማረፊያ ከተማውን እና ሀገሩን ስጥ።", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.city  , airports.airportname  , airports.country from airports where airports.airportcode = 'ALN'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ለAlton አየር ማረፊያ ከተማውን እና ሀገሩን ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የAko አየር ማረፊያ ስም ምን ይባላል?", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'Ako'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የAko አየር ማረፊያ ስም ምን ይባላል? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "መለያ ቁጥሩ Ako የሆነውን አየር ማረፊያ ስም መልስ።", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airportname from airports where airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AKO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### መለያ ቁጥሩ Ako የሆነውን አየር ማረፊያ ስም መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAberdeen ከተማ የአየር ማረፊያ ስሞች እነማን ናቸው?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAberdeen ከተማ የአየር ማረፊያ ስሞች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAberdeen ከተማ ውስጥ የሚገኙ የአየር ማረፊያ ስሞች እነማን ናቸው?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAberdeen ከተማ ውስጥ የሚገኙ የአየር ማረፊያ ስሞች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG ስንት በረራዎች ይነሳሉ?", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from airlines where airlines.country = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG ስንት በረራዎች ይነሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG የሚነሱት በረራዎች ብዛት ቁጠር።", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from airlines where airlines.country = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG የሚነሱት በረራዎች ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ATO ምን የህል የበረራ መደረሻዎች አሉት?", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ATO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ATO ) , flights.destairport ( ATO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ATO ምን የህል የበረራ መደረሻዎች አሉት? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ ATO የሚገቡ በረራዎችን ብዛት ቁጠር።", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "select count ( * ) from airports where airportcode = 'ATO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ATO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ATO ) , flights.destairport ( ATO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ ATO የሚገቡ በረራዎችን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen ከተማ የሚነሱ በረራዎች ስንት ናቸው?", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen ከተማ የሚነሱ በረራዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen የሚነሱትን በረራዎች ብዛት መልስ።", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen የሚነሱትን በረራዎች ብዛት መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "Aberdeen ከተማ ስንት በረራዎች ይደርሳሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### Aberdeen ከተማ ስንት በረራዎች ይደርሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "Aberdeen የሚደርሱትን በረራዎች ብዛት መልስ።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### Aberdeen የሚደርሱትን በረራዎች ብዛት መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen ከተማ ስንት በረራዎች ተነስተው ወደ Ashley ከተማ መዳረሻ አላቸው?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports where airports.city = 'Aberdeen' and airports.country = 'Ashley'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Ashley ) , airports.airportcode , airports.airportname ( Ashley ) , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen ከተማ ስንት በረራዎች ተነስተው ወደ Ashley ከተማ መዳረሻ አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen ወደ Ashley ስንት በረራዎች ይበራሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Ashley ) , airports.airportcode , airports.airportname ( Ashley ) , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen ወደ Ashley ስንት በረራዎች ይበራሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "JetBlue Airways አየር መንገድ ስንት በረራዎች አሉት?", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select count ( * ) from airlines where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### JetBlue Airways አየር መንገድ ስንት በረራዎች አሉት? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የJetBlue Airways በረራዎች ቁጥር ስጥ።", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የJetBlue Airways በረራዎች ቁጥር ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ምን ያህል የUnited Airlines በረራዎች ወደ ASY አየር መንገድ ይሄዳሉ?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select flights.sourceairport from flights join airlines on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airlines.airline = 'United Airlines' and airports.city = 'ASY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ASY ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ASY ) , flights.destairport ( ASY ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ምን ያህል የUnited Airlines በረራዎች ወደ ASY አየር መንገድ ይሄዳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ ASY አየር ማረፊያ የሚደርሱትን የUnited Airlines በረራዎች ብዛት ቁጠር።", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select count ( * ) from flights join airlines on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airlines.airline = 'United Airlines' and airports.city = 'ASY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ASY ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ASY ) , flights.destairport ( ASY ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ ASY አየር ማረፊያ የሚደርሱትን የUnited Airlines በረራዎች ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAHD አየር ማረፊያ ስንት የUnited Airlines በረራዎች ይነሳሉ?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select count ( * ) from airlines where airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAHD አየር ማረፊያ ስንት የUnited Airlines በረራዎች ይነሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAHD አየር ማረፊያ የሚነሱትን የUnited Airlines በረራዎች ብዛት መልስ።", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select count ( * ) from airlines where airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAHD አየር ማረፊያ የሚነሱትን የUnited Airlines በረራዎች ብዛት መልስ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ Aberdeen ከተማ ምን የህል የUnited Airlines በረራዎች ይሄዳሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ Aberdeen ከተማ ምን የህል የUnited Airlines በረራዎች ይሄዳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ Aberdeen የሚደርሱትን የUnited Airlines በረራዎች ቁጠር።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.airline join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ Aberdeen የሚደርሱትን የUnited Airlines በረራዎች ቁጠር። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ የመድረሻ በረራዎች ያሉት የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city  , count ( distinct airports.airportcode ) as num_airports from airports group by airports.city order by num_airports desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ የመድረሻ በረራዎች ያሉት የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በጣም ተደጋጋሚ መድረሻ የአየር ማረፊያ የለው የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በጣም ተደጋጋሚ መድረሻ የአየር ማረፊያ የለው የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ የመነሻ በረራዎች ያሉት ከተማ የትኛው ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city  , count ( * ) as num_airports from airports group by airports.city order by num_airports desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ የመነሻ በረራዎች ያሉት ከተማ የትኛው ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ አየር ማረፊያ የሚገኘው የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports group by airports.city having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ አየር ማረፊያ የሚገኘው የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከፍተኛ የበረራ ቁጥር የለው የአየር ማረፊያ መለያ ቁጥር ምንድን ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "select airports.airportcode from airlines join flights on flights.airline = airlines.airline join airports on flights.destairport = airports.airportcode where airlines.uid = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከፍተኛ የበረራ ቁጥር የለው የአየር ማረፊያ መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በጣም ብዙ በረራዎች የሉት አየር ማረፊያ፤ የአየር ማረፊያው መለያ ቁጥር ስንት ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በጣም ብዙ በረራዎች የሉት አየር ማረፊያ፤ የአየር ማረፊያው መለያ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለው የአየር ማረፊያ መለያ ቁጥር ምንድን ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለው የአየር ማረፊያ መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አነስተኛ በረራዎች የሉትን የአየር ማረፊያ የመለያ ቁጥር ስጥ።", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode from airports where airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አነስተኛ በረራዎች የሉትን የአየር ማረፊያ የመለያ ቁጥር ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ በረራ ያለው የትኛው አየር መንገድ ነው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select flights.sourceairport  , count ( * ) as num_routes from flights group by flights.sourceairport order by num_routes desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ በረራ ያለው የትኛው አየር መንገድ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ በረራዎች የሚያስተናግደው የትኛው አየር መንገድ ነው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select flights.sourceairport  , count ( distinct flights.destairport ) as num_destinations from flights group by flights.sourceairport order by num_destinations desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ በረራዎች የሚያስተናግደው የትኛው አየር መንገድ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አነስተኛ የበረራ ቁጥር ያለውን አየር መንገድ ምህፃረቃል እና አገር ፈልግ።", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select flights.sourceairport  , flights.destairport from flights where flights.flightno = '12345'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አነስተኛ የበረራ ቁጥር ያለውን አየር መንገድ ምህፃረቃል እና አገር ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ጥቂት በረራዎች ያሉት አየር መንገድ ምህፃረ ቃል ምንድን ነው? የየት አገርስ ነው?", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ጥቂት በረራዎች ያሉት አየር መንገድ ምህፃረ ቃል ምንድን ነው? የየት አገርስ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAHD አየር ማረፊያ የሚነሱ አንዳንድ አየር መንገዶች እነማን ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAHD አየር ማረፊያ የሚነሱ አንዳንድ አየር መንገዶች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "መነሻቸው የAHD አየር ማረፊያ የሆነ አየር መንገዶች እነማን ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.country = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### መነሻቸው የAHD አየር ማረፊያ የሆነ አየር መንገዶች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "AHD አየር ማረፊያ መደረሻ ያላቸው የትኞቹ አየር መንገዶች ምንድናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AHD ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.destairport ( AHD ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### AHD አየር ማረፊያ መደረሻ ያላቸው የትኞቹ አየር መንገዶች ምንድናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "AHD አየር ማረፊያ መደረሻ ያላቸው የትኞቹ አየር መንገዶች ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AHD ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.destairport ( AHD ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### AHD አየር ማረፊያ መደረሻ ያላቸው የትኞቹ አየር መንገዶች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከሁለቱም APG እና CVO አየር ማረፊያ በረራ ያላቸው አየር መንገዶችን ፈልግ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select airports.airportname from airports where airports.country = 'Ethiopia' and airports.city = 'APG' or airports.city = 'CVO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከሁለቱም APG እና CVO አየር ማረፊያ በረራ ያላቸው አየር መንገዶችን ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከሁለቱም ከ APG እና CVO አየር ማረፊያዎች የሚነሱ በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select flights.sourceairport  , flights.destairport from flights where flights.sourceairport in ( 'APG'  , 'CVO' ) and flights.destairport in ( 'APG'  , 'CVO' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከሁለቱም ከ APG እና CVO አየር ማረፊያዎች የሚነሱ በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG ሳይሆን ከ CVO አየር ማረፊያ በረራ ያላቸውን ሁሉንም አየር መንገዶች ፈልግ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "select airports.airportname from airports where airports.country = 'CVO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( CVO ) , flights.destairport ( CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG ሳይሆን ከ CVO አየር ማረፊያ በረራ ያላቸውን ሁሉንም አየር መንገዶች ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG ሳይሆን ከ CVO አየር ማረፊያ መነሻ ያላቸው አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "select airports.airportname from airports where airports.country = 'CVO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( CVO ) , flights.destairport ( CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG ሳይሆን ከ CVO አየር ማረፊያ መነሻ ያላቸው አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ቢያንስ 10 በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ፈልግ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ቢያንስ 10 በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ቢያንስ 10 በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airports.airportname from airports order by airports.airportname desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ቢያንስ 10 በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ200 በታች በረራ ያላቸውን ሁሉንም የአየር መንገዶች ፈልግ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airlines.airline  , airlines.abbreviation  , airlines.country from airlines limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ200 በታች በረራ ያላቸውን ሁሉንም የአየር መንገዶች ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ200 የተኑ በረራ ያላቸው አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airports.airportname from airports limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ200 የተኑ በረራ ያላቸው አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የUnited Airlines አየር መንገድ የበረራ ቁጥሮች ምንድን ናቸው?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የUnited Airlines አየር መንገድ የበረራ ቁጥሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኞቹ የበረራ ቁጥሮች ከ United Airlines አየር መንገድ በረራዎች ጋር ይስማማሉ?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline ( United Airlines ) , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኞቹ የበረራ ቁጥሮች ከ United Airlines አየር መንገድ በረራዎች ጋር ይስማማሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG አየር ማረፊያ የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.country = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG አየር ማረፊያ የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAPG የሚነሱ በረራዎችን የበረራ ቁጥሮች ሰጥ።", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select flights.flightno from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAPG የሚነሱ በረራዎችን የበረራ ቁጥሮች ሰጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAPG አየር ማረፊያ የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select airports.airportcode from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airlines.country = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAPG አየር ማረፊያ የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAPG የሚያርፋትን በረራዎች የበረራ ቁጥር ስጥ።", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select flights.flightno from flights where flights.airline = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAPG የሚያርፋትን በረራዎች የበረራ ቁጥር ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen ከተማ የሚነሱ በረራዎች የበረራ ቁጥሮች ምንድን ናቸው?", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen ከተማ የሚነሱ በረራዎች የበረራ ቁጥሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከAberdeen የሚነሱ በረራዎችን የበረራ ቀጥሮች ስጥ።", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከAberdeen የሚነሱ በረራዎችን የበረራ ቀጥሮች ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ Aberdeen ከተማ ኮሚደርሱ በረራዎች የበረራ ቁጥሮች ምንድን ናቸው?", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ Aberdeen ከተማ ኮሚደርሱ በረራዎች የበረራ ቁጥሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "Aberdeen የሚደርሱትን በረራዎች የበረራ ቁጥር ስጥ።", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select airports.airportcode from airports where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### Aberdeen የሚደርሱትን በረራዎች የበረራ ቁጥር ስጥ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAberdeen ወይም Abilene ከተማ የሚያርፋ የበረራዎች ብዛት ፈልግ።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen' or city = 'Abilene'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Abilene ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAberdeen ወይም Abilene ከተማ የሚያርፋ የበረራዎች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በAberdeen ወይም Abilene ውስጥ ስንት በረራዎች ያርፍሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen' or city = 'Abilene'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city ( Abilene ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በAberdeen ወይም Abilene ውስጥ ስንት በረራዎች ያርፍሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የሚያርፍ እና የሚነሳ ምንም አይነት በረራ የሌላቸውን የአየር ማረፊያዎች ስም ፈልግ።", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports where airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የሚያርፍ እና የሚነሳ ምንም አይነት በረራ የሌላቸውን የአየር ማረፊያዎች ስም ፈልግ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የሚያርፍ እና የሚነሳ ምንም አይነት በረራዎች የሌላቸው የትኞቹ የአየር ማረፊያዎች ናቸው?", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportcode from airports left join flights on flights.destairport = airports.airportcode where flights.destairport is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የሚያርፍ እና የሚነሳ ምንም አይነት በረራዎች የሌላቸው የትኞቹ የአየር ማረፊያዎች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "employee_hire_evaluation", "question": "ስንት ተቀጣሪዎች አሉ?", "query": "select count ( * ) from employee", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስንት ተቀጣሪዎች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የተቀጣሪዎቹን ብዛት ቁጠር።", "query": "select count ( * ) from employee", "predicted_sql": "select count ( * ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የተቀጣሪዎቹን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የተቀጣሪዎቹን ስሞች በእድሜያቸው መሰረት በቅደም ተከተል ደርድር።", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የተቀጣሪዎቹን ስሞች በእድሜያቸው መሰረት በቅደም ተከተል ደርድር። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የተቀጠሪዎቹን ስም ዘርዝር እና በእድሜ ቅደም ተከተል ለይ።", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የተቀጠሪዎቹን ስም ዘርዝር እና በእድሜ ቅደም ተከተል ለይ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከእያንዳንዱ ከተማ የተቀጣሪዎች ብዛት ስንት ነው?", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select count ( * ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከእያንዳንዱ ከተማ የተቀጣሪዎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ለእያንዳንዱ ከተማ የተቀጣሪዎችን ብዛት ቁጠር።", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select count ( * ) from employee where city = 'Addis Ababa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ለእያንዳንዱ ከተማ የተቀጣሪዎችን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ30 አመት በታች የሆኑ ከአንድ በላይ ተቀጣሪዎች የመጡት ከየትኞቹ ከተሞች ነው?", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ30 አመት በታች የሆኑ ከአንድ በላይ ተቀጣሪዎች የመጡት ከየትኞቹ ከተሞች ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ30 አመት በታች የሆኑ ከአንድ በላይ ተቀጣሪዎች ያላቸውን ከተሞች ፈልግ።", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ30 አመት በታች የሆኑ ከአንድ በላይ ተቀጣሪዎች ያላቸውን ከተሞች ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ቦታ ላይ ያሉትን የሴቶች ብዛት ፈልግ።", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ቦታ ላይ ያሉትን የሴቶች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ቦታ ላይ ምን ያህል ሱቆች አሉ?", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select shop.name from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ቦታ ላይ ምን ያህል ሱቆች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የምርቶቹ ቁጥር ከፍተኛ የሆነውን ሱቅ ቅርንጫፍ እና ሀላፊ ፈልግ።", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የምርቶቹ ቁጥር ከፍተኛ የሆነውን ሱቅ ቅርንጫፍ እና ሀላፊ ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በመጠን ትልቁን የምርት ብዛት የሚሸጥ የሱቁ ሀላፊ ስም እና ወረዳ ምንድነው?", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select employee.name  , employee.city from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በመጠን ትልቁን የምርት ብዛት የሚሸጥ የሱቁ ሀላፊ ስም እና ወረዳ ምንድነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሁሉንም መደብር ምርቶች ዝቅተኛ እና ከፍተኛ ቁጥር ፈልግ።", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሁሉንም መደብር ምርቶች ዝቅተኛ እና ከፍተኛ ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁሉም ሱቆች ውስጥ ዝቅተኛው እና ከፍተኛው የምርት ብዛት ምን ያህል ነው?", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select count ( * ) as total_count from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁሉም ሱቆች ውስጥ ዝቅተኛው እና ከፍተኛው የምርት ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሁሉንም ሱቆች ስም፣ ቦታ እና ወረዳ በምርት ብዛት ከትልቅ ወደ ትንሽ በቅደም ተከተል መልስ።", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select employee.name  , employee.city  , shop.name  , shop.location  , shop.district from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሁሉንም ሱቆች ስም፣ ቦታ እና ወረዳ በምርት ብዛት ከትልቅ ወደ ትንሽ በቅደም ተከተል መልስ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ሁሉንም ሱቆች ባላቸው የምርት ብዛት መሰረት ከትልቅ ወደ ትንሽ ደርድር ፤ እና የእያንዳንዱን ሱቅ ስም፣ ቦታ እና ወረዳ መልስ።", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select employee.name  , employee.city  , shop.location  , shop.district from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ሁሉንም ሱቆች ባላቸው የምርት ብዛት መሰረት ከትልቅ ወደ ትንሽ ደርድር ፤ እና የእያንዳንዱን ሱቅ ስም፣ ቦታ እና ወረዳ መልስ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የምርት ብዛታቸው ከአማካይ የምርት ብዛት መጠን በላይ የሆኑትን ሱቆች ስም ፈልግ።", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የምርት ብዛታቸው ከአማካይ የምርት ብዛት መጠን በላይ የሆኑትን ሱቆች ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በምርት ብዛት ከአማካይ በላይ የሆኑት የትኞቹ ሱቆች ናቸው? የሱቆቹን ስሞች ሰጥ።", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በምርት ብዛት ከአማካይ በላይ የሆኑት የትኞቹ ሱቆች ናቸው? የሱቆቹን ስሞች ሰጥ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማ ጊዜ ሰአት ብዙ ጊዜ የተሸለመውን ሰራተኛ ስም ፈልግ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id where hiring.start_from > '2022-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማ ጊዜ ሰአት ብዙ ጊዜ የተሸለመውን ሰራተኛ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማዎች ጊዜ ብዙ ሽልማቶችን ያገኘው ተቀጣሪ የትኛው ነው? የተቀጣሪውን ስም ስጥ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop where shop.number_products > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማዎች ጊዜ ብዙ ሽልማቶችን ያገኘው ተቀጣሪ የትኛው ነው? የተቀጣሪውን ስም ስጥ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "እጅግ ከፍተኛውን የአንድ ጊዜ ጉርሻ ያገኘውን ተቀጣሪ ስም ፈልግ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee where employee.age = 25", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### እጅግ ከፍተኛውን የአንድ ጊዜ ጉርሻ ያገኘውን ተቀጣሪ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ትልቁን ጉርሻ የተቀበለው የትኛው ተቀጣሪ ነው? የተቀጣሪውን ስም ስጠኝ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select shop.name from shop where shop.location = 'ትልቁን ጉርሻ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ትልቁን ጉርሻ የተቀበለው የትኛው ተቀጣሪ ነው? የተቀጣሪውን ስም ስጠኝ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማው ሰአት ምንም አይነት ሽልማት ያለሸነፉ ተቀጣሪዎችን ስም ፈልግ።", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id where shop.district = 'ABC'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማው ሰአት ምንም አይነት ሽልማት ያለሸነፉ ተቀጣሪዎችን ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ምንም አይነት ግምገማ ያለገኙ ተቀጣሪዎች ስም ማን ይባላል?", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ምንም አይነት ግምገማ ያለገኙ ተቀጣሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከፍተኛ ቁጥር ያላቸውን ሰራተኞች እየቀጠረ ያለው ሱቅ ምን ይባላል?", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id where hiring.is_full_time = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከፍተኛ ቁጥር ያላቸውን ሰራተኞች እየቀጠረ ያለው ሱቅ ምን ይባላል? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከፍተኛ ተቀጣሪ ያለው ሱቅ የትኛው ነው? የሱቁን ስም ስጠኝ።", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከፍተኛ ተቀጣሪ ያለው ሱቅ የትኛው ነው? የሱቁን ስም ስጠኝ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ምንም አይነት ሰራተኛ የማይቀጥሩትን ሱቆች ስም ፈልግ።", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id where hiring.is_full_time = 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ምንም አይነት ሰራተኛ የማይቀጥሩትን ሱቆች ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ያለ ሰራተኛ የሚሰሩ ሱቆች የትኞቹ ናቸው? የሱቆቹን ስም ፈልግ።", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select shop.name from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ያለ ሰራተኛ የሚሰሩ ሱቆች የትኞቹ ናቸው? የሱቆቹን ስም ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ሱቅ ውስጥ የተቀጠሩትን የሰራተኞች ብዛት ፈልግ፡፡ የሱቁን ስም አሳይ።", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ሱቅ ውስጥ የተቀጠሩትን የሰራተኞች ብዛት ፈልግ፡፡ የሱቁን ስም አሳይ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ለእያንዳንዱ ሱቅ እዚያ የሚሰሩ ሰራተኞችን ብዛት እና የሱቁን ስም መልስ።", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select employee.name  , count ( * ) as total_count from employee join hiring on employee.employee_id = hiring.employee_id group by employee.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ለእያንዳንዱ ሱቅ እዚያ የሚሰሩ ሰራተኞችን ብዛት እና የሱቁን ስም መልስ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁሉም ግምገማዎች የተሰጠው አጠቃላይ ጉርሻ ስንት ነው?", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁሉም ግምገማዎች የተሰጠው አጠቃላይ ጉርሻ ስንት ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በ ሁሉም ግምገማዎች ጊዜ የተሰጠውን አጠቃላይ የጉርሻ መጠን ፈልግ።", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በ ሁሉም ግምገማዎች ጊዜ የተሰጠውን አጠቃላይ የጉርሻ መጠን ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ስለ ቅጥር ሁሉንም መረጃ ስጠኝ።", "query": "select * from hiring", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስለ ቅጥር ሁሉንም መረጃ ስጠኝ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ስለ ቅጥር ያለው ሁሉም መረጃ ምንድን ነው?", "query": "select * from hiring", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city  , shop.shop_id  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስለ ቅጥር ያለው ሁሉም መረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ3000 ያላነሱ ምርቶች እና ከ10000 በላይ ምርቶች ያላቸው መደብሮች ያሉት የትኛው ወረዳ ነው?", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select distinct shop.location from shop where shop.number_products >= 3000 and shop.number_products <= 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ3000 ያላነሱ ምርቶች እና ከ10000 በላይ ምርቶች ያላቸው መደብሮች ያሉት የትኛው ወረዳ ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁለቱም ከ3000 በታች የሆኑ ምርቶችን የሚሸጡ ሱቆች እና ከ10000 በላይ ምርቶችን የሚሸጡ ሱቆች ያሉባቸውን ወረዳዎች ፈልግ።", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select employee.name  , employee.age  , employee.city from employee where employee.age > 3000 and employee.age < 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁለቱም ከ3000 በታች የሆኑ ምርቶችን የሚሸጡ ሱቆች እና ከ10000 በላይ ምርቶችን የሚሸጡ ሱቆች ያሉባቸውን ወረዳዎች ፈልግ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ምን ያህል የተለያዩ የመደብር ቦታዎች አሉ?", "query": "select count ( distinct location ) from shop", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ምን ያህል የተለያዩ የመደብር ቦታዎች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የተለያዩ የመደብር በተዋት ብዛትን ቁጠር።", "query": "select count ( distinct location ) from shop", "predicted_sql": "select count ( * ) from hiring", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የተለያዩ የመደብር በተዋት ብዛትን ቁጠር። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ምን ያህል ሰነዶች አሉን?", "query": "select count ( * ) from documents", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ምን ያህል ሰነዶች አሉን? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዶቹን ብዛት ቁጠር።", "query": "select count ( * ) from documents", "predicted_sql": "select count ( * ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዶቹን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም ሰነዶች የሰንድ መታወቂያ ፣ የሰነድ ስም እና የሰነድ ዝርዝር መግለጫዎችን ዘርዝር፡፡", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም ሰነዶች የሰንድ መታወቂያ ፣ የሰነድ ስም እና የሰነድ ዝርዝር መግለጫዎችን ዘርዝር፡፡ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሁሉም ሰነዶች መታወቂያ ፣ ዝርዝር መግለጫ እና ስም ማነው?", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሁሉም ሰነዶች መታወቂያ ፣ ዝርዝር መግለጫ እና ስም ማነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በሰነድ መግለጫው ውስጥ W የሚለውን ፊደል የያዘው የሰነድ ስም እና ንጽፍ ማነው?", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'W'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በሰነድ መግለጫው ውስጥ W የሚለውን ፊደል የያዘው የሰነድ ስም እና ንጽፍ ማነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በሰነድ ዝርዝር መግለጫው ውስጥ W የሚለውን ፊደል የያዘውን ሰነድ ስም ሤና የንድፍ መታወቂያ መልስ።", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'W'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በሰነድ ዝርዝር መግለጫው ውስጥ W የሚለውን ፊደል የያዘውን ሰነድ ስም ሤና የንድፍ መታወቂያ መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Robbin CV የሚባለው ሰነድ የሰነድ መታወቂያ፣ የንድፍ መታወቂያ እና ዝርዝር መግለጫ ምንድን ነው?", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) | templates : templates.template_id , templates.version_number , templates.template_type_code ( CV ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Robbin CV የሚባለው ሰነድ የሰነድ መታወቂያ፣ የንድፍ መታወቂያ እና ዝርዝር መግለጫ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Robbin CV የሚባለውን ሰነድ የሰነድ መታወቂያ፣ የንድፍ መታወቂያ እና ዝርዝር መግለጫ መልስ።", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) | templates : templates.template_id , templates.version_number , templates.template_type_code ( CV ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Robbin CV የሚባለውን ሰነድ የሰነድ መታወቂያ፣ የንድፍ መታወቂያ እና ዝርዝር መግለጫ መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉም ሰነዶች ስንት የተለያዩ ንድፎች ይጠቀማሉ?", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉም ሰነዶች ስንት የተለያዩ ንድፎች ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዶቹ የተጠቀመውን የተለያዩ ንድፎች ቁጠር።", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዶቹ የተጠቀመውን የተለያዩ ንድፎች ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PPT የመለያ አይነት የሚጠቀሙት ሰነዶች ስንት ናቸው?", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PPT የመለያ አይነት የሚጠቀሙት ሰነዶች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PPT የንድፍ አይነት የሚጠቀሙትን ሰነዶች ቁጠር።", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PPT የንድፍ አይነት የሚጠቀሙትን ሰነዶች ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "እያንዳንዱን ንድፍ የሚጠቀሙትን ሰነዶች የንድፍ መታወቂያ ቁጥር አሳይ።", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### እያንዳንዱን ንድፍ የሚጠቀሙትን ሰነዶች የንድፍ መታወቂያ ቁጥር አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዶቹ አገልግሎት ላይ የዋሉት የተለያዩ ንድፎች ምንድን ናቸው? እና እያንዳንዳቸው ስንት ጊዜ አገልግሎት ላይ ውለዋል።", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_id  , documents.document_name  , documents.document_description  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዶቹ አገልግሎት ላይ የዋሉት የተለያዩ ንድፎች ምንድን ናቸው? እና እያንዳንዳቸው ስንት ጊዜ አገልግሎት ላይ ውለዋል። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በአብዛኞቹ ሰነዶች የተጠቀሙት የንድፎች መታወቂያ እና የመለያ አይነት ምንድን ነው?", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በአብዛኞቹ ሰነዶች የተጠቀሙት የንድፎች መታወቂያ እና የመለያ አይነት ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለአብዛኛው ሰነድ አገልግሎት ላይ የዋሉትን የንድፍ መታወቂያ እና መለያ አይነት መልስ።", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለአብዛኛው ሰነድ አገልግሎት ላይ የዋሉትን የንድፍ መታወቂያ እና መለያ አይነት መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለአንድ በላይ ሰነድ አገልግሎት የዋሉ የንድፍ መታወቂያዎችን አሳይ።", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለአንድ በላይ ሰነድ አገልግሎት የዋሉ የንድፍ መታወቂያዎችን አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከአንድ በላይ ሰነድ አገልግሎት ላይ የዋለ የትኛውም ንድፍ የንድፍ መታወቂያ ምንድን ነው?", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከአንድ በላይ ሰነድ አገልግሎት ላይ የዋለ የትኛውም ንድፍ የንድፍ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለየትኛውም ሰነድ አገልግሎት ላይ ያልዋለ ንድፍ መታወቂያ አሳይ፡፡", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለየትኛውም ሰነድ አገልግሎት ላይ ያልዋለ ንድፍ መታወቂያ አሳይ፡፡ \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በየትኛውም ሰነድ ውስጥ አገልግሎት ላይ ያልዋሉት የንድፎች መታወቂያ ምንድን ነው?", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በየትኛውም ሰነድ ውስጥ አገልግሎት ላይ ያልዋሉት የንድፎች መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ስንት ንድፎች አሉ?", "query": "select count ( * ) from templates", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ስንት ንድፎች አሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የንድፎቹን ብዛት ቁጠር።", "query": "select count ( * ) from templates", "predicted_sql": "select count ( * ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የንድፎቹን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም ንድፎች የንድፍ መታወቂያ ፣ የእትም ቁጥር እና የንድፍ መለያ አይነት አሰይ።", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም ንድፎች የንድፍ መታወቂያ ፣ የእትም ቁጥር እና የንድፍ መለያ አይነት አሰይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የእያንዳንዱ ንድፍ መታወቂያ የእትም ቁጥር እና መለያ አይነት ምንድን ነው?", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የእያንዳንዱ ንድፍ መታወቂያ የእትም ቁጥር እና መለያ አይነት ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም ንድፎች ሁሉም ልዩ የንድፍ መለያ አይነቶች አሳይ።", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም ንድፎች ሁሉም ልዩ የንድፍ መለያ አይነቶች አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የንድፍ መለያ አይነቶች እነማን ናቸው?", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የንድፍ መለያ አይነቶች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PP ወይም PTT የመለያ አይነት ያላቸው ንድፎች የንድፍ መታወቂያ ምንድን ነው?", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'PP' or ref_template_types.template_type_code = 'PTT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PP ወይም PTT የመለያ አይነት ያላቸው ንድፎች የንድፍ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PP ወይም PTT መለያ ያላቸውን ንድፎች መታወቂያ መልስ።", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PP ወይም PTT መለያ ያላቸውን ንድፎች መታወቂያ መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "CV የንድፍ መለያ አይነት ያላቸው ንድፎች ስነት ናቸው?", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) | templates : templates.template_id , templates.version_number , templates.template_type_code ( CV ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### CV የንድፍ መለያ አይነት ያላቸው ንድፎች ስነት ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የCV አይነት ንድፎችን ቁጠር።", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የCV አይነት ንድፎችን ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ5 ቀጥሎ የሚመጣ የእትም ቁጥር ያለውን ንድፍ የእትም ቁጥር እና የንድፍ መለያ ቁጥር አይነት ምንድን ነው?", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ5 ቀጥሎ የሚመጣ የእትም ቁጥር ያለውን ንድፍ የእትም ቁጥር እና የንድፍ መለያ ቁጥር አይነት ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ5 በላይ የእትም ቁጥር ያለውን ንድፍ የአትም ቁጥር እና የንድፍ መለያ ቁጥር አይነት መልስ።", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ5 በላይ የእትም ቁጥር ያለውን ንድፍ የአትም ቁጥር እና የንድፍ መለያ ቁጥር አይነት መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለእያንዳንዱ የንድፍ አይነት መለያ ቁጥር እና የንድፍ ብዛት አሳይ።", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( * ) as total_count from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለእያንዳንዱ የንድፍ አይነት መለያ ቁጥር እና የንድፍ ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የንድፍ አይነት መለያ ቁጥሮች ምንድን ናቸው?", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የንድፍ አይነት መለያ ቁጥሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የትኛው የንድፍ አይነት መለያ ቁጥር አብላጫ ንድፎች አሉት?", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የትኛው የንድፍ አይነት መለያ ቁጥር አብላጫ ንድፎች አሉት? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "አብዛኞቹ ንድፎች የሚገኙበትን የንድፍ አይነት መለያ ቁጥር መልስ።", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### አብዛኞቹ ንድፎች የሚገኙበትን የንድፍ አይነት መለያ ቁጥር መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ3 በታች ንድፍ ያላቸውን የንድፍ አይነት መለያ ቁጥር አሳይ።", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'ንድፍ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ3 በታች ንድፍ ያላቸውን የንድፍ አይነት መለያ ቁጥር አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ3 ንድፎች በታች ያላቸው የንድፍ አይት መለያ ቁጥር እነማን ናቸው?", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , documents.document_id from ref_template_types  , templates  , documents where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ3 ንድፎች በታች ያላቸው የንድፍ አይት መለያ ቁጥር እነማን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ትንሽ የእትም ቁጥር እና የንድፍ አይነት መለያ ቁጥር ያለው ማነው?", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ትንሽ የእትም ቁጥር እና የንድፍ አይነት መለያ ቁጥር ያለው ማነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የመጨረሻውን እትም ቁጥር ከሚስማማው የንድፍ አይነት መለያ ቁጥር ጋር መልስ።", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'ንድፍ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የመጨረሻውን እትም ቁጥር ከሚስማማው የንድፍ አይነት መለያ ቁጥር ጋር መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Data Base ከሚባለው ሰነድ ጋር አገልግሎት ላይ የዋለው ንድፍ የንድፍ አይነት መለያ ቁጥር ምንድን ነው?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Data base ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Data Base ከሚባለው ሰነድ ጋር አገልግሎት ላይ የዋለው ንድፍ የንድፍ አይነት መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Data Base ከሚባለው ሰነድ ጋር አገልግሎት ላይ የዋለውን ንድፍ የንድፍ አይነት መለያ ቁጥር መልስ።", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Data base ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Data Base ከሚባለው ሰነድ ጋር አገልግሎት ላይ የዋለውን ንድፍ የንድፍ አይነት መለያ ቁጥር መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "BK የንድፍ አይነት መለያ ቁጥር ያለውን ንድፍ የሚጠቀሙትን የሁሉንም ሰነዶች ስም አሳይ።", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### BK የንድፍ አይነት መለያ ቁጥር ያለውን ንድፍ የሚጠቀሙትን የሁሉንም ሰነዶች ስም አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "BK የንድፍ አይነት መለያ ቁጥር ያለዉን ንድፍ የሚጠቀሙት ሰነዶች ስም ማነው?", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### BK የንድፍ አይነት መለያ ቁጥር ያለዉን ንድፍ የሚጠቀሙት ሰነዶች ስም ማነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "እያንዳንዱን የሚጠቀሙትን የንድፍ አይነት መለያ ቁጥር እና የሰነዶች ብዛት አሳይ።", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### እያንዳንዱን የሚጠቀሙትን የንድፍ አይነት መለያ ቁጥር እና የሰነዶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የንድፍ አይነት መለያ ቁጥሮች እነማን ናቸው? እና ስንት ሰነዶች እያንዳንዱን አይነት ይጠቀማሉ?", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የንድፍ አይነት መለያ ቁጥሮች እነማን ናቸው? እና ስንት ሰነዶች እያንዳንዱን አይነት ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የትኛው የንድፍ አይነት መለያ ቁጥር በአብዛኛው ሰነድ ውስጥ ጥቅም ላይ ውሏል?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የትኛው የንድፍ አይነት መለያ ቁጥር በአብዛኛው ሰነድ ውስጥ ጥቅም ላይ ውሏል? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በተለመደ ሁኔታ በአብዛኛው ሰነድ ውስጥ ጥቅም ላይ የዋለውን የንድፍ አይነት መለያ ቁጥር መልስ።", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'ንድፍ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በተለመደ ሁኔታ በአብዛኛው ሰነድ ውስጥ ጥቅም ላይ የዋለውን የንድፍ አይነት መለያ ቁጥር መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በየትኛውም አይነት ሰነድ ጥቅም ላይ የልዋለ ሁሉንም የንድፍ አይነት መለያ ቁጥር አሳይ።", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በየትኛውም አይነት ሰነድ ጥቅም ላይ የልዋለ ሁሉንም የንድፍ አይነት መለያ ቁጥር አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለየትኛውም ሰነድ ጥቅም ላይ ያልዋለ የንድፍ አይነት መለያ ቁጥሮች ማናቸው?", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለየትኛውም ሰነድ ጥቅም ላይ ያልዋለ የንድፍ አይነት መለያ ቁጥሮች ማናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የንድፍ አይነት መለያ ቁጥር እና ዝርዝር መግለጫ አሳይ።", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የንድፍ አይነት መለያ ቁጥር እና ዝርዝር መግለጫ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም የንድፍ አይነቶች የ አይነት መለያ ቁጥሮች እና ዝርዝር መግለጫዎች እነማን ናቸው?", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_id  , documents.document_name  , documents.document_description  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም የንድፍ አይነቶች የ አይነት መለያ ቁጥሮች እና ዝርዝር መግለጫዎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለንድፍ አይነት መለያ ቁጥር AD የንድፍ አይነት ዝርዝር መግለጫ ምንድን ነው?", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( AD ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( AD ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለንድፍ አይነት መለያ ቁጥር AD የንድፍ አይነት ዝርዝር መግለጫ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "AD የንድፍ አይነት መለያ ቁጥር ያለዉን የንድፍ አይነት መግለጫ መልስ።", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( AD ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( AD ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### AD የንድፍ አይነት መለያ ቁጥር ያለዉን የንድፍ አይነት መግለጫ መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Book ለሚለው የንድፍ አይነት ዝርዝር መግለጫ የንድፍ መለያ ቁጥር ምንድን ነው?", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'Book'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Book ) | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Book ለሚለው የንድፍ አይነት ዝርዝር መግለጫ የንድፍ መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Book የሚል የንድፍ አይነት ዝርዝር መግለጫ ያለዉን የንጽፍ አይነት መለያ ቁጥር መልስ።", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_description = 'Book'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Book ) | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Book የሚል የንድፍ አይነት ዝርዝር መግለጫ ያለዉን የንጽፍ አይነት መለያ ቁጥር መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በየትኛውም አይነት ሰነድ ውስጥ ጥቅም ላይ ውለው የማያቁ ልዩ የንድፍ አይነት ዝርዝር መግለጫዎች እነማን ናቸው?", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በየትኛውም አይነት ሰነድ ውስጥ ጥቅም ላይ ውለው የማያቁ ልዩ የንድፍ አይነት ዝርዝር መግለጫዎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በሰነድ ውስጥ አገልግሎት ላይ የዋሉትን የተለያዩ የንድፍ ዝርዝር መግለጫዎችን መልስ።", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በሰነድ ውስጥ አገልግሎት ላይ የዋሉትን የተለያዩ የንድፍ ዝርዝር መግለጫዎችን መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Presentation የሚል የንድፍ አይነት ዝርዝር መግለጫ ያላቸው የንድፍ መታወቂያዎች እነማን ናቸው?", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'Presentation'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Presentation ) | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Presentation የሚል የንድፍ አይነት ዝርዝር መግለጫ ያላቸው የንድፍ መታወቂያዎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Presentation የሚል ብርዝር መግለጫ ካላቸው ንድፎች ጋር የሚመሳሰል መታወቂያዎችን መልስ።", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_id  , documents.document_name  , documents.document_description  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Presentation ) | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Presentation የሚል ብርዝር መግለጫ ካላቸው ንድፎች ጋር የሚመሳሰል መታወቂያዎችን መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በአጠቃላይ ስንት አንቀፆች አሉ?", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( * ) from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በአጠቃላይ ስንት አንቀፆች አሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአንቀፆቹን ብዛት ቁጠር።", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( * ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአንቀፆቹን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Summer Show የሚባለው ሰነድ ስንት አንቀፆች አሉት?", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select count ( distinct templates.template_id ) as number_of_templates from templates join documents on documents.template_id = templates.template_id where documents.document_name = 'Summer Show'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Summer Show ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Summer Show የሚባለው ሰነድ ስንት አንቀፆች አሉት? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Summer Show በሚባለው ሰነድ ውስጥ ያሉትን አንቀፆች ቁጠር።", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where documents.document_name = 'Summer Show'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Summer Show ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Summer Show በሚባለው ሰነድ ውስጥ ያሉትን አንቀፆች ቁጠር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Korea የሚል ፅሁፍ ያለዉን አንቀፅ የአንቀፅ ማብራሪያ አሳይ።", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where paragraphs.paragraph_text = 'Korea'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text ( Korea ) , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Korea የሚል ፅሁፍ ያለዉን አንቀፅ የአንቀፅ ማብራሪያ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Korea የሚለውን ፅሁፍ ያካተተው ከንቀፅ ማብራሪያ ምንድን ነው?", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select paragraph_text from paragraphs where paragraphs.other_details = 'Korea'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text ( Korea ) , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Korea የሚለውን ፅሁፍ ያካተተው ከንቀፅ ማብራሪያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Welcome to NY የሚል ስያሜ ያለዉን ሰነድ የአንቀፅ መታወቂያ እና ፅሁፍ አሳይ።", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Welcome to NY ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Welcome to NY የሚል ስያሜ ያለዉን ሰነድ የአንቀፅ መታወቂያ እና ፅሁፍ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Welcome to NY የሚል ርዕስ ያለው ሰነድ መታወቂያ እና የአንቀፅ ፅሁፍ ምንድን ነው?", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Welcome to NY ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Welcome to NY የሚል ርዕስ ያለው ሰነድ መታወቂያ እና የአንቀፅ ፅሁፍ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Customer reviews ለሚለው ሰነድ ሁሉንም የአንቀፅ ፅሁፎች ኣሳይ።", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Customer reviews ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Customer reviews ለሚለው ሰነድ ሁሉንም የአንቀፅ ፅሁፎች ኣሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Customer reviews የሚል ሰያሜ ያለዉ ሰነድ የአንቀፅ ፅሁፎች ምንድን ናቸው?", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Customer reviews'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name ( Customer reviews ) , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Customer reviews የሚል ሰያሜ ያለዉ ሰነድ የአንቀፅ ፅሁፎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በእያንዳንዱ ሰነድ ውስጥ ያሉትን ሁሉንም የሰነድ መታወቂያዎች እና የአንቀፅ ቁጥር አሳይ ፤ በሰነድ መታወቂያ የሚታዘዝ።", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በእያንዳንዱ ሰነድ ውስጥ ያሉትን ሁሉንም የሰነድ መታወቂያዎች እና የአንቀፅ ቁጥር አሳይ ፤ በሰነድ መታወቂያ የሚታዘዝ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የሰነድ ወታወቂያዎችን ከእያንዳንዱ የሚጣመሩበት የአንቀፅ ቁጥር ጋር መልስ፤ በመታወቂያ የሚታዘዝ።", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የሰነድ ወታወቂያዎችን ከእያንዳንዱ የሚጣመሩበት የአንቀፅ ቁጥር ጋር መልስ፤ በመታወቂያ የሚታዘዝ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በእያንዳንዱ ሰነድ ውስጥ ያሉትን የሰነድ መታወቂያ ስም እና የአንቀፅ ብዛት አሳይ።", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select ref_template_types.template_type_description  , count ( * ) as total_count from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id group by ref_template_types.template_type_description", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በእያንዳንዱ ሰነድ ውስጥ ያሉትን የሰነድ መታወቂያ ስም እና የአንቀፅ ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የእያንዳንዱ ሰነድ መታወቂያ እና ስም ማነው? እንዲሁም እያንዳንዱ የለው የአንቀፅ ብዛት ምን ያህል ነው?", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የእያንዳንዱ ሰነድ መታወቂያ እና ስም ማነው? እንዲሁም እያንዳንዱ የለው የአንቀፅ ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ቢያንስ 2 አንቀፅ ያላቸውን ሁሉንም የሰነድ መታወቂያዎች ዘርዝር።", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where ref_template_types.template_type_code = 'type1' or ref_template_types.template_type_code = 'type2'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ቢያንስ 2 አንቀፅ ያላቸውን ሁሉንም የሰነድ መታወቂያዎች ዘርዝር። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "2 እና ከዛበላይ አንቀፅ ያላቸው ሰነዶች መታወቂያ ምንድን ነው?", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 2 እና ከዛበላይ አንቀፅ ያላቸው ሰነዶች መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ትልቅ የእንቀፅ ብዛት ያለው የሰነድ መታወቂያ እና ስም ማነው?", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ትልቅ የእንቀፅ ብዛት ያለው የሰነድ መታወቂያ እና ስም ማነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከሁሉም ብዙ አንቀፅ ያለውን ሰነድ መታወቂያ እና ስም መልስ።", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከሁሉም ብዙ አንቀፅ ያለውን ሰነድ መታወቂያ እና ስም መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በጣም ትንሽ የአንቀጽ ብዛት ያለው ሰነድ መታወቂያ ምንድን ነው?", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select count ( * ) as total_count from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በጣም ትንሽ የአንቀጽ ብዛት ያለው ሰነድ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በጣም ትንሽ የአንቀፅ ብዛት ያለውን ሰነድ መታወቂያ መልስ።", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በጣም ትንሽ የአንቀፅ ብዛት ያለውን ሰነድ መታወቂያ መልስ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ1 እስከ 2 አንቀፆች ያሉት ሰነድ መታወቂያ ምንድን ነው?", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code in ( 1  , 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ1 እስከ 2 አንቀፆች ያሉት ሰነድ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በ1 እና በ 2 መካከል አንቀፆች ያሉትን ሰነዶች መታወቂያ ሰጥ።", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በ1 እና በ 2 መካከል አንቀፆች ያሉትን ሰነዶች መታወቂያ ሰጥ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአንቀጽ ፅሁፍ Brazil እና Ireland የሆነውን ሰንድ መታወቂያ አሳይ።", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Brazil' or ref_template_types.template_type_description = 'Ireland'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአንቀጽ ፅሁፍ Brazil እና Ireland የሆነውን ሰንድ መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "Brazil እና Ireland የሚል ፅሁፍ በአንቀፆቹ ያካተተው ሰነድ መታወቂያ ምንድን ነው?", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select documents.document_name  , documents.document_description  , paragraphs.paragraph_text from documents join templates on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where templates.template_type_code = ( select template_type_code from ref_template_types where template_type_description = 'Brazil' or template_type_description = 'Ireland' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### Brazil እና Ireland የሚል ፅሁፍ በአንቀፆቹ ያካተተው ሰነድ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "course_teach", "question": "ስንት መምህራሮች አሉ?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( * ) from course", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ስንት መምህራሮች አሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የአጠቃላይ መምህራሮች ቁጥር ስንት ነው?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( * ) from course_arrange", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የአጠቃላይ መምህራሮች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራኖች ስም በእድሜ ከትንሽ ወደ ትልቅ ዘርዝር።", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher order by teacher.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራኖች ስም በእድሜ ከትንሽ ወደ ትልቅ ዘርዝር። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በእድሜ ከትንሽ ወደ ትልቅ የተደረደሩት የአስተማሪዎች ስም ማነው?", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher where teacher.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በእድሜ ከትንሽ ወደ ትልቅ የተደረደሩት የአስተማሪዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የአስተማሪዎቹ እድሜ እና የትውልድ ሀገር ምንድን ነው?", "query": "select age , hometown from teacher", "predicted_sql": "select course.course_id  , course.staring_date  , course.course  , teacher.name  , teacher.age  , teacher.hometown  , course_arrange.grade from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የአስተማሪዎቹ እድሜ እና የትውልድ ሀገር ምንድን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የእያንዳንዱ መምህር እድሜ እና የትውልድ ሀገር ምንድነው?", "query": "select age , hometown from teacher", "predicted_sql": "select teacher.age  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id where teacher.name = 'እድሜ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የእያንዳንዱ መምህር እድሜ እና የትውልድ ሀገር ምንድነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትውልድ ሀገራቸው ከLittle Lever Urban District ያልሆኑትን መምህራን ስም ዘርዝር።", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.hometown = 'Little Lever Urban District'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትውልድ ሀገራቸው ከLittle Lever Urban District ያልሆኑትን መምህራን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትውልድ አገራቸው Little Lever Urban District ያልሆኑትን መምህራን ስም ማነው?", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.hometown = 'Little Lever Urban District'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown ( Little Lever Urban District ) | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትውልድ አገራቸው Little Lever Urban District ያልሆኑትን መምህራን ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "32 ወይም 33 አመት የሞላቸውን መምህራን ስም አሳይ።", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age >= 32 and teacher.age <= 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 32 ወይም 33 አመት የሞላቸውን መምህራን ስም አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "32 ወይም 33 አመት የሞላቸው መምህራን ስም ማነው?", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age in ( 32  , 33 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 32 ወይም 33 አመት የሞላቸው መምህራን ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በእድሜ ትንሹ አስተማሪ የትውልድ አገር ማነው?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በእድሜ ትንሹ አስተማሪ የትውልድ አገር ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በእድሜ ትንሹ አስተማሪ ከየት ነው?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.hometown from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በእድሜ ትንሹ አስተማሪ ከየት ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራኑን የተለያየ የትውልድ ሀገር እና ከእያንዳንዱ ሀገር ምን ያህል ምምህራን እንደመጡ አሳይ።", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራኑን የተለያየ የትውልድ ሀገር እና ከእያንዳንዱ ሀገር ምን ያህል ምምህራን እንደመጡ አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ከእያንዳንዱ የትውልድ ቦታ ስንት መምህራን አሉ?", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select count ( distinct teacher_id ) as num_teachers from course_arrange", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ከእያንዳንዱ የትውልድ ቦታ ስንት መምህራን አሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በጣም በተደጋጋሚ የሚገኙት የአስተማሪዎችን የትውልድ ቦታ ዘርዝር።", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በጣም በተደጋጋሚ የሚገኙት የአስተማሪዎችን የትውልድ ቦታ ዘርዝር። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ከመምህራኑ ውስጥ በጣም የተለመደ የትውልድ ቦታ ምንድ ነው?", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ከመምህራኑ ውስጥ በጣም የተለመደ የትውልድ ቦታ ምንድ ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ 2 መምህራን የሚጋሩትን የትውልድ ቦታዎች አሳይ።", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ 2 መምህራን የሚጋሩትን የትውልድ ቦታዎች አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ 2 መምህራን የመጡበት የትውልድ ቦታዎች ምንድን ናቸው?", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select course.course_id  , course.staring_date  , course.course  , teacher.teacher_id  , teacher.name  , teacher.age  , teacher.hometown  , course_arrange.grade from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where teacher.name = 'ቢያንስ' limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ 2 መምህራን የመጡበት የትውልድ ቦታዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራኑን ስም እና ሊያስታምሩ የተዘጋጁትን የትምህርት አይነት አሳይ።", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራኑን ስም እና ሊያስታምሩ የተዘጋጁትን የትምህርት አይነት አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የእያንዳንዱ መምህር ስም እና የሚያስተምሩት የትምህርት አይነት ምንድን ነው?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የእያንዳንዱ መምህር ስም እና የሚያስተምሩት የትምህርት አይነት ምንድን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ምምህራኑ እንዲያስተምሩ የተዘጋጁትን ትምህርት አይነት እና የመምህራኑን ስም በስማቸው ፊደላዊ ቅደም ተከተል ከትንሽ ወደ ትልቅ አሳይ።", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ምምህራኑ እንዲያስተምሩ የተዘጋጁትን ትምህርት አይነት እና የመምህራኑን ስም በስማቸው ፊደላዊ ቅደም ተከተል ከትንሽ ወደ ትልቅ አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "መምህራኑ እንዲያስተምሩ የተዘጋጁትን የትምህርት አይነት እና የመምህራኑ ስም ስማቸው ፊደላዊ ቅደም ተከተል መሰረት ከትንሽ ወደ ቅልቁ ምንድን ነው?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select course.course_id  , course.course  , teacher.name  , teacher.age  , teacher.hometown from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### መምህራኑ እንዲያስተምሩ የተዘጋጁትን የትምህርት አይነት እና የመምህራኑ ስም ስማቸው ፊደላዊ ቅደም ተከተል መሰረት ከትንሽ ወደ ቅልቁ ምንድን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ለሒሳብ የትምህርት አይነት የተመደበውን መምህር ስም አሳይ።", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ለሒሳብ የትምህርት አይነት የተመደበውን መምህር ስም አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ሒሳብ የትምህርት አይነት የሚያስተምሩት መምህራን ስም ማነው?", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ሒሳብ የትምህርት አይነት የሚያስተምሩት መምህራን ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "መምህራኑ የሚያስተምሩትን የትምህርት አይነት ፣ ብዛት እና ስማቸውን አሳይ፡፡", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### መምህራኑ የሚያስተምሩትን የትምህርት አይነት ፣ ብዛት እና ስማቸውን አሳይ፡፡ \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራኑ ስም እና የሚያስተምሩት የትምህርት አይነት ብዛት ምንድን ነው?", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course_arrange.course_id ) as course_count from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name order by course_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራኑ ስም እና የሚያስተምሩት የትምህርት አይነት ብዛት ምንድን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ 2 የትምህርት አይነት የሚናስታምሩትን መምህራን ስም አሳይ።", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher where teacher.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ 2 የትምህርት አይነት የሚናስታምሩትን መምህራን ስም አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ 2 የትምህርት አይነት የሚናስታምሩትን መምህራን ስም ማነው?", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher where teacher.age > 25 order by teacher.name asc limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ 2 የትምህርት አይነት የሚናስታምሩትን መምህራን ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትምህርት አይነቶችን እንዲያስተምሩ ያልተመደቡትን መምህራን ስም ዘርዝር።", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትምህርት አይነቶችን እንዲያስተምሩ ያልተመደቡትን መምህራን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትምህርት አይነቶችን እንዲያስተምሩ ያልተመደቡትን መምህራን ስም ማነው?", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትምህርት አይነቶችን እንዲያስተምሩ ያልተመደቡትን መምህራን ስም ማነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "museum_visit", "question": "ከ30 እድሜ በታች ያሉ ጎብኚዎች ስንት ናቸው?", "query": "select count ( * ) from visitor where age < 30", "predicted_sql": "select count ( * ) from visitor where age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ30 እድሜ በታች ያሉ ጎብኚዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 የሚባልጥ ጎብኚዎችን ስም ፈልግ፤ እና ውጤቱን በደረጃው መሰረት ከከፍተኛ ወደ ዝቅተኛ አስተካክል።", "query": "select name from visitor where level_of_membership > 4 order by level_of_membership desc", "predicted_sql": "select visitor.name  , visitor.level_of_membership  , visitor.age  , museum.name  , museum.num_of_staff  , museum.open_year from visitor join visit on visit.visitor_id = visitor.id join museum on visit.museum_id = museum.museum_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 የሚባልጥ ጎብኚዎችን ስም ፈልግ፤ እና ውጤቱን በደረጃው መሰረት ከከፍተኛ ወደ ዝቅተኛ አስተካክል። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 በላይ ያልሆነ የጎብኚዎች አማካይ እድሜ ስንት ነው?", "query": "select avg ( age ) from visitor where level_of_membership <= 4", "predicted_sql": "select count ( distinct visitor.age ) from visitor where visitor.level_of_membership = 'ጎብኚ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 በላይ ያልሆነ የጎብኚዎች አማካይ እድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 በላይ የሆኑትን ጎብኚዎች የአባልነት ደረጃ እና ስም ፈልግ፤ እና በአድ ሜያቸው መሰረት ስትልቅ ወደ ትንሽ ድርድር።", "query": "select name , level_of_membership from visitor where level_of_membership > 4 order by age desc", "predicted_sql": "select visitor.level_of_membership  , visitor.name from visitor where visitor.level_of_membership = 'አባልነት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 በላይ የሆኑትን ጎብኚዎች የአባልነት ደረጃ እና ስም ፈልግ፤ እና በአድ ሜያቸው መሰረት ስትልቅ ወደ ትንሽ ድርድር። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ብዙ የሠራተኞች አባል ያለውን ቤተ-መዘክር መታወቂያ እና ስም ፈልግ።", "query": "select museum_id , name from museum order by num_of_staff desc limit 1", "predicted_sql": "select museum.name  , museum.num_of_staff  , visitor.name  , visitor.level_of_membership from museum join visit on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id where museum.num_of_staff > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ብዙ የሠራተኞች አባል ያለውን ቤተ-መዘክር መታወቂያ እና ስም ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ2009 በፊት የተከፈተው ቤተ-መዘክር ውስጥ የሚሰሩትን ሰራተኞች አማካይ ብዛት ፈልግ።", "query": "select avg ( num_of_staff ) from museum where open_year < 2009", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ2009 በፊት የተከፈተው ቤተ-መዘክር ውስጥ የሚሰሩትን ሰራተኞች አማካይ ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "Plaza museum ተብሎ የሚጠራው ቤተ-መዘክር የመክፈቻ አመት እና የሠራተኞች ብዛት ምን ያህል ነው?", "query": "select num_of_staff , open_year from museum where name = 'Plaza Museum'", "predicted_sql": "select museum.open_year  , museum.num_of_staff from museum where museum.name = 'Plaza Museum'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name ( Plaza Museum ) , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### Plaza museum ተብሎ የሚጠራው ቤተ-መዘክር የመክፈቻ አመት እና የሠራተኞች ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በ2010 ከተከፈቱት ሁሉም ቤተ-መዘክሮች ዝቅተኛ ሠራተኞችን የመያዝ አቅም በላይ የሠራተኞች ቁጥር ያለውን ቤተ-መዘክር ስም ፈልግ።", "query": "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )", "predicted_sql": "select visitor.name from visitor where visitor.level_of_membership = 'ዝቅተኛ' and visitor.age >= 18 and visitor.age <= 65 and visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year >= 2010 ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በ2010 ከተከፈቱት ሁሉም ቤተ-መዘክሮች ዝቅተኛ ሠራተኞችን የመያዝ አቅም በላይ የሠራተኞች ቁጥር ያለውን ቤተ-መዘክር ስም ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የተወሰኑ ቤተ-መዘክሮች ከአንድ ጊዜ በላይ የ ጎበኙ ጎብኚዎችን ስም እና እድሜ ፈልግ።", "query": "select visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id having count ( * ) > 1", "predicted_sql": "select visitor.name  , visitor.age from visitor where visitor.level_of_membership = 'Gold'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የተወሰኑ ቤተ-መዘክሮች ከአንድ ጊዜ በላይ የ ጎበኙ ጎብኚዎችን ስም እና እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በሁሉም ቤተ-መዘክር ትኬቶች ላይ ከፍተኛ የገንዘብ መጠን ያወጡት ጎብኚዎች መታወቂያ ፣ ስም እና የአባልነት ደረጃ ምንድን ነው?", "query": "select visit.visitor_id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1", "predicted_sql": "select museum.name  , visitor.name  , visitor.level_of_membership  , visitor.age from museum join visit on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በሁሉም ቤተ-መዘክር ትኬቶች ላይ ከፍተኛ የገንዘብ መጠን ያወጡት ጎብኚዎች መታወቂያ ፣ ስም እና የአባልነት ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከሁሉም በላይ የተጎበኙት ቤተ-መዘክሮች መታወቂያ እና ስም ማነው?", "query": "select visit.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1", "predicted_sql": "select museum.museum_id  , museum.name  , visitor.name from museum join visit on museum.museum_id = visit.museum_id join visitor on visit.visitor_id = visitor.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከሁሉም በላይ የተጎበኙት ቤተ-መዘክሮች መታወቂያ እና ስም ማነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "እስካሁን ምንም ጎብኚ ያለገኘው ቤተ-መዘክር ስም ማነው?", "query": "select name from museum where museum_id not in ( select museum_id from visit )", "predicted_sql": "select museum.name from museum", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### እስካሁን ምንም ጎብኚ ያለገኘው ቤተ-መዘክር ስም ማነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በአንድ ጊዜ ከሁሉም በላይ ብዙ ትኬቶችን የገዙትን ጎብኚዎች ስም እና እድሜ ፈልግ።", "query": "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1", "predicted_sql": "select visitor.name  , visitor.age from visitor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በአንድ ጊዜ ከሁሉም በላይ ብዙ ትኬቶችን የገዙትን ጎብኚዎች ስም እና እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በሁሉም ጉብኝቶች የተገዙት ትኬቶች አማካይ እና ከፍተኛ ቁጥር ስንት ነው?", "query": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit", "predicted_sql": "select count ( * ) from museum", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በሁሉም ጉብኝቶች የተገዙት ትኬቶች አማካይ እና ከፍተኛ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው 1 የሆኑት ጎብኚዎች አጠቃላይ የትኬት ወጪ ስንት ነው?", "query": "select sum ( visit.total_spent ) from visitor join visit on visitor.id = visit.visitor_id where visitor.level_of_membership = 1", "predicted_sql": "select count ( distinct museum.open_year ) as num_of_unique_years from museum where museum.num_of_staff > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው 1 የሆኑት ጎብኚዎች አጠቃላይ የትኬት ወጪ ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ2009 በፊት የተከፈተውንም ከ 2011 በኋላ የተከፈተውንም ቤተ-መዘክር የጎበኘው ጎብኚ ስም ማነው?", "query": "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year > 2011", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ2009 በፊት የተከፈተውንም ከ 2011 በኋላ የተከፈተውንም ቤተ-መዘክር የጎበኘው ጎብኚ ስም ማነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የትኛውንም ከ 2010 በኋላ የተከፈተ ቤተ-መዘክር ያልጎበኙ የጎብኚዎች ብዛት ፈልግ።", "query": "select count ( * ) from visitor where id not in ( select visit.visitor_id from museum join visit on museum.museum_id = visit.museum_id where museum.open_year > 2010 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የትኛውንም ከ 2010 በኋላ የተከፈተ ቤተ-መዘክር ያልጎበኙ የጎብኚዎች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ 2013 በኋላ ወይም ከ 2008 በፊት ስንት መተ-መዝክሮች ተከፍተዋል?", "query": "select count ( * ) from museum where open_year > 2013 or open_year < 2008", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ 2013 በኋላ ወይም ከ 2008 በፊት ስንት መተ-መዝክሮች ተከፍተዋል? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "wta_1", "question": "አጠቃላይ የተጫዋቾችን ብዛት ፈልግ።", "query": "select count ( * ) from players", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### አጠቃላይ የተጫዋቾችን ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ስንት ተጫዋቾች አሉ?", "query": "select count ( * ) from players", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ስንት ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "አጠቃላይ የግጥሚያዎችን ብዛት ፈልግ።", "query": "select count ( * ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### አጠቃላይ የግጥሚያዎችን ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የግጥሚያዎችን ብዛት ቁጠር።", "query": "select count ( * ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የግጥሚያዎችን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "USA መለያ ካለዉ አገር የመጡትን የሁሉንም ተጨዋቾች የመጀመሪያ ስም እና የልደት ቀን ዘርዝር።", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players where players.country_code = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code ( USA ) | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc ( USA ) , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc ( USA ) , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### USA መለያ ካለዉ አገር የመጡትን የሁሉንም ተጨዋቾች የመጀመሪያ ስም እና የልደት ቀን ዘርዝር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከUSA የመጡት ተጫዋቾች የልደነት ቀን እና ስም ማነው?", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.birth_date  , players.first_name  , players.last_name from players where players.country_code = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከUSA የመጡት ተጫዋቾች የልደነት ቀን እና ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉንም ግጥሚያዎች አሸናፊዎች እና ተሸናፊዎች ከማካይ እድሜ ፈልግ።", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉንም ግጥሚያዎች አሸናፊዎች እና ተሸናፊዎች ከማካይ እድሜ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በመለው ግጥሚያ ውስጥ የአሸናፊዎች እና ተሸናፊዎች አማካይ እድሜ ስንት ነው?", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , count ( distinct players.player_id ) as total_players  , count ( distinct players.player_id ) as total_individuals from players group by players.first_name  , players.last_name  , players.birth_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በመለው ግጥሚያ ውስጥ የአሸናፊዎች እና ተሸናፊዎች አማካይ እድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ውስጥ የአሸናፊዎችን አማካይ ደረጃ ፈልግ።", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ውስጥ የአሸናፊዎችን አማካይ ደረጃ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ውስጥ የአሸናፊዎች ከማካይ ደረጃ ስንት ነው?", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select count ( distinct players.player_id ) as num_players from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ውስጥ የአሸናፊዎች ከማካይ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ውስጥ የተሽናፊዎችን ከፍተኛ የደረጃ ውጤት ፈልግ።", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ውስጥ የተሽናፊዎችን ከፍተኛ የደረጃ ውጤት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በመላው ግጥሚያዎች ውስጥ የትሽናፊዎች ጥሩ የሚባል ውጤት ስንት ነው?", "query": "select min ( loser_rank ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በመላው ግጥሚያዎች ውስጥ የትሽናፊዎች ጥሩ የሚባል ውጤት ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለሁሉም ተጫዋቾች ልዩ ልዩ የሀገር መለያ ቁጥር ብዛት ፈልግ።", "query": "select count ( distinct country_code ) from players", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለሁሉም ተጫዋቾች ልዩ ልዩ የሀገር መለያ ቁጥር ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ተጫዋቾቹ ከስንት ልዩ አገራት ነው የመጡት?", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select count ( distinct players.country_code ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ተጫዋቾቹ ከስንት ልዩ አገራት ነው የመጡት? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የተሸናፊዎችን ልዩ መጠሪያ ስም ብዛት ፈልግ።", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የተሸናፊዎችን ልዩ መጠሪያ ስም ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ስንት የተለያዩ የተሸናፊ ስሞች አሉ?", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ስንት የተለያዩ የተሸናፊ ስሞች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ10 በላይ ግጥሚያዎችን ያካሄደ የተወዳዳሪ ስም ፈልግ።", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select players.first_name  , players.last_name from players order by players.player_id desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ10 በላይ ግጥሚያዎችን ያካሄደ የተወዳዳሪ ስም ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ10 በላይ ግጥሚያዎችን ያካሄዱ ውድድሮች ስም እነማን ናቸው?", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select players.first_name  , players.last_name from players limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ10 በላይ ግጥሚያዎችን ያካሄዱ ውድድሮች ስም እነማን ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013'ም በ2016'ም የተጫወቱ የሁሉንም አሸናፊዎች ስም ዘርዝር።", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_date between '2013-01-01' and '2016-12-31'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013'ም በ2016'ም የተጫወቱ የሁሉንም አሸናፊዎች ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁለቱም 2013 እና 2016 ያሸነፉ ተጫዋቾች ስም ማነው?", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year between 2013 and 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁለቱም 2013 እና 2016 ያሸነፉ ተጫዋቾች ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013 ወይም 2016 የተካሄዱ ሁሉንም ግጥሚያዎች ብዛት ዘርዝር።", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( * ) from matches where tourney_date >= 2013 and tourney_date <= 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013 ወይም 2016 የተካሄዱ ሁሉንም ግጥሚያዎች ብዛት ዘርዝር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013 ወይም 2016 የተከሄዱ ግጥሚያዎች ስንት ናቸው?", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( distinct matches.match_num ) from matches where matches.year between 2013 and 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013 ወይም 2016 የተከሄዱ ግጥሚያዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁለቱም በAustralian Open እና በ WTA Championships  ውድድር ላይ ያሸነፉት ተጫዋቾች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name ( WTA Championships ) , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁለቱም በAustralian Open እና በ WTA Championships  ውድድር ላይ ያሸነፉት ተጫዋቾች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ሁለቱንም Australian Open እና WTA Championships ውድድር የሸነፉ ተጫዋቾች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "select matches.tourney_name from matches where matches.tourney_name = 'Australian Open' or matches.tourney_name = 'WTA Championships'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ሁለቱንም Australian Open እና WTA Championships ውድድር የሸነፉ ተጫዋቾች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በእድሜ ትልቁን ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ፈልግ።", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.player_id  , players.country_code  , matches.tourney_name  , matches.tourney_id from players join matches on matches.winner_id = players.player_id where players.birth_date >= '1990-01-01' and players.birth_date <= '1999-12-31'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በእድሜ ትልቁን ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የእድሜ ትልቁ ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው?", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የእድሜ ትልቁ ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በልደት ቀናቸው መሰረት የሁሉንም ተጫዋቾች የመጀመሪያ ስም እና የአባት ስም ዘርዝር።", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በልደት ቀናቸው መሰረት የሁሉንም ተጫዋቾች የመጀመሪያ ስም እና የአባት ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በልደት ቀናቸው መሰረት ተደርድሮ፤ የሁሉም ተጫዋቾች ሙሉ ስም ማነው?", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በልደት ቀናቸው መሰረት ተደርድሮ፤ የሁሉም ተጫዋቾች ሙሉ ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ሁሉንም የግራኝ ተጫዋቾች የመጀመሪያ እና የአባት ስም በልደት ቀናቸው መሰረት ዘርዝር።", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ሁሉንም የግራኝ ተጫዋቾች የመጀመሪያ እና የአባት ስም በልደት ቀናቸው መሰረት ዘርዝር። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በልደት ቀናቸው መሰረት የግራኞቹ ተጫዋቾች ሙሉ ስም ማነው?", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players where players.hand = 'Left'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በልደት ቀናቸው መሰረት የግራኞቹ ተጫዋቾች ሙሉ ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ ብዙ ጉብኝት ያደረገውን ተጫዋች የማጀመሪያ ስም እና የአገር መለያ ቁጥር ፈልግ።", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.player_id  , players.country_code  , matches.match_num  , matches.tourney_name  , matches.tourney_id  , matches.surface  , matches.round  , matches.score  , matches.winner_name  , matches.winner_id  , matches.winner_rank  , matches.winner_rank_points  , matches.loser_name  , matches.loser_id  , matches.loser_rank  , matches.loser_rank_points  , rankings.ranking_date  , rankings.ranking  , rankings.ranking_points from players join matches on matches.winner_id = players.player_id or matches.loser_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ ብዙ ጉብኝት ያደረገውን ተጫዋች የማጀመሪያ ስም እና የአገር መለያ ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ ጉብኝት የደረገው ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው?", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ ጉብኝት የደረገው ተጫዋች የመጀመሪያ ስም እና የአገር መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ ብዙ ግጥሚያዎች የተካሄደበትን አመት ፈልግ።", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select players.birth_date from players where players.birth_date > 1990", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ ብዙ ግጥሚያዎች የተካሄደበትን አመት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ ግጥሚያዎች ያለዉ አመት የትኛው ነው?", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select max ( year ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ ግጥሚያዎች ያለዉ አመት የትኛው ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ ብዙ ጊዜ ያሸነፈው አሸናፊ ስም እና የደረጃ ነጥብ ፈልግ።", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_id  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_id  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year  , rankings.ranking_date  , rankings.ranking  , rankings.ranking_points  , rankings.tours from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ ብዙ ጊዜ ያሸነፈው አሸናፊ ስም እና የደረጃ ነጥብ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ ብዙ ግጥሚያዎችን ያሸነፈው አሸናፊ ስም ማነው ፤ እና ይህ ተጫዋች ስንት የደረጀ ነጥቦች አሉት?", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ ብዙ ግጥሚያዎችን ያሸነፈው አሸናፊ ስም ማነው ፤ እና ይህ ተጫዋች ስንት የደረጀ ነጥቦች አሉት? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በAustralian Open tourney የተሳተፈው እና ከፍተኛ የደረጀ ነጥብ ያለውን ተጫዋች ስም ፈልግ።", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.tourney_name = 'Australian Open' and matches.round = 'Final'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በAustralian Open tourney የተሳተፈው እና ከፍተኛ የደረጀ ነጥብ ያለውን ተጫዋች ስም ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በAustralian Open tourney የተሳተፈው እና ከሁሉም በላይ የደረጃ ነጥብ ያለው አሸናፊ ስም ማነው?", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select tourney_name from matches where tourney_id = 'Australian Open'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በAustralian Open tourney የተሳተፈው እና ከሁሉም በላይ የደረጃ ነጥብ ያለው አሸናፊ ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከፍተኛ ሰአት ባለው ውድድር ላይ የተጫወቱትን አሸናፊዎች እና ተሸናፊዎች ስም ፈልግ።", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከፍተኛ ሰአት ባለው ውድድር ላይ የተጫወቱትን አሸናፊዎች እና ተሸናፊዎች ስም ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም ረጅም ጊዜ በሚፈጀው ግጥሚያ ውስጥ የተጫወቱ አሸናፊዎች ስም ማነው?", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም ረጅም ጊዜ በሚፈጀው ግጥሚያ ውስጥ የተጫወቱ አሸናፊዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የእየንዳንዱን ተጫዋች የመጀመሪያ ስም እና አማካይ ያገኙትን ደረጃ ፈልግ።", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የእየንዳንዱን ተጫዋች የመጀመሪያ ስም እና አማካይ ያገኙትን ደረጃ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ተጫዋቾች የመጀመሪያ ስም እና የሚያገኙት አማካይ ደረጃ ስንት ነው?", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ተጫዋቾች የመጀመሪያ ስም እና የሚያገኙት አማካይ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የእያንዳንዱን ተጫዋች የመጀመሪያ ስም እና አጠቃላይ የደረጃ ነጥብ ፈልግ።", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የእያንዳንዱን ተጫዋች የመጀመሪያ ስም እና አጠቃላይ የደረጃ ነጥብ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ተጫዋቾች የመጀመሪያ ስም እና አጠቃላይ የደረጃ ነጥብ ስንት ነው?", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ተጫዋቾች የመጀመሪያ ስም እና አጠቃላይ የደረጃ ነጥብ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የእያንዳንዱን አገር የተጫዋቾች ብዛት ፈልግ።", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select count ( * ) from matches where tourney_id = 'USO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የእያንዳንዱን አገር የተጫዋቾች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ስእያንዳንዱ አገር ስንት ተጫዋቾች አሉ?", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select count ( distinct country_code ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ስእያንዳንዱ አገር ስንት ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ትልቅ የተጫዋች ብዛት ያለዉን አገር መለያ ቁጥር ፈልግ።", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.player_id from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ትልቅ የተጫዋች ብዛት ያለዉን አገር መለያ ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከሁሉም በላይ የተጫዋች ብዛት ያለው አገር መለያ ቁጥር ምንድን ነው?", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከሁሉም በላይ የተጫዋች ብዛት ያለው አገር መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ50 ተጫዋቾች በላይ ያላቸውን አገራት መለያ ቁጥር ፈልግ።", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.player_id from players limit 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ50 ተጫዋቾች በላይ ያላቸውን አገራት መለያ ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ50 ተጫዋቾች በላይ ያላቸው አገራት መለያ ቁጥር ምንድን ነው?", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.player_id from players limit 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ50 ተጫዋቾች በላይ ያላቸው አገራት መለያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የደረጃ ቀን አጠቃላይ የጉብኝት ብዛት ፈልግ።", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select matches.tourney_date  , count ( * ) as num_matches from matches where matches.tourney_date = '2021-01-01' group by matches.tourney_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የደረጃ ቀን አጠቃላይ የጉብኝት ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ ደረጃ መመዝገቢያ ቀን አጠቃላይ የጉብኝት ብዛት ምን ያህል ነው?", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select rankings.ranking_points from rankings where rankings.ranking_date = 'አጠቃላይ የጉብኝት ቀን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ ደረጃ መመዝገቢያ ቀን አጠቃላይ የጉብኝት ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በየአመቱ የሚካሄዱ ግጥሚያዎችን ብዛት ፈልግ።", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በየአመቱ የሚካሄዱ ግጥሚያዎችን ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በየአመቱ ስንት ግጥሚያዎች ተጫውተዋል?", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( distinct matches.match_num ) as num_matches from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በየአመቱ ስንት ግጥሚያዎች ተጫውተዋል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በመላው ግጥሚያዎች በእድሜ ትንሽ የሆኑ 3 ተጫዋቾችን ስም እና ደረጃ ፈልግ።", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players order by players.birth_date desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በመላው ግጥሚያዎች በእድሜ ትንሽ የሆኑ 3 ተጫዋቾችን ስም እና ደረጃ ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከመለው ግጥሚያዎች በእድሜ ትንሹ ተጫዋች ስም እና ደረጃ ምንድን ነው?", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከመለው ግጥሚያዎች በእድሜ ትንሹ ተጫዋች ስም እና ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ግራኝ የሆኑ እና WTA Chompionship ውድድር ላይ የተሳተፉ አሸናፊዎች ብዛት ስንት ነው?", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select count ( * ) from matches where tourney_name = 'ግራኝ' or tourney_name = 'WTA Chompionship'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ግራኝ የሆኑ እና WTA Chompionship ውድድር ላይ የተሳተፉ አሸናፊዎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በWTA Chompionship ውድድር ላይ የተሳተፉትን ግራኝ የሆኑ አሸናፊዎች ብዛት ፈልግ።", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select count ( * ) from matches where tourney_name = 'WTA Championship'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በWTA Chompionship ውድድር ላይ የተሳተፉትን ግራኝ የሆኑ አሸናፊዎች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ከፍተኛ ደረጃ ነጥብ ያለውን አሸናፊ የመጀመሪያ ስም፣ የአገር መለያ ቁጥር እኛ የልደት ቀን ፈልል።", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ከፍተኛ ደረጃ ነጥብ ያለውን አሸናፊ የመጀመሪያ ስም፣ የአገር መለያ ቁጥር እኛ የልደት ቀን ፈልል። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በመላው ግጥሚያዎች ከሁሉም በላይ የአሸናፊነት ደረጃ ያለው ተጫዋች የመጀመሪያ ስም፣ የአገር መለያ ቁጥር እና የልደት ቀን ምንድን ነው?", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በመላው ግጥሚያዎች ከሁሉም በላይ የአሸናፊነት ደረጃ ያለው ተጫዋች የመጀመሪያ ስም፣ የአገር መለያ ቁጥር እና የልደት ቀን ምንድን ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የእጅ አይነት የተጫዋቾች ብዛት ፈልግ።", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select count ( * ) from players group by hand", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የእጅ አይነት የተጫዋቾች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከእናንዳንድ የእጅ አይነት ስንት ተጫዋቾች አሉ?", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select count ( distinct players.hand ) as num_hand_types from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከእናንዳንድ የእጅ አይነት ስንት ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "battle_death", "question": "Captured የተደረጉት መርከቦች ብዛት ስንት ነው?", "query": "select count ( * ) from ship where disposition_of_ship = 'Captured'", "predicted_sql": "select count ( * ) from ship where disposition_of_ship = 'Captured'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship ( Captured ) | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### Captured የተደረጉት መርከቦች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "እየቀነሰ የሚሄድ የስም ፊደላዊ ቅደም ተከተል መሰረት ስም እና ጠቅላላ የጭነት ክብደት ዘርዝር።", "query": "select name , tonnage from ship order by name desc", "predicted_sql": "select battle.name  , battle.date  , ship.name  , ship.tonnage  , ship.ship_type  , ship.location  , death.note  , death.killed  , death.injured from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### እየቀነሰ የሚሄድ የስም ፊደላዊ ቅደም ተከተል መሰረት ስም እና ጠቅላላ የጭነት ክብደት ዘርዝር። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "የእያንዳንዱን ጦርነት ስም ፣ ቀን እና ውጤት ዘርዝር።", "query": "select name , date from battle", "predicted_sql": "select battle.name  , battle.date  , ship.name  , ship.tonnage  , death.note from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### የእያንዳንዱን ጦርነት ስም ፣ ቀን እና ውጤት ዘርዝር። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በእያንዳንዱ ጊዜ የተፈጠረው ከፍተኛ እና ዝቅተኛ የሞት ጉዳት ስንት ነው?", "query": "select max ( killed ) , min ( killed ) from death", "predicted_sql": "select count ( death.id ) from death where death.note = 'severe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በእያንዳንዱ ጊዜ የተፈጠረው ከፍተኛ እና ዝቅተኛ የሞት ጉዳት ስንት ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በእናንዳንዱ ጊዜ የተፈጠረው አማካይ የቁስለት ብዛት ስንት ነው?", "query": "select avg ( injured ) from death", "predicted_sql": "select count ( * ) as total_deaths from death", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በእናንዳንዱ ጊዜ የተፈጠረው አማካይ የቁስለት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "t በሚባል አጠቃላይ የጭነት ክብደት ባለው መርከብ የተፈጠረው የሞት እና የቁስለት አጋጣሚ ምንድን ነው?", "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'", "predicted_sql": "select battle.name  , battle.date  , death.note  , death.killed  , death.injured from battle join death on death.caused_by_ship_id = battle.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### t በሚባል አጠቃላይ የጭነት ክብደት ባለው መርከብ የተፈጠረው የሞት እና የቁስለት አጋጣሚ ምንድን ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "የBulgarian አዛዥ Boril ባልነበረበት ጊዜ የጦርነቱ ስም እና ውጤቱ ምንድን ነው?", "query": "select name , result from battle where bulgarian_commander != 'Boril'", "predicted_sql": "select battle.name  , battle.date from battle where battle.bulgarian_commander = 'Boril'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander ( Boril ) , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### የBulgarian አዛዥ Boril ባልነበረበት ጊዜ የጦርነቱ ስም እና ውጤቱ ምንድን ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በጦርነት የተሸነፉ የትኛውም የ Brig አይነት መርከቦች ልዩ ልዩ መታወቂያዎች እና ስሞች ምንድን ናቸው?", "query": "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'", "predicted_sql": "select ship.name  , ship.ship_type from ship where ship.ship_type = 'Brig'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type ( Brig ) , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በጦርነት የተሸነፉ የትኛውም የ Brig አይነት መርከቦች ልዩ ልዩ መታወቂያዎች እና ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በአጠቃላይ ከ10 በላይ የተገደሉበት ጦርነት መታወቂያ እና ስም ምንድናቸው?", "query": "select battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id group by battle.id having sum ( death.killed ) > 10", "predicted_sql": "select battle.name  , battle.result from battle order by battle.date desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በአጠቃላይ ከ10 በላይ የተገደሉበት ጦርነት መታወቂያ እና ስም ምንድናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በአጠቃላይ ከፍተኛ ጉዳት ያስከተለው የመርከብ መታወቂያ እና ስም ምንድን ነው?", "query": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በአጠቃላይ ከፍተኛ ጉዳት ያስከተለው የመርከብ መታወቂያ እና ስም ምንድን ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በ Bulgaria አዛዥ Kaloyon እና በ Latin አዛዥ Baldwin l መካከል ያሉት ልዩ ልዩ የውጊያ ስሞች ምንድን ናቸው?", "query": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'", "predicted_sql": "select ship.name from battle join ship on ship.lost_in_battle = battle.id where battle.bulgarian_commander = 'Kaloyan' or battle.latin_commander = 'Baldwin I'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander ( Kaloyan ) , battle.latin_commander ( Baldwin I ) , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በ Bulgaria አዛዥ Kaloyon እና በ Latin አዛዥ Baldwin l መካከል ያሉት ልዩ ልዩ የውጊያ ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ለጦርነቶቹ ምን ያህል የተለያዩ ውጤቶች አሉ?", "query": "select count ( distinct result ) from battle", "predicted_sql": "select battle.id  , battle.name  , battle.date  , battle.bulgarian_commander  , battle.latin_commander  , battle.result from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ለጦርነቶቹ ምን ያህል የተለያዩ ውጤቶች አሉ? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "225 tonnage ያላት መርከብ ስንት ጦርነቶችን አልተሸነፈችም።", "query": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )", "predicted_sql": "select ship.name from ship where ship.tonnage = 225", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### 225 tonnage ያላት መርከብ ስንት ጦርነቶችን አልተሸነፈችም። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "Lettice እና HMS Atalanta የተሰኘው መርከብ የተሸነፉትን ጦርነት ስም እና ቀን ዘርዝር።", "query": "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta'", "predicted_sql": "select battle.name  , battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = 'HMS Atalanta' or ship.name = 'Lettice'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name ( HMS Atalanta , Lettice ) , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### Lettice እና HMS Atalanta የተሰኘው መርከብ የተሸነፉትን ጦርነት ስም እና ቀን ዘርዝር። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በEnglish Channel ምንም መርከቦች ያልተሸነፉባቸው ጦርነቶች የ Bulgaria አዛዦች ስሞችን እና ውጤቶችን አሳይ።", "query": "select name , result , bulgarian_commander from battle except select battle.name , battle.result , battle.bulgarian_commander from battle join ship on battle.id = ship.lost_in_battle where ship.location = 'English Channel'", "predicted_sql": "select battle.name  , battle.date  , battle.bulgarian_commander  , battle.latin_commander  , battle.result from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id where ship.location = 'English Channel' and battle.bulgarian_commander = 'Bulgaria'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በEnglish Channel ምንም መርከቦች ያልተሸነፉባቸው ጦርነቶች የ Bulgaria አዛዦች ስሞችን እና ውጤቶችን አሳይ። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "East የሚል ንዑስ ቅጥያ የያዘው የሞት ክስተት ማስታወሻዎች ምንድን ናቸው?", "query": "select note from death where note like '%East%'", "predicted_sql": "select battle.name  , battle.date  , death.note from battle join death on death.caused_by_ship_id = battle.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### East የሚል ንዑስ ቅጥያ የያዘው የሞት ክስተት ማስታወሻዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "student_transcripts_tracking", "question": "መስመር 1 እና መስመር 2'ን ጨምሮ የሁሉም አድራሻዎች ምንድን ናቸው?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### መስመር 1 እና መስመር 2'ን ጨምሮ የሁሉም አድራሻዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሁሉም አድራሻዎች የመጀመሪያ እና ሁለተኛ መስመር ምንድን ነው?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሁሉም አድራሻዎች የመጀመሪያ እና ሁለተኛ መስመር ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአጠቃላይ ስንት ኮርሶች ተዘርዝረዋል?", "query": "select count ( * ) from courses", "predicted_sql": "select count ( courses.course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአጠቃላይ ስንት ኮርሶች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት ኮርሶች አሉ?", "query": "select count ( * ) from courses", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት ኮርሶች አሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሒሳብ ትምህርት እንዴት ይገለጻል?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሒሳብ ትምህርት እንዴት ይገለጻል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለሁሉም የሒሳብ ትምህርቶች መግለጫዎች ምንድን ናቸው?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለሁሉም የሒሳብ ትምህርቶች መግለጫዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በPort Chelsea ከተማ ውስጥ ያለው አድራሻ Zip Code ምንድነው?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በPort Chelsea ከተማ ውስጥ ያለው አድራሻ Zip Code ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የPort Chelsea Zip Code ምንድን ነው?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የPort Chelsea Zip Code ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ዲግሪዎችን የሚሰጠው ክፍል የትኛው ነው? የክፍሉን ስም እና መታወቂያ ዘርዝር።", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select sections.section_name  , sections.section_description from sections", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ዲግሪዎችን የሚሰጠው ክፍል የትኛው ነው? የክፍሉን ስም እና መታወቂያ ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "እጅግ ብዙ የ ዲግሪዎች ብዛት ያለው ክፍል ስም እና መታወቂያ ምንድነው?", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### እጅግ ብዙ የ ዲግሪዎች ብዛት ያለው ክፍል ስም እና መታወቂያ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "መንኛውንም ዲግሪ ምን ያህል ክፍሎች ይሰጣሉ?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### መንኛውንም ዲግሪ ምን ያህል ክፍሎች ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል የተለያዩ ክፍሎች ዲግሪ ይሰጣሉ?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል የተለያዩ ክፍሎች ዲግሪ ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል የተለያዩ የዲግሪ ስሞች ቀርበዋል?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል የተለያዩ የዲግሪ ስሞች ቀርበዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል የተለያዩ የዲግሪዎች ይሰጣሉ?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select degree_programs.degree_program_id  , degree_programs.department_id  , degree_programs.degree_summary_name  , degree_programs.degree_summary_description  , degree_programs.other_details from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል የተለያዩ የዲግሪዎች ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የEngineering deportment ምን ያህል ዲግሪዎችን ይሰጣል?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select courses.course_name from departments join degree_programs on departments.department_id = degree_programs.department_id join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id join courses on student_enrolment_courses.course_id = courses.course_id where departments.department_name = 'Engineering'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የEngineering deportment ምን ያህል ዲግሪዎችን ይሰጣል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የEngineering deportment ምን ያህል ዲግሪ አለው?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select departments.department_name from departments where departments.department_name = 'Engineering'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የEngineering deportment ምን ያህል ዲግሪ አለው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሁሉም ክፍሎች ስም እና ዝርዝር መግለጫዎች ምንድን ናቸው?", "query": "select section_name , section_description from sections", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሁሉም ክፍሎች ስም እና ዝርዝር መግለጫዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለሁሉም ክፍሎች ስም እና ዝርዝር መግለጫዎች ምንድን ናቸው?", "query": "select section_name , section_description from sections", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለሁሉም ክፍሎች ስም እና ዝርዝር መግለጫዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢበዛ 2 ክፍሎች ያሉት ስሞች እና መታወቂያ ምን ይባላል?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select departments.department_name  , departments.department_description from departments limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢበዛ 2 ክፍሎች ያሉት ስሞች እና መታወቂያ ምን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ከ 2 በታች ክፍሎች ያሉት የእያንዳንዱ ኮርስ ስሞች እና መወቂያዎች ምንድን ናቸው?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_name  , courses.other_details from courses where courses.course_id in ( select sections.course_id from sections where sections.section_id = 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ከ 2 በታች ክፍሎች ያሉት የእያንዳንዱ ኮርስ ስሞች እና መወቂያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የክፍሉን ስም በተገላቢጦሽ የቃላት አቆጣጠር ዘርዝር።", "query": "select section_name from sections order by section_name desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የክፍሉን ስም በተገላቢጦሽ የቃላት አቆጣጠር ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በተቃራኒው የፊደል ቅደም ተከተል የክፍሎቹ ስሞች ምንድን ናቸው?", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በተቃራኒው የፊደል ቅደም ተከተል የክፍሎቹ ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪ የተመዘገበበት የትምህርት ሴሚስተር ምንድን ነው?", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪ የተመዘገበበት የትምህርት ሴሚስተር ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች የተመዘገቡበት የእያንዳንዱ የትምህርት ሴሚስተር ስም እና መታወቂያ ማን ይባላል?", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.email_address from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች የተመዘገቡበት የእያንዳንዱ የትምህርት ሴሚስተር ስም እና መታወቂያ ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በስሙ ውስጥ Computer የሚል ንዑስ ቅጥያ የያዘው የትምህርት ክፋል ዝርዝር መግለጫ ምንድን ነው?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "select courses.course_name from courses where courses.course_id = ( select sections.course_id from sections where sections.section_name = 'Computer' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በስሙ ውስጥ Computer የሚል ንዑስ ቅጥያ የያዘው የትምህርት ክፋል ዝርዝር መግለጫ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስሙ Computer የሚል ቃል ያለው ክፍል ዝርዝር መግለጫ ምንድን ነው?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "select sections.section_name from sections where sections.course_id = ( select courses.course_id from courses where courses.course_name = 'Computer' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስሙ Computer የሚል ቃል ያለው ክፍል ዝርዝር መግለጫ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአንድ ሴሚስተር በ 2 ዲግሪ መርሃ ግብሮች የተመዘገቡ እነማን ናቸው? የመጀመሪያ ሰም፣ የአባት ስም፣ የእናት ስም እና መታወቂያቸውን ዘርዝር።", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአንድ ሴሚስተር በ 2 ዲግሪ መርሃ ግብሮች የተመዘገቡ እነማን ናቸው? የመጀመሪያ ሰም፣ የአባት ስም፣ የእናት ስም እና መታወቂያቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአንድ ሴሚስተር በ 2 ዲግሪ መርሃ ግብር የተመዘገቡ ተማሪዎችን የመጀመሪያ ፣ የአባት እና የእናት ስሞች ምንድን ናቸው? ከመታወቂያቸው ጋር", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.date_first_registered  , students.date_left  , addresses.line_1 as permanent_address_line_1  , addresses.line_2 as permanent_address_line_2  , addresses.line_3 as permanent_address_line_3  , addresses.city as permanent_address_city  , addresses.zip_postcode as permanent_address_zip_postcode  , addresses.state_province_county as permanent_address_state_province_county  , addresses.country as permanent_address_country  , addresses.other_address_details as permanent_address_other_details  , addresses2.line_1 as current_address_line_1  , addresses2.line_2 as current_address_line_2  , addresses2.line_3 as current_address_line_3  , addresses2.city as current_address_city  , addresses2.zip_postcode as current_address_zip_postcode  , addresses2.state_province_county as current_address_state_province_county  , addresses2.country as current_address_country  , addresses2.other_address_details as current_address_other_details from students join addresses on students.permanent_address_id = addresses.address_id join addresses as addresses2 on students.current_address_id = addresses2.address_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአንድ ሴሚስተር በ 2 ዲግሪ መርሃ ግብር የተመዘገቡ ተማሪዎችን የመጀመሪያ ፣ የአባት እና የእናት ስሞች ምንድን ናቸው? ከመታወቂያቸው ጋር \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በመጀመሪያ ዲግሪ ፕሮግራም የተመዘገበ ማነው? የመጀመሪያ ስም ፣ የአባት ስም እና የአያት ስም ዘርዝር።", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በመጀመሪያ ዲግሪ ፕሮግራም የተመዘገበ ማነው? የመጀመሪያ ስም ፣ የአባት ስም እና የአያት ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በመጀመሪያ ዲግሪ የተመዘገቡ የሁሉም የመጀመሪያ፣ የአባት እና የእናት ስሞች ምንድን ናቸው?", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በመጀመሪያ ዲግሪ የተመዘገቡ የሁሉም የመጀመሪያ፣ የአባት እና የእናት ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አብዛኞቹ ተማሪዎች የተመዘገቡበትን የፕሮግራም አይነት ፈልግ።", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አብዛኞቹ ተማሪዎች የተመዘገቡበትን የፕሮግራም አይነት ፈልግ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በብዛት የተመዘገቡ ተማሪዎች ቁጥር ያለው የዲግሪ ማጠቃለያ ስም ምንድን ነው?", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በብዛት የተመዘገቡ ተማሪዎች ቁጥር ያለው የዲግሪ ማጠቃለያ ስም ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በብዛት ተማሪዎች የተመዘገቡበትን ፕሮግራም ፈልግ። ሁለቱንም መታወቂያ እና ማጠቃለያ ዘርዝር።", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በብዛት ተማሪዎች የተመዘገቡበትን ፕሮግራም ፈልግ። ሁለቱንም መታወቂያ እና ማጠቃለያ ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች የተመዘገቡበት የፕሮግራው መታወቂያ እና የዲግሪ ማጠቃለያ ምንድን ነው?", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name  , count ( degree_programs.degree_program_id ) as num_degree_programs from departments inner join degree_programs on departments.department_id = degree_programs.department_id group by departments.department_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች የተመዘገቡበት የፕሮግራው መታወቂያ እና የዲግሪ ማጠቃለያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በማንኛውም ፕሮግራም ብዙ ጊዜ የተመዘገበው ተማሪ የቱ ነው? መታወቂውን፣ የመጀመሪያ ስም፣ የአባት ስም፣ የአያት ስም፣ የምዝገባ ብዛት እና የተማሪውን መታወቂያ ዘርዝር።", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name  , count ( * ) as total_enrollments from students join student_enrolment on student_enrolment.student_id = students.student_id group by students.student_id  , students.first_name  , students.middle_name  , students.last_name order by total_enrollments desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በማንኛውም ፕሮግራም ብዙ ጊዜ የተመዘገበው ተማሪ የቱ ነው? መታወቂውን፣ የመጀመሪያ ስም፣ የአባት ስም፣ የአያት ስም፣ የምዝገባ ብዛት እና የተማሪውን መታወቂያ ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በየትኛውም ፕሮግራም በብዛት ለተመዘገበ ተማሪ የመጀመሪያ ስም፣ የአባት ስም ፣ የእናት ስም ፣ ከቤታወቂያቸው እና ከተመዝጋቢው ቁጥር ጋር ምን ይበላል?", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በየትኛውም ፕሮግራም በብዛት ለተመዘገበ ተማሪ የመጀመሪያ ስም፣ የአባት ስም ፣ የእናት ስም ፣ ከቤታወቂያቸው እና ከተመዝጋቢው ቁጥር ጋር ምን ይበላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምንም ተማሪ ያልተመዘገበበት የትኛው ሴሚስተር ነው? የሴሚስተሩን ስም ዘርዝር።", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select students.middle_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምንም ተማሪ ያልተመዘገበበት የትኛው ሴሚስተር ነው? የሴሚስተሩን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምንም ተማሪ ያለ ተመዘገበበት የሴሚስተር ስም ምን ይባላል?", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምንም ተማሪ ያለ ተመዘገበበት የሴሚስተር ስም ምን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ተማሪዎች ተመዝግበው የሚያውቁባቸው ትምህርቶች የትምህርት ስም ማን ነው?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ተማሪዎች ተመዝግበው የሚያውቁባቸው ትምህርቶች የትምህርት ስም ማን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አንዳንድ ተማሪዎች የተመዘገቡባቸዉ የሁሉም ኮርሶችን ስም ማን ይባላል?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አንዳንድ ተማሪዎች የተመዘገቡባቸዉ የሁሉም ኮርሶችን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተመዝጋቢዎች ያለዉ ኮርስ ስም ማን ነው?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተመዝጋቢዎች ያለዉ ኮርስ ስም ማን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች የተመዘገቡበት የኮርስ ስም ማን ነው?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች የተመዘገቡበት የኮርስ ስም ማን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በNorth Corolina ግዛት የሚኖሩ ነገር ግን በየትኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ ተማሪዎች የአባት ስም ፈልግ።", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በNorth Corolina ግዛት የሚኖሩ ነገር ግን በየትኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ ተማሪዎች የአባት ስም ፈልግ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በNorth Corolina ግዛት የሚኖሩ ነገር ግን በየትኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ የተማሪዎች የአባት ስም ማን ይባላል?", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በNorth Corolina ግዛት የሚኖሩ ነገር ግን በየትኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ የተማሪዎች የአባት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢያንስ 2 የኮርስ ውጤት ያለውን የትምህርት ማስረጃ ቀን እና መታወቂያ አሳይ።", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts inner join transcript_contents on transcript_contents.transcript_id = transcripts.transcript_id where transcript_contents.student_course_id = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢያንስ 2 የኮርስ ውጤት ያለውን የትምህርት ማስረጃ ቀን እና መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢያንስ 2 የኮርስ ውጤት ያለውን የትምህርት ማስረጃ ቀን እና መታወቂያ ምንድን ነው?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts where transcripts.transcript_id = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢያንስ 2 የኮርስ ውጤት ያለውን የትምህርት ማስረጃ ቀን እና መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያ ስም Timmoty እና የአባትም ስሙ Ward የሆነው ሰዉ ስልክ ቁጥሩ ስንት ነው?", "query": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'", "predicted_sql": "select count ( students.cell_mobile_number ) as number_of_phones from students where students.first_name = 'Timmoty' and students.last_name = 'Ward'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name ( Ward ) , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያ ስም Timmoty እና የአባትም ስሙ Ward የሆነው ሰዉ ስልክ ቁጥሩ ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "Timmoty Ward የሚበለው ተማሪ ስልክ ቁጥሩ ስንት ነው?", "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'", "predicted_sql": "select count ( students.cell_mobile_number ) from students where students.last_name = 'Ward'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name ( Ward ) , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### Timmoty Ward የሚበለው ተማሪ ስልክ ቁጥሩ ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያው ተመዝጋቢ ተማሪ ማነው? የመጀመሪያ ስም፣ የአባት ስም እና የአያቱን ስም ዘርዝር።", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያው ተመዝጋቢ ተማሪ ማነው? የመጀመሪያ ስም፣ የአባት ስም እና የአያቱን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያው ተመዝጋቢ ተማሪ የመጀመሪያ ስም ፣ የአባት ስም እና የአያት ስም ማን ይባላል?", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያው ተመዝጋቢ ተማሪ የመጀመሪያ ስም ፣ የአባት ስም እና የአያት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትምህርት ቤቱ የቅርብ ጊዜ ተመራቂ ማን ነው? የመጀመሪያ ሰም፣ የአባት ስም እና የአያት ስም ዘርዝር።", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students where students.date_first_registered = ( select min ( date_first_registered ) from students )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትምህርት ቤቱ የቅርብ ጊዜ ተመራቂ ማን ነው? የመጀመሪያ ሰም፣ የአባት ስም እና የአያት ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትምህርት ቤቱ የቅርብ ጊዜ ተመራቂ የመጀመሪያ ስም፣ የአባት ስም፣ እና የአያት ስም ማን ይባላል?", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትምህርት ቤቱ የቅርብ ጊዜ ተመራቂ የመጀመሪያ ስም፣ የአባት ስም፣ እና የአያት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የማን ቋሚ አድራሻ አሁን ከሚገኝበት ወይም ከምትገኝበት አድራሻ የተለየ ነው? የመጀመሪያ ስሙን ወይም ስሟን ዘርዝር።", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የማን ቋሚ አድራሻ አሁን ከሚገኝበት ወይም ከምትገኝበት አድራሻ የተለየ ነው? የመጀመሪያ ስሙን ወይም ስሟን ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቋሚ አድራሻ አሁን ከሚገኝበት ወይም ከምትገኝበት አድራሻ የተለየ የሆነው ወይም የሆነችው ተማሪ የመጀመሪያ ስም ማን ይባላል?", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቋሚ አድራሻ አሁን ከሚገኝበት ወይም ከምትገኝበት አድራሻ የተለየ የሆነው ወይም የሆነችው ተማሪ የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአሁኑ ጊዜ የብዙ ተማሪዎችን የያዘው አድራሻ የትኛው ነው? የ አድራሻውን መታወቂያ እና ሁሉንም መስመሮችን ዘርዝር።", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአሁኑ ጊዜ የብዙ ተማሪዎችን የያዘው አድራሻ የትኛው ነው? የ አድራሻውን መታወቂያ እና ሁሉንም መስመሮችን ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች ያሉት የአድራሻው መታወቂያ ፣ መስመር 1 አና መስመር 2 ምንድን ነው?", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች ያሉት የአድራሻው መታወቂያ ፣ መስመር 1 አና መስመር 2 ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአማካይ የትምህርት ማስረጃዎቹ መች ነው የታተሙት?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአማካይ የትምህርት ማስረጃዎቹ መች ነው የታተሙት? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትምህርት ማስረጃው አማካይ ቀን ምንድነው?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትምህርት ማስረጃው አማካይ ቀን ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያው የትምህርት ማስረጃ መቼ ነው የተለቀቀው? ቀኑን እና ዝርዝሮቹን ዘርዝር።", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select semesters.semester_name  , semesters.semester_description from semesters", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያው የትምህርት ማስረጃ መቼ ነው የተለቀቀው? ቀኑን እና ዝርዝሮቹን ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትምህርት ማስረጃው የሚለቀቅበት ቅርብ ቀን መቼ ነው? ምን ዝርዝሮችን ልትነግረኝ ትችላለህ ?", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select semesters.semester_name from semesters", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትምህርት ማስረጃው የሚለቀቅበት ቅርብ ቀን መቼ ነው? ምን ዝርዝሮችን ልትነግረኝ ትችላለህ ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል የትምህርት ማስረጃዎች ተለቀዋል?", "query": "select count ( * ) from transcripts", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል የትምህርት ማስረጃዎች ተለቀዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል የትምህርት ማስረጃዎች ተዘርዝረዋል?", "query": "select count ( * ) from transcripts", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል የትምህርት ማስረጃዎች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጨረሻው የትምህርት ማስረጃ የተለቀቀበት ቀን ምንድን ነው?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጨረሻው የትምህርት ማስረጃ የተለቀቀበት ቀን ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጨረሻው የትምህርት ማስረጃ መች ነው የተለቀቀው?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጨረሻው የትምህርት ማስረጃ መች ነው የተለቀቀው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢበዛ ምን ያህል ጊዜ የኮርስ ምዝገባ ውጤት በተለያዩ የትምህርት ማስረጃ ውስጥ ሊታይ ይችላል? እንዲሁም የ ኮርሱን ምዝገባ አሳይ።", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢበዛ ምን ያህል ጊዜ የኮርስ ምዝገባ ውጤት በተለያዩ የትምህርት ማስረጃ ውስጥ ሊታይ ይችላል? እንዲሁም የ ኮርሱን ምዝገባ አሳይ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አንድ ኮርስ በተለያዩ የትምህርት ማስረጃዎች ላይ የሚታይበት ከፍተኛው ብዛት ስንት ነው እና የኮርሱ የምዝገባ መታወቂያ ምንድነው?", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አንድ ኮርስ በተለያዩ የትምህርት ማስረጃዎች ላይ የሚታይበት ከፍተኛው ብዛት ስንት ነው እና የኮርሱ የምዝገባ መታወቂያ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አነስተኛ የውጤት ብዛት የሚያሳየውን የትምህርት ማስረጃ ቀን አሳይ። እንዲሁም የመታወቂያ ቁጥሩንም ዘርዝር።", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አነስተኛ የውጤት ብዛት የሚያሳየውን የትምህርት ማስረጃ ቀን አሳይ። እንዲሁም የመታወቂያ ቁጥሩንም ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አነስተኛ የውጤቶች ብዛት ያለውን የትምህርት ማስረጃ ቀንና የመታወቂያ ቁጥር ምንድን ነው?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select count ( * ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አነስተኛ የውጤቶች ብዛት ያለውን የትምህርት ማስረጃ ቀንና የመታወቂያ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሁለቱም የማስተርስ ተማሪዎች እና የመጀመርያ ዲግሪ ተማሪዎች የተመዘገቡበትን ሴሚስተር ፈልግ።", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሁለቱም የማስተርስ ተማሪዎች እና የመጀመርያ ዲግሪ ተማሪዎች የተመዘገቡበትን ሴሚስተር ፈልግ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሁለቱም የማስተርስ እና የመጀመሪያ ዲግሪ ተማሪዎች የተመዘገቡበት የሴሚስተር መታወቂያ ምንድን ነዉ?", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሁለቱም የማስተርስ እና የመጀመሪያ ዲግሪ ተማሪዎች የተመዘገቡበት የሴሚስተር መታወቂያ ምንድን ነዉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአሁኑ ጊዜ ተማሪዎቹ በምንያህል የተለያዩ አድራሻዎች ይኖራሉ?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአሁኑ ጊዜ ተማሪዎቹ በምንያህል የተለያዩ አድራሻዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "እዚያ የሚኖሩ ተማሪዎች ያሏቸው የተለያዩ አድራሻዎች ምንድን ናቸው?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### እዚያ የሚኖሩ ተማሪዎች ያሏቸው የተለያዩ አድራሻዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሁሉም ተማሪዎች ብርዝር መረጃዎች በተገላቢጦሽ የቃላት ቅዳም ተከተል ዘርዝር።", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሁሉም ተማሪዎች ብርዝር መረጃዎች በተገላቢጦሽ የቃላት ቅዳም ተከተል ዘርዝር። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በተገላቢጦሽ የቃላት ቅዳም ተከተል ካሉት ተማሪዎች ምን ሌላ ዝርዝር መረጃዎች ልትነግረኝ ትችላለህ?", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በተገላቢጦሽ የቃላት ቅዳም ተከተል ካሉት ተማሪዎች ምን ሌላ ዝርዝር መረጃዎች ልትነግረኝ ትችላለህ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "h ክፍልን ግለፅ።", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### h ክፍልን ግለፅ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስሙ h የሆነው ክፍል ዝርዝር መግለጫው ምንድን ነው?", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "select h.student_id  , h.first_name  , h.last_name  , h.email_address  , h.date_first_registered  , h.date_left  , a.line_1  , a.line_2  , a.line_3  , a.city  , a.zip_postcode  , a.state_province_county  , a.country  , a.other_address_details  , d.department_name  , d.department_description  , dp.degree_summary_name  , dp.degree_summary_description  , s.semester_name  , s.semester_description  , se.other_details  , c.course_name  , c.course_description  , c.other_details from students h join addresses a on h.permanent_address_id = a.address_id join departments d on dp.department_id = d.department_id join degree_programs dp on dp.degree_program_id = se.degree_program_id join semesters s on se.semester_id = s.semester_id join student_enrolment se on se.student_id = h.student_id join student_enrolment_courses sec on sec.student_enrolment_id = se.student_enrolment_id join courses c on sec.course_id = c.course_id join transcript_contents tc on tc.student_course_id = sec.student_course_id join transcripts t on tc.transcript_id = t.transcript_id where h.first_name = 'h'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስሙ h የሆነው ክፍል ዝርዝር መግለጫው ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በቋሚነት ሃይቲ የሚኖሩ ወይም ስልክ ቁጥራቸው 09700166582 የሆኑ ተማሪዎችን የመጀመሪያ ስማቸውን ፈልግ።", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students where students.cell_mobile_number = '09700166582'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በቋሚነት ሃይቲ የሚኖሩ ወይም ስልክ ቁጥራቸው 09700166582 የሆኑ ተማሪዎችን የመጀመሪያ ስማቸውን ፈልግ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሃይቲ በቋሚነት የሚኖሩ ወይም ስልክ ቁጥራቸው 09700166582 የሆኑ ተማሪዎች ስማቸው ማነው?", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students where students.cell_mobile_number = '09700166582'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሃይቲ በቋሚነት የሚኖሩ ወይም ስልክ ቁጥራቸው 09700166582 የሆኑ ተማሪዎች ስማቸው ማነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "tvshow", "question": "በቅደም ተከተል የሁሉንም የአስቂኝ ምስሎች ርዕስ በፊደላዊ ቅደም ተከተል ዘርዝር።", "query": "select title from cartoon order by title asc", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቅደም ተከተል የሁሉንም የአስቂኝ ምስሎች ርዕስ በፊደላዊ ቅደም ተከተል ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በፊደላዊ ቅደም ተከተል የተዘረዘሩት የአስቂኝ ምስሎች ርዕስ ምንድን ነው?", "query": "select title from cartoon order by title asc", "predicted_sql": "select tv_channel.content from tv_channel where tv_channel.content = 'አስቂኝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በፊደላዊ ቅደም ተከተል የተዘረዘሩት የአስቂኝ ምስሎች ርዕስ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen bones የተመሩትን ሁሉንም አስቂኝ ምስሎች ዘርዝር።", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.series_name like '%Ben bones%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen bones የተመሩትን ሁሉንም አስቂኝ ምስሎች ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen bones የተመሩት ሁሉም አስቂኝ ምስሎች ስም ማን ይባላል?", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'አስቂኝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen bones የተመሩት ሁሉም አስቂኝ ምስሎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በJoseph Kuhr ስንት የአስቂኝ ምስሎች ተፅፈዋል?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'Comedy'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በJoseph Kuhr ስንት የአስቂኝ ምስሎች ተፅፈዋል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በJoseph kuhr የተፃፉት የአስቂኝ ምስሎች ብዛት ስንት ነው?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select count ( * ) from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በJoseph kuhr የተፃፉት የአስቂኝ ምስሎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ሁሉንም የአስቂኝ ምስል ስማቸውን እና የምስሉ መሪዎችን ስም ስርጭት በጀመሩበት ቀን ቅደም ተከተል ዘርዝር።", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ሁሉንም የአስቂኝ ምስል ስማቸውን እና የምስሉ መሪዎችን ስም ስርጭት በጀመሩበት ቀን ቅደም ተከተል ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ስርጭት በጀመሩበት ቀን ቅደም ተከተል የተቀመጡት የአስቂኝ ምስሎች ስማቸው እና የምስሉ መሪዎች ስም ማነው?", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ስርጭት በጀመሩበት ቀን ቅደም ተከተል የተቀመጡት የአስቂኝ ምስሎች ስማቸው እና የምስሉ መሪዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones ወይም Brondon Vietti የተመሩ የሁሉም አስቂኝ ምስሎች ርዕስ ዘርዝር።", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "select tv_channel.series_name  , tv_series.episode  , cartoon.title from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brondon Vietti'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones ወይም Brondon Vietti የተመሩ የሁሉም አስቂኝ ምስሎች ርዕስ ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones ወይም Brandon Vietti የተመሩ የሁሉም አስቂኝ ምስሎች ርዕስ ምንድነው?", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "select cartoon.directed_by from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by ( Brandon Vietti ) , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones ወይም Brandon Vietti የተመሩ የሁሉም አስቂኝ ምስሎች ርዕስ ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ብዙ የTV Channels ያለው በትኛው አገር ነዉ? አገሩን እና የTV Channels ብዛት ዝርዝር።", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.country order by channel_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ብዙ የTV Channels ያለው በትኛው አገር ነዉ? አገሩን እና የTV Channels ብዛት ዝርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ብዙ የTV Channels ያለው አገር ማነው? እና ምን ያህልስ ከለዉ?", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ብዙ የTV Channels ያለው አገር ማነው? እና ምን ያህልስ ከለዉ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በTV Channel ሰንጠረዥ ውስጥ የተለያዩ ተከታታይ ስሞችን እና ይዘቶችን ዘርዝር።", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በTV Channel ሰንጠረዥ ውስጥ የተለያዩ ተከታታይ ስሞችን እና ይዘቶችን ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ስንት የተለያዩ ተከታታዮች እና ይዘቶች በTV ጣቢያው ሰንጠረዥ ላይ ተሰርዘዋል?", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ስንት የተለያዩ ተከታታዮች እና ይዘቶች በTV ጣቢያው ሰንጠረዥ ላይ ተሰርዘዋል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የመለያ ስሙ SKY Radio የሆነው የTV ጣቢያ ይዘት ምንድን ነው?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.series_name = 'SKY Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የመለያ ስሙ SKY Radio የሆነው የTV ጣቢያ ይዘት ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የተከታታዩ SKY Radio ይዘት ምንድን ነው?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.series_name = 'SKY Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የተከታታዩ SKY Radio ይዘት ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ልዩ ስሙ SKY Radio የሆነው የTV ጣቢያ የጥቅል ምርጫው ምንድነው?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.series_name = 'SKY Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ልዩ ስሙ SKY Radio የሆነው የTV ጣቢያ የጥቅል ምርጫው ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የተስታታይ ስሙ SKY Radio የሆነው የTV ጣቢያዎች የጥቅል ምርጫዎች ምንድን ናቸው?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.series_name = 'SKY Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የተስታታይ ስሙ SKY Radio የሆነው የTV ጣቢያዎች የጥቅል ምርጫዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ስንት የTV ጣቢያች ኢንግሊዘኛ ቋንቋን እየትጠቀሙ ነው?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ስንት የTV ጣቢያች ኢንግሊዘኛ ቋንቋን እየትጠቀሙ ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ስንት የTV ጣቢያች ኢንግሊዘኛ ቋንቋን ይጠቀማሉ?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ስንት የTV ጣቢያች ኢንግሊዘኛ ቋንቋን ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቁጥር ትንሽ በሆኑ የTV ጣቢያዎች አገልግሎት ላይ የሚውለውን ቋንቋ ዘርዝር ፤ ቋንቋውን እና የTV ጣቢያውን ብዛት ዘርዝር።", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) from tv_channel group by tv_channel.language", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቁጥር ትንሽ በሆኑ የTV ጣቢያዎች አገልግሎት ላይ የሚውለውን ቋንቋ ዘርዝር ፤ ቋንቋውን እና የTV ጣቢያውን ብዛት ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በጥቂት የTV ጣቢያዎች ውስጥ አገልግሎት ላይ የሚውሉት ቋንቋዎች እነማን ናቸው? እና ስንት ጣቢያዎች ይጠቀሙበታል?", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በጥቂት የTV ጣቢያዎች ውስጥ አገልግሎት ላይ የሚውሉት ቋንቋዎች እነማን ናቸው? እና ስንት ጣቢያዎች ይጠቀሙበታል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለእያንዳንዱ ቋንቋ እና የሚጠቀሙትን የTV ጣቢያዎች ብዛት ዘርዝር።", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select count ( * ) from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለእያንዳንዱ ቋንቋ እና የሚጠቀሙትን የTV ጣቢያዎች ብዛት ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለእያንዳንዱ ቋንቋ ፤ ቋንቋውን የሚጠቀሙትን የTV ጣቢያዎች ዘርዝር።", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለእያንዳንዱ ቋንቋ ፤ ቋንቋውን የሚጠቀሙትን የTV ጣቢያዎች ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "The rise of the Blue Beetle የተሰኘውን አስቂኝ ምስል የሚያሳየው የTV ጣቢያ ምንድን ነው? የTV ጣቢያውን ተከታታይ ስም ዘርዝር።", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select tv_channel.series_name from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.title = 'The Rise of the Blue Beetle!'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### The rise of the Blue Beetle የተሰኘውን አስቂኝ ምስል የሚያሳየው የTV ጣቢያ ምንድን ነው? የTV ጣቢያውን ተከታታይ ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "The rise of the Blue Beetle የተሰኘውን አስቂኝ ምስል የሚያሳየው የTV ጣቢያ ተከታታይ ስም ምንድነው?", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select cartoon.title from cartoon where cartoon.title = 'The Rise of the Blue Beetle!'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### The rise of the Blue Beetle የተሰኘውን አስቂኝ ምስል የሚያሳየው የTV ጣቢያ ተከታታይ ስም ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "Sky Radio የሚል ተከታታይ ስም ያለው የTV ጣቢያ ላይ የሚታዩትን አስቂኝ ምስሎች ርዕስ ዘርዝር።", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'cartoon'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### Sky Radio የሚል ተከታታይ ስም ያለው የTV ጣቢያ ላይ የሚታዩትን አስቂኝ ምስሎች ርዕስ ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "Sky Radio የሚል ተከታታይ ስም ያለው የTV ጣቢያ ላይ ያሉትን የሁሉም አስቂኝ ምስሎች ርዕስ ምንድን ነው?", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'cartoon'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### Sky Radio የሚል ተከታታይ ስም ያለው የTV ጣቢያ ላይ ያሉትን የሁሉም አስቂኝ ምስሎች ርዕስ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በደረጃቸው መሰረት የሁሉም የTV ተከታታዮች ክፍል Hርዝር።", "query": "select episode from tv_series order by rating asc", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በደረጃቸው መሰረት የሁሉም የTV ተከታታዮች ክፍል Hርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በደረጃው ድርድር መሰረት ሁሉም ክፍሎች እነማን ናቸው?", "query": "select episode from tv_series order by rating asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በደረጃው ድርድር መሰረት ሁሉም ክፍሎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "3 ከፍተኛ ደረጀ ያላቸውን የTV ተከታታዮች ዘርዝር ፤ የ TV ተከታታዩን ክፉል እና ደረጃ ዘርዝር።", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 3 ከፍተኛ ደረጀ ያላቸውን የTV ተከታታዮች ዘርዝር ፤ የ TV ተከታታዩን ክፉል እና ደረጃ ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በTV ተከታታይ ሰንጠረዥ ውስጥ 3ቱ ከፍተኛ ደረጃ ያላቸው ክፍሎች እነማን ናቸው? ደረጃዎቹ ምን ነበሩ?", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.hight_definition_tv = '3D'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በTV ተከታታይ ሰንጠረዥ ውስጥ 3ቱ ከፍተኛ ደረጃ ያላቸው ክፍሎች እነማን ናቸው? ደረጃዎቹ ምን ነበሩ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የTV ተከታታይ ከፍተኛ እና ዝቅተኛ ድርሻ ምንድ ነው?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የTV ተከታታይ ከፍተኛ እና ዝቅተኛ ድርሻ ምንድ ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለTV ተከታታዩ ከፍተኛ እና ዝቅተኛ ድርሻ ምንድ ነው?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select tv_channel.content from tv_channel where tv_channel.hight_definition_tv = 'ከፍተኛ' and tv_channel.pay_per_view_ppv = 'ዝቅተኛ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለTV ተከታታዩ ከፍተኛ እና ዝቅተኛ ድርሻ ምንድ ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚል ክፍል ያለው የTV ተከታታይ የሚለቀቅበት ቀን መች ነው?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_series.air_date from tv_series where tv_series.episode = 'A Love of a Lifetime'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚል ክፍል ያለው የTV ተከታታይ የሚለቀቅበት ቀን መች ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚል ክፍል መች ተለቀቀ?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚል ክፍል መች ተለቀቀ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚል ክፍል ያለው የTV ተከታታይ ሳምንታዊ ደረጃ ምንድን ነው?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚል ክፍል ያለው የTV ተከታታይ ሳምንታዊ ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚለው ክፍል ሰምንታዊ ደረጃ ምንድን ነው?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚለው ክፍል ሰምንታዊ ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚል ክፍል ያለው የTV ጣቢያ የTV ተከታታይ ምንድን ነው? የTV ጣቢያውን ተከታታይ ስም ዘርዝር።", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚል ክፍል ያለው የTV ጣቢያ የTV ተከታታይ ምንድን ነው? የTV ጣቢያውን ተከታታይ ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "A Love of a Lifetime የሚል ክፍል ያለው ተከታታይ ስም ማነው?", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### A Love of a Lifetime የሚል ክፍል ያለው ተከታታይ ስም ማነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የተከታታይ ስሙ Sky Radio በሆነ የTV ጣቢያ ላይ የሚታየውን የTV ተከታታይ ሁሉንም ክፍሎች ዘርዝር።", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.series_name = 'Sky Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የተከታታይ ስሙ Sky Radio በሆነ የTV ጣቢያ ላይ የሚታየውን የTV ተከታታይ ሁሉንም ክፍሎች ዘርዝር። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "Sky Radio የሚባለው የTV ተከታታይ ክፋል ለምንድን ነው።", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.series_name = 'Sky Radio'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name ( Sky Radio ) , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### Sky Radio የሚባለው የTV ተከታታይ ክፋል ለምንድን ነው። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በተዘረዘሩት አያንዳንዳቸው ዳይሬክተሮች የተመሩትን የአስቂኝ ምስሎች ብዛት ፈልግ።", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በተዘረዘሩት አያንዳንዳቸው ዳይሬክተሮች የተመሩትን የአስቂኝ ምስሎች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እያንዳንዱ ዳይሬክተር ስንት አስቂኝ ምስሎችን አዘጋጅቷል?", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እያንዳንዱ ዳይሬክተር ስንት አስቂኝ ምስሎችን አዘጋጅቷል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በጣም በቅርቡ የተለቀቀውን አስቂኝ ምስል የዝግጅት መለያ ቁጥር እና ጣቢያ ፈልግ።", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.content = 'Comedy' and tv_channel.hight_definition_tv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በጣም በቅርቡ የተለቀቀውን አስቂኝ ምስል የዝግጅት መለያ ቁጥር እና ጣቢያ ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የቅርብ ጊዜው አስቂኝ ምስል የዝግጅት መለያ ቁጥር እና ጣቢያ ምንድን ነው?", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የቅርብ ጊዜው አስቂኝ ምስል የዝግጅት መለያ ቁጥር እና ጣቢያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ጥራቱ ትልቅ የሆነ TV ያለዉ የቲቪ ጣቢያ የተከታታይ ስም እና የጠቅል ምርጫ ፈልግ።", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ጥራቱ ትልቅ የሆነ TV ያለዉ የቲቪ ጣቢያ የተከታታይ ስም እና የጠቅል ምርጫ ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ጥራቱ ትልቅ የሆነ TV መጫወት የሚችለው የ ቲቪ ጣቢያ የተከታታይ ስም እና የጠቅል ምርጫ ምንድነው?", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "select tv_channel.series_name  , tv_channel.content from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ጥራቱ ትልቅ የሆነ TV መጫወት የሚችለው የ ቲቪ ጣቢያ የተከታታይ ስም እና የጠቅል ምርጫ ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በTodd Casey የተፃፈ የተወሰኑ አስቂኝ ምስሎችን የሚያጫውተው የTV ጣቢያ የየትኛው አገር ነው?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.country from tv_channel where tv_channel.content = 'Comedy' and tv_channel.pixel_aspect_ratio_par = '16:9' and tv_channel.hight_definition_tv = 'Yes' and tv_channel.pay_per_view_ppv = 'No' and tv_channel.package_option = 'Basic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በTodd Casey የተፃፈ የተወሰኑ አስቂኝ ምስሎችን የሚያጫውተው የTV ጣቢያ የየትኛው አገር ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በTodd Casey ተፅፈው የነበሩ አስቂኝ ምስሎች በውስጡ ያለው TV ያላቸው አገሮች እነማን ናቸዉ?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'Comedy'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በTodd Casey ተፅፈው የነበሩ አስቂኝ ምስሎች በውስጡ ያለው TV ያላቸው አገሮች እነማን ናቸዉ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ምንም አይነት በ Todd Casey የተፃፉትን አስቂኝ ምስሎች እያጫወቱ ያሉት የTV ጣቢያዎች የየትኛው አገር ናቸው?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by ( Todd Casey ) , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ምንም አይነት በ Todd Casey የተፃፉትን አስቂኝ ምስሎች እያጫወቱ ያሉት የTV ጣቢያዎች የየትኛው አገር ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በTodd Casey የተፃፉትን አስቂኝ ምስሎች እየጫወቱ ያሉት አገራት እንነማን ናቸው?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.series_name  , cartoon.title from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id where tv_channel.content = 'Comedy'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በTodd Casey የተፃፉትን አስቂኝ ምስሎች እየጫወቱ ያሉት አገራት እንነማን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones እና Michael Chang የተመሩትን የተወሰኑ አስቂኝ ምስሎች እያጫወቱ ያሉት የTV ጣቢያዎች የተከታታይ ስም እና ሀገር ፈልግ።", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.series_name  , tv_channel.country from tv_channel where tv_channel.content = 'Funny' and ( tv_channel.pixel_aspect_ratio_par = '16:9' or tv_channel.hight_definition_tv = 'Yes' ) and ( tv_channel.pay_per_view_ppv = 'No' or tv_channel.package_option = 'Basic' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by ( Michael Chang ) , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones እና Michael Chang የተመሩትን የተወሰኑ አስቂኝ ምስሎች እያጫወቱ ያሉት የTV ጣቢያዎች የተከታታይ ስም እና ሀገር ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones የተማሩትን አስቂኝ ምስሎች እና በ Michael Chang የተመሩትን አስቂኝ ምስሎች እያጫወቱ ያሉት የሁሉም የTV ጣቢያዎች የተከታታይ ስም እና አገር ምንድን ነው?", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by ( Michael Chang ) , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones የተማሩትን አስቂኝ ምስሎች እና በ Michael Chang የተመሩትን አስቂኝ ምስሎች እያጫወቱ ያሉት የሁሉም የTV ጣቢያዎች የተከታታይ ስም እና አገር ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እንግሊዘኛ የማይጠቀሙትን የTV ጣቢያዎች ክልል እና የPixle aspect ratio ፈልግ።", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.pixel_aspect_ratio_par from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እንግሊዘኛ የማይጠቀሙትን የTV ጣቢያዎች ክልል እና የPixle aspect ratio ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እንግሊዘኛ የማይጠቀሙትን የTV ጣቢያዎች የPixle aspect ratio እና መነሻ አገር ምንድን ነው?", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እንግሊዘኛ የማይጠቀሙትን የTV ጣቢያዎች የPixle aspect ratio እና መነሻ አገር ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከሁለት በላይ የTV ጣቢያ  ካያላቸው አገራት የመጡትን የTV ጣቢያ መታወቂያ ፈልግ።", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.id in ( select tv_series.channel from tv_series ) or tv_channel.id in ( select cartoon.channel from cartoon )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከሁለት በላይ የTV ጣቢያ  ካያላቸው አገራት የመጡትን የTV ጣቢያ መታወቂያ ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከሁለት በላይ የTV ጣቢያ የላቸው የሁሉም TV ጣቢያዎች ምንድን ናቸው?", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.series_name  , cartoon.title from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከሁለት በላይ የTV ጣቢያ የላቸው የሁሉም TV ጣቢያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ምንም ኰነት በ Ben Jones የተመራ አስቂኝ ምስል የማያሳዩ የTV ጣቢያዎች መታወቂያ ፈልግ።", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by ( Ben Jones ) , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ምንም ኰነት በ Ben Jones የተመራ አስቂኝ ምስል የማያሳዩ የTV ጣቢያዎች መታወቂያ ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ምንም ኰነት በ Ben Jones የተመራ አስቂኝ ምስሎች የሌላቸው የTV ጣቢያዎች መታወቂያ ምንድን ናቸው?", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by ( Ben Jones ) , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ምንም ኰነት በ Ben Jones የተመራ አስቂኝ ምስሎች የሌላቸው የTV ጣቢያዎች መታወቂያ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones የተመራ ምንም አይነት አስቂኝ ምስል የሌለውን የTV ጣቢያ የጥቅል አማራጭ ፈልግ።", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.series_name = 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones የተመራ ምንም አይነት አስቂኝ ምስል የሌለውን የTV ጣቢያ የጥቅል አማራጭ ፈልግ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በBen Jones የተመራ ምንም አይነት አስቂኝ ምስል የማያጫውቱት የሁሉም የ TV ጣቢያዎች የጥቅል ምርጫዎች ምንድን ናቸው?", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በBen Jones የተመራ ምንም አይነት አስቂኝ ምስል የማያጫውቱት የሁሉም የ TV ጣቢያዎች የጥቅል ምርጫዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "poker_player", "question": "ስንት የPoker ተጫዋቾች አሉ?", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( distinct poker_player.poker_player_id ) as num_poker_players from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ስንት የPoker ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የPoker ተጫዋቾቹን ብዛት ቁጠር።", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( * ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የPoker ተጫዋቾቹን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የPoker ተጫዋቾቹን ገቢ ኮትልቅ ወደ ትንሽ ዘርዝር።", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player inner join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የPoker ተጫዋቾቹን ገቢ ኮትልቅ ወደ ትንሽ ዘርዝር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በዋጋቸው መሰረት ከትልቅ ወደ ትንሽ ተዘርዝረው የ Poker ተጫዋቾቹ ገቢ ምን ያህል ነው?", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በዋጋቸው መሰረት ከትልቅ ወደ ትንሽ ተዘርዝረው የ Poker ተጫዋቾቹ ገቢ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ሁሉም ቁማር ተጫዋቾች የደረሱበት ምርጥ የጨረሱበት ዙር እና የመጨረሻው ዙር ውጤታቸው ምንድነው?", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ሁሉም ቁማር ተጫዋቾች የደረሱበት ምርጥ የጨረሱበት ዙር እና የመጨረሻው ዙር ውጤታቸው ምንድነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ቁማር ተጫዋቾች የደረሱበት ምርጥ የጨረሱበት ዙር እና የመጨረሻው ዙር ውጤታቸው ምንድነው?", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ቁማር ተጫዋቾች የደረሱበት ምርጥ የጨረሱበት ዙር እና የመጨረሻው ዙር ውጤታቸው ምንድነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የPoker ተጫዋቾቹ ከማካይ ገቢ ምን ያህል ነው?", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player inner join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የPoker ተጫዋቾቹ ከማካይ ገቢ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የመላው Poker ተጫዋቾች አማካይ ገቢ መልስ።", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የመላው Poker ተጫዋቾች አማካይ ገቢ መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ትልቅ ገቢ ያለው የPoker ተጫዋች የገንዘብ ደረጃ ምንድን ነው?", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.final_table_made from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ትልቅ ገቢ ያለው የPoker ተጫዋች የገንዘብ ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ትልቅ ገቢ ያለው የPoker ተጫዋች የገንዘብ ደረጃ መልስ።", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ትልቅ ገቢ ያለው የPoker ተጫዋች የገንዘብ ደረጃ መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ200,000 በታች ገቢ ያስገቡ ቁማር ተጫዋቾች ዘንድ የተደረሰው ከፍተኛ የመጨረሻው ዙር ውጤት ስንት ነው?", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select count ( * ) from poker_player where final_table_made = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ200,000 በታች ገቢ ያስገቡ ቁማር ተጫዋቾች ዘንድ የተደረሰው ከፍተኛ የመጨረሻው ዙር ውጤት ስንት ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከፍተኛ የመጨረሻው ዙር ውጤት ያስመዘገቡ እና ገቢያቸው ከ 200,000 በታች የሆኑትን ቁማር ተጫዋቾች አሳይ።", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.earnings > 200000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከፍተኛ የመጨረሻው ዙር ውጤት ያስመዘገቡ እና ገቢያቸው ከ 200,000 በታች የሆኑትን ቁማር ተጫዋቾች አሳይ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የPoker ተጫዋቾቹ ስም ማነው?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የPoker ተጫዋቾቹ ስም ማነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የሁሉንም የPoker ተጫዋቾች ስም መልስ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የሁሉንም የPoker ተጫዋቾች ስም መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ገቢያቸው ከ300ዐዐዐ በላይ የሆኑት Poker ተጫዋቾ ስም ማነው?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ገቢያቸው ከ300ዐዐዐ በላይ የሆኑት Poker ተጫዋቾ ስም ማነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ300000 በላይ ገቢ ያላቸው Poker ተጫዋቾች ስም ስጥ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.poker_player_id > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ300000 በላይ ገቢ ያላቸው Poker ተጫዋቾች ስም ስጥ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የቁማር ተጫዋቾቹን ስም ብዙ የመጨረሻው ዙር ውጤት ውስት በተካተቱት ቅደም ተከተል ዘርዝር።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made desc  , poker_player.best_finish desc  , poker_player.money_rank asc  , poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የቁማር ተጫዋቾቹን ስም ብዙ የመጨረሻው ዙር ውጤት ውስት በተካተቱት ቅደም ተከተል ዘርዝር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የመጨረሻው ዙር ውጤት ውስት በተካተቱት ቅደም ተከተል የቁማር ተጫዋቾቹ ስም ማን ይባላል?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የመጨረሻው ዙር ውጤት ውስት በተካተቱት ቅደም ተከተል የቁማር ተጫዋቾቹ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ትንሽ ገቢ ያለው የPoker ተጫዋች የልደት ቀን መቼ ነው?", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id where poker_player.poker_player_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ትንሽ ገቢ ያለው የPoker ተጫዋች የልደት ቀን መቼ ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ትንሽ ገቢ ያለው የPoker ተጫዋችን የልደት ቀን መልስ።", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select people.name  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ትንሽ ገቢ ያለው የPoker ተጫዋችን የልደት ቀን መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የረጅሙ የPoker ተጫዋች የገንዘብ ደረጃ ምንድን ነው?", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.final_table_made from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የረጅሙ የPoker ተጫዋች የገንዘብ ደረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የረጅሙን የPoker ተጫዋች የገንዘብ ደረጃ መልስ።", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player inner join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የረጅሙን የPoker ተጫዋች የገንዘብ ደረጃ መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ቁመቱ ከ200 በላይ የሆነው የPoker ተጫዋች ከማካይ ገቢ ስንት ነው፡", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select count ( * ) from poker_player where final_table_made = 1 limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ቁመቱ ከ200 በላይ የሆነው የPoker ተጫዋች ከማካይ ገቢ ስንት ነው፡ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ200 በላይ የሚረዝሙትን የPorer ተጫዋቾች አማካይ ገቢ መልስ።", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ200 በላይ የሚረዝሙትን የPorer ተጫዋቾች አማካይ ገቢ መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በገበያቸው ቅደም ተከተል መሰረት ከትልቅ ወደ ትንሽ የPoker ተጫዋቾቹ ስም ማነው?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በገበያቸው ቅደም ተከተል መሰረት ከትልቅ ወደ ትንሽ የPoker ተጫዋቾቹ ስም ማነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "እየቀነሰ በሚሄድ የገቢ መጠን መሰረት የPoker ተጫዋቾቹን ስም መልስ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### እየቀነሰ በሚሄድ የገቢ መጠን መሰረት የPoker ተጫዋቾቹን ስም መልስ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በእያንዳንድ ብሄር የተውጣጡ ሰዎች ብዛት እና የተለያዩ ብሄሮች ምንድን ናቸው?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በእያንዳንድ ብሄር የተውጣጡ ሰዎች ብዛት እና የተለያዩ ብሄሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከእያንዳንዱ ብሄር ስንት ሰዎች አሉ?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select count ( * ) from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከእያንዳንዱ ብሄር ስንት ሰዎች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በብዛት የሁሉም የሆነው የሰዎች ብሄሮ", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በብዛት የሁሉም የሆነው የሰዎች ብሄሮ \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በብዛት ሰዎች ላይ የተለመደ የሆነውን ብሄር ስኝ።", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.final_table_made = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በብዛት ሰዎች ላይ የተለመደ የሆነውን ብሄር ስኝ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ቢያንስ 2 ሰዎች የሚጋሯቸው ብሄሮች የትኞቹ ናቸው?", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id group by people.name having count ( poker_player.poker_player_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ቢያንስ 2 ሰዎች የሚጋሯቸው ብሄሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ሁለት ወይም ከዛ በላይ ሰዎች ያሉባቸው ብሄሮች ይመልሱ።", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select poker_player.poker_player_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ሁለት ወይም ከዛ በላይ ሰዎች ያሉባቸው ብሄሮች ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በሰማቸው ፊደላዊ ቅደም ተከተል መሰረት ስማቸውን እና የልደት ቀናቸውን ዘርዝር።", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በሰማቸው ፊደላዊ ቅደም ተከተል መሰረት ስማቸውን እና የልደት ቀናቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በሰማቸው ፊደላዊ ቅደም ተከተል መሰረት የታዘዙ የሰዎች ስሞች እር የልደት ቀናት ምንድን ናቸው?", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date  , people.height from people join poker_player on poker_player.people_id = people.people_id order by poker_player.final_table_made desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በሰማቸው ፊደላዊ ቅደም ተከተል መሰረት የታዘዙ የሰዎች ስሞች እር የልደት ቀናት ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ዜግነታቸው Russia ያልሆኑትን ሰዎች ስም አሳይ።", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where people.nationality = 'Russia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality ( Russia ) , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ዜግነታቸው Russia ያልሆኑትን ሰዎች ስም አሳይ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከRussia ያልመጡት ሰዎች ስም ማነው?", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from people where people.nationality = 'Russia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከRussia ያልመጡት ሰዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "Poker ተጫዋች ያልሆኑትን ሰዎች ስማቸውን ዘርዝር።", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### Poker ተጫዋች ያልሆኑትን ሰዎች ስማቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "Poker የማይጫወቱት ሰዎች ስም ማነው?", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### Poker የማይጫወቱት ሰዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ስንት ልዩ ልዩ የሆኑ ብሄሮች አሉ?", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select count ( distinct nationality ) from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ስንት ልዩ ልዩ የሆኑ ብሄሮች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የተለያዩ ብሄሮችን ብዛት ቁጠር።", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select count ( * ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የተለያዩ ብሄሮችን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "voter_1", "question": "ስንት ግዛቶች አሉ?", "query": "select count ( * ) from area_code_state", "predicted_sql": "select area_code_state.area_code  , area_code_state.state  , contestants.contestant_number  , contestants.contestant_name  , votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from area_code_state  , contestants  , votes where votes.contestant_number = contestants.contestant_number and votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስንት ግዛቶች አሉ? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ወደ ታች በተወዳዳሪው የስም ቅደም ተከተል የተቀመጠውን የተወዳደሪውን ስም እና ቁጥር ዘርዝር።", "query": "select contestant_number , contestant_name from contestants order by contestant_name desc", "predicted_sql": "select contestants.contestant_name  , contestants.contestant_number from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ወደ ታች በተወዳዳሪው የስም ቅደም ተከተል የተቀመጠውን የተወዳደሪውን ስም እና ቁጥር ዘርዝር። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የድምፅ መታወቂያዎችን፣ ስልክ ቁጥሮችን እና የሁሉንም ድምፅ ምርጫዎች ዘርዝር።", "query": "select vote_id , phone_number , state from votes", "predicted_sql": "select area_code_state.area_code  , area_code_state.state  , contestants.contestant_number  , contestants.contestant_name  , votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from area_code_state join contestants on votes.contestant_number = contestants.contestant_number join votes on votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የድምፅ መታወቂያዎችን፣ ስልክ ቁጥሮችን እና የሁሉንም ድምፅ ምርጫዎች ዘርዝር። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የአካባቢው መለያ ቁጥሮች ከፍተኛ እና ዝቐተኛ ዋጋ ምድን ነው?", "query": "select max ( area_code ) , min ( area_code ) from area_code_state", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የአካባቢው መለያ ቁጥሮች ከፍተኛ እና ዝቐተኛ ዋጋ ምድን ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ከCA ግዛት ድምፅ የተፈጠረ የመጨረሻ ዋን ምንድን ነው?", "query": "select max ( created ) from votes where state = 'CA'", "predicted_sql": "select votes.created from votes join area_code_state on votes.state = area_code_state.state where area_code_state.state = 'CA' order by votes.created desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ከCA ግዛት ድምፅ የተፈጠረ የመጨረሻ ዋን ምንድን ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ስማቸው Jessie Alloway ያልሆኑት ተወዳዳሪዎች ስም ማነው?", "query": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'", "predicted_sql": "select contestants.contestant_name from contestants where contestants.contestant_name = 'Jessie Alloway'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name ( Jessie Alloway ) | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስማቸው Jessie Alloway ያልሆኑት ተወዳዳሪዎች ስም ማነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ልዩ የሆኑ ግዛቶች እና የሁሉም ድምፆች የዝግጅት ጊዜ ምንድን ነው?", "query": "select distinct state , created from votes", "predicted_sql": "select votes.created from votes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ልዩ የሆኑ ግዛቶች እና የሁሉም ድምፆች የዝግጅት ጊዜ ምንድን ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ቢያንስ ሁለት ድምፅ ያላቸውን ተወዳዳሪዎች የተወዳዳሪ ስም እና የተወዳዳሪ ቁጥር ምንድን ናቸው?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2", "predicted_sql": "select contestants.contestant_name  , contestants.contestant_number from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ቢያንስ ሁለት ድምፅ ያላቸውን ተወዳዳሪዎች የተወዳዳሪ ስም እና የተወዳዳሪ ቁጥር ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ድምፅ ካገኙት ከሁሉም ተወዳዳሪዎች ዉስጥ ትንሽ ድምፅ ያገኙት ተወዳዳሪዎች የተወዳዳሪ ቁጥር እና ስም ማነው?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ድምፅ ካገኙት ከሁሉም ተወዳዳሪዎች ዉስጥ ትንሽ ድምፅ ያገኙት ተወዳዳሪዎች የተወዳዳሪ ቁጥር እና ስም ማነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ከNY ወይም ከCA ግዛቶች የተገኘው የድምፅ ብዛት ስንት ነው?", "query": "select count ( * ) from votes where state = 'NY' or state = 'CA'", "predicted_sql": "select count ( * ) from votes where state = 'NY' or state = 'CA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ከNY ወይም ከCA ግዛቶች የተገኘው የድምፅ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ድምፅ ያለገኙት ተወዳዳሪዎች ስንት ናቸው?", "query": "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )", "predicted_sql": "select count ( distinct contestants.contestant_number ) as total_contestants from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ድምፅ ያለገኙት ተወዳዳሪዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ብዙ ድምጽ ሰጪዎች ድምጽ የሰጡበት አካባቢ መለያ ቁትር ምንድን ነው?", "query": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1", "predicted_sql": "select area_code_state.area_code from area_code_state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ብዙ ድምጽ ሰጪዎች ድምጽ የሰጡበት አካባቢ መለያ ቁትር ምንድን ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የTabatha Gehling የሚባለው ተወዳዳሪ የሆኑት ድምጾች አ ዝግጅት ቀን፣ ግዛት እና የ ስልክ ቁጥር ምንድን ነው?", "query": "select votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የTabatha Gehling የሚባለው ተወዳዳሪ የሆኑት ድምጾች አ ዝግጅት ቀን፣ ግዛት እና የ ስልክ ቁጥር ምንድን ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "መራጮች ለሁለቱም ተወዳዳሪዎች Tabatha Gehling እና ተወዳዳሪ Kelly Clauss ድምጽ የሰጡበትን የ አካባቢ መለያ ቁጥሮች ዘርዝር።", "query": "select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Tabatha Gehling' intersect select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Kelly Clauss'", "predicted_sql": "select contestants.contestant_number from contestants where contestants.contestant_name = 'Tabatha Gehling' or contestants.contestant_name = 'Kelly Clauss'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name ( Kelly Clauss , Tabatha Gehling ) | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### መራጮች ለሁለቱም ተወዳዳሪዎች Tabatha Gehling እና ተወዳዳሪ Kelly Clauss ድምጽ የሰጡበትን የ አካባቢ መለያ ቁጥሮች ዘርዝር። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ስሙ ወስጥ AI የሚል ነዑስ ቅጣይ ያልውን ተወዳዳሪ ስም መልስ።", "query": "select contestant_name from contestants where contestant_name like '%al%'", "predicted_sql": "select contestants.contestant_name from contestants inner join votes on votes.contestant_number = contestants.contestant_number inner join area_code_state on votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስሙ ወስጥ AI የሚል ነዑስ ቅጣይ ያልውን ተወዳዳሪ ስም መልስ። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "world_1", "question": "ከ1950 በኋላ ከጥገኘነት የወጡት የሁሉም ሃገራት ስም ማነው?", "query": "select name from country where indepyear > 1950", "predicted_sql": "select city.name from city where city.population > 0 and city.population > ( select max ( city.population ) from city where city.population > 0 and city.population < 1950 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1950 በኋላ ከጥገኘነት የወጡት የሁሉም ሃገራት ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1950 በኋላ የተገኙትን ብሄሮች ስም ስጥ።", "query": "select name from country where indepyear > 1950", "predicted_sql": "select city.name from city where city.population > 100000 and city.district = 'ብሄር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1950 በኋላ የተገኙትን ብሄሮች ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የመንግስት ስርዓታቸው ፕሬዝዳንታዊየሆነ ሃገራት ስንት ናቸው?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "select count ( distinct country.name ) from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የመንግስት ስርዓታቸው ፕሬዝዳንታዊየሆነ ሃገራት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፐሬዝዳንታዊ የመንግስት ስርዓት ያላቸው ሃገራት ሰንት ናቸው?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "select city.district from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፐሬዝዳንታዊ የመንግስት ስርዓት ያላቸው ሃገራት ሰንት ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በCaribian አካባቢ ያሉ ሃገራት አጠቃላይ ስፋት ምን ያህል ነው?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select city.name from city join country on city.countrycode = country.code where country.continent = 'Caribbean'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በCaribian አካባቢ ያሉ ሃገራት አጠቃላይ ስፋት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በCaribian ውስጥ ያሉት ሃገራት በጋራ ምን ያህል ስፋት ይሸፍናሉ?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select city.name  , city.population from city join country on city.countrycode = country.code where country.continent = 'Caribbean'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በCaribian ውስጥ ያሉት ሃገራት በጋራ ምን ያህል ስፋት ይሸፍናሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Angulia በየትኛው አህጉር ውስጥ ነች?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select country.name from country where country.capital = 'Angulia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Angulia በየትኛው አህጉር ውስጥ ነች? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Angulia የምትባለው ሃገር የምትገኝበት አህጉር ስም ማነው?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select country.name from country where country.capital = 'Angulia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Angulia የምትባለው ሃገር የምትገኝበት አህጉር ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Kabul ከተማ በየትኛው ክልል ውስጥ ንው የምትገኘው?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select city.name from city where city.name = 'Kabul'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name ( Kabul ) , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Kabul ከተማ በየትኛው ክልል ውስጥ ንው የምትገኘው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Kabul የትኛው ከልል ውስጥ ነች?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select city.name from city where city.name = 'Kabul'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name ( Kabul ) , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Kabul የትኛው ከልል ውስጥ ነች? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAruba ውስጥ በጣም የሚታወቀው ቋንቋ የትኛው ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAruba ውስጥ በጣም የሚታወቀው ቋንቋ የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAruba ውስጥ የትኛው ቋንቋ ነው በሰፊው የሚነገረው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAruba ውስጥ የትኛው ቋንቋ ነው በሰፊው የሚነገረው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በBrazil ውስጥ የሕዝብ ብዛት እና የእድሜ ጣሪያ ምን ያህል ነው?", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select country.population  , country.surfacearea from country where country.name = 'Brazil'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በBrazil ውስጥ የሕዝብ ብዛት እና የእድሜ ጣሪያ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የBrazil'ን የህዝብ ብዛት እና የእድሜ ጣሪያ ስጠኘ።", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select count ( city.population ) as total_population  , sum ( country.surfacearea ) as total_surface_area from city join country on city.countrycode = country.code where country.name = 'Brazil'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የBrazil'ን የህዝብ ብዛት እና የእድሜ ጣሪያ ስጠኘ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የAngola ክልል እና የህዝብ ብዛት ምን ያህል ነው?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select country.name  , country.population from country where country.name = 'Angola'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የAngola ክልል እና የህዝብ ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Angola የትኛው ክልል ውስጥ ነው የምትገኘው፤ እና የህዝብ ብዛቷስ ምን ያህል ነው?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select country.name from country where country.code = 'AGO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name ( Angola ) , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname ( Angola ) , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Angola የትኛው ክልል ውስጥ ነው የምትገኘው፤ እና የህዝብ ብዛቷስ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመካከለኛው አፍሪካ ክልል ውስጥ የሚጠበቀው አማካይ የእድሜ ጣሪያ ምን ያህል ነው?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select country.continent from country where country.name = 'አፍሪካ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመካከለኛው አፍሪካ ክልል ውስጥ የሚጠበቀው አማካይ የእድሜ ጣሪያ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመካከለኛው አፍሪካ ውስጥ የህዝቡ አማካይ የእድሜ ጣሪያ ስንት ነው?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select count ( distinct country.region ) from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመካከለኛው አፍሪካ ውስጥ የህዝቡ አማካይ የእድሜ ጣሪያ ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsia ውስጥ አጭር የእድሜ ጣሪያ ያላት ሃገር ስም ማነው?", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsia ውስጥ አጭር የእድሜ ጣሪያ ያላት ሃገር ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsia ውስጥ ዝቅተኛ የእድሜ ጣሪያ ያላትን ሃገር ስም ስጥ።", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select city.name from city join country on city.countrycode = country.code where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsia ውስጥ ዝቅተኛ የእድሜ ጣሪያ ያላትን ሃገር ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Asia ውስጥ አጠቃላይ የህዝብ ብዛት እና ከፍተኛ GNP ምንድን ነው?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select country.name  , country.population  , country.gnp from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Asia ውስጥ አጠቃላይ የህዝብ ብዛት እና ከፍተኛ GNP ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Asia ውስጥ ስንት ሰዎች የኖራሉ እና ከወስጣችው ተለቁ GNP ምን ያህል ነው?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select count ( distinct city.name ) from city join country on city.countrycode = country.code where country.continent = 'Asia' and country.gnp > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Asia ውስጥ ስንት ሰዎች የኖራሉ እና ከወስጣችው ተለቁ GNP ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በፕሬዝዳንት የሚመሩ የ አፍሪካ ሃገራት ውስጥ አማካይ የእድሜ ጣሪያ ስንት ነው?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select count ( distinct city.district ) from city where city.countrycode = 'AFG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በፕሬዝዳንት የሚመሩ የ አፍሪካ ሃገራት ውስጥ አማካይ የእድሜ ጣሪያ ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፕሬዝዳንታዊ ስርዓት ያላቸው የአፍሪካ ሃገራትን አማካይ የ እድሜ ጣሪአ ስጥ?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select country.name  , country.continent  , country.region  , country.surfacearea  , country.indepyear  , country.population  , country.lifeexpectancy  , country.gnp  , country.gnpold  , country.localname  , country.governmentform  , country.headofstate  , country.capital  , country.code2 from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፕሬዝዳንታዊ ስርዓት ያላቸው የአፍሪካ ሃገራትን አማካይ የ እድሜ ጣሪአ ስጥ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የAsia እና Europe አጠቃላይ የ ቆዳ ስፋት ምን ያህል ንው?", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select continent from country where continent = 'Asia' or continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Europe ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የAsia እና Europe አጠቃላይ የ ቆዳ ስፋት ምን ያህል ንው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsia እና Europe ውስጥ ባሉት ሃገራት የተሸፈነውን አጠቃላይ የቆዳ ሰፋት ስጥ።", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select city.name  , city.district  , city.population from city join country on city.countrycode = country.code where country.continent in ( 'Asia'  , 'Europe' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Europe ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsia እና Europe ውስጥ ባሉት ሃገራት የተሸፈነውን አጠቃላይ የቆዳ ሰፋት ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በGelderland ቀጠና ውስጥ ስንት ሰዎች ይኖራሉ?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "select count ( * ) from city where city.district = 'Gelderland'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በGelderland ቀጠና ውስጥ ስንት ሰዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የGelderland ቀጠና አጠቃላይ የህዝብ ብዛት ስንት ነው?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "select count ( * ) from city where city.district = 'Gelderland'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የGelderland ቀጠና አጠቃላይ የህዝብ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "መንግስታቸው በUS ድንበር ውስጥ የሆኑ ሁሉም ከልሎች አማካይ GNP እና አጠቃላይ የህዝብ በዛት ስንት ነው?", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select count ( * ) from country where continent = 'North America' and gnp is not null and gnpold is not null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### መንግስታቸው በUS ድንበር ውስጥ የሆኑ ሁሉም ከልሎች አማካይ GNP እና አጠቃላይ የህዝብ በዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በUS ድንበር ውስጥ ናቸው የሚባሉትን ከልሎች አማካይ GNP እና አጠቃላይ የህዝብ ብዛት ስጥ።", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select country.name  , countrylanguage.language  , country.gnp  , country.population from country join countrylanguage on countrylanguage.countrycode = country.code where country.continent = 'North America' and countrylanguage.isofficial = 'T' and country.gnp > 1000000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በUS ድንበር ውስጥ ናቸው የሚባሉትን ከልሎች አማካይ GNP እና አጠቃላይ የህዝብ ብዛት ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በዓለም ላይ ስንት ልዩ የሆኑ ቋንቋዎች የነገራሉ?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በዓለም ላይ ስንት ልዩ የሆኑ ቋንቋዎች የነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በዓለም ዙሪያ ጥቅም ላይ የዋሉ የተለያዩ ቋንቋዎች ብዛት ስንት ንው?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) as num_languages from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በዓለም ዙሪያ ጥቅም ላይ የዋሉ የተለያዩ ቋንቋዎች ብዛት ስንት ንው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ስንት የተለያዩ መንግስታት አሉ?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select count ( distinct country.name ) from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ስንት የተለያዩ መንግስታት አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ምን ያህል የተለያዩ መንግስታት አሉ?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select country.name from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ምን ያህል የተለያዩ መንግስታት አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAruba ውስጥ ጥቅም ላይ የሚውሉ አጠቃላይ የ ቋንቋዎች ብዛት ስንት ነው?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) as num_languages from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAruba ውስጥ ጥቅም ላይ የሚውሉ አጠቃላይ የ ቋንቋዎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Aruba ውስጥ ስንት ቋንቋዎች ይነገራሉ?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name ( Aruba ) , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname ( Aruba ) , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Aruba ውስጥ ስንት ቋንቋዎች ይነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Afghanistan ስንት በይፋ የወጡ ቋንቋዎች አሏት?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'AFG' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name ( Afghanistan ) , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Afghanistan ስንት በይፋ የወጡ ቋንቋዎች አሏት? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAfghanistan ውስጥ ውስጥ ስንት ይፋዊ የሆኑ ቋንቋዎች ይነገራሉ?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAfghanistan ውስጥ ውስጥ ስንት ይፋዊ የሆኑ ቋንቋዎች ይነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ብዙ ቋንቋዎች የምትናገረው ሃገር ስም ማነው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ብዙ ቋንቋዎች የምትናገረው ሃገር ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም ብዙ ቋንቋዎች የሚጠቀሙትን ሃገራት ስም ስጥ።", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም ብዙ ቋንቋዎች የሚጠቀሙትን ሃገራት ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኛው አህጉር ብዙ የተለያዩ ቋንቋዎች አሉት?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select distinct countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኛው አህጉር ብዙ የተለያዩ ቋንቋዎች አሉት? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኛው አህጉር በዙ ቋንቋዎችን ይናገራል?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኛው አህጉር በዙ ቋንቋዎችን ይናገራል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስንት ሃገራት ሁለቱንም English እና Dutch ይናገራሉ?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስንት ሃገራት ሁለቱንም English እና Dutch ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English እና Dutch የሚጠቀሙት ከልሎች ስንት ናቸው?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "select count ( distinct language ) from countrylanguage where language in ( 'English'  , 'Dutch' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English እና Dutch የሚጠቀሙት ከልሎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሁለቱንም English እና French የሚናገሩት ከልሎች ስም ማነው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language = 'English' or countrylanguage.language = 'French'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሁለቱንም English እና French የሚናገሩት ከልሎች ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሁለቱንም English እና French የሚናገሩትን ከልሎች ስም ስጥ?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language in ( 'English'  , 'French' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሁለቱንም English እና French የሚናገሩትን ከልሎች ስም ስጥ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሁለቱም English እና French ይፋዊ ቋንቋቸው የሆኑባቸውን ሃገራት ስም ማነው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language in ( 'English'  , 'French' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሁለቱም English እና French ይፋዊ ቋንቋቸው የሆኑባቸውን ሃገራት ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English እና French እንደ ይፋዊ ቋንቋቸው ያላቸውን ሀገራት ስም ስጥ?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English እና French እንደ ይፋዊ ቋንቋቸው ያላቸውን ሀገራት ስም ስጥ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "Chinese የሚነገርባቸው ልዩ የሆኑ አህጉራት ብዛት ስንት ነው?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "select count ( distinct city.countrycode ) as total_countries from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### Chinese የሚነገርባቸው ልዩ የሆኑ አህጉራት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስንት አህጉራት Chinese ይናገራሉ?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "select count ( * ) from countrylanguage where language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስንት አህጉራት Chinese ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English ወይም Dutch የሚጠቀሙት ክልሎች እነማን ናቸው?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English ወይም Dutch የሚጠቀሙት ክልሎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ ክልሎች English ወይም Dutch   ይናገራሉ?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ ክልሎች English ወይም Dutch   ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከEnglish ወይም ከ Dutch አንዱ ይፋዊ ቋንቋ የሆኑባቸው ሀገራት እነማን ናቸው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'english' and isofficial = 't' union select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'dutch' and isofficial = 't'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከEnglish ወይም ከ Dutch አንዱ ይፋዊ ቋንቋ የሆኑባቸው ሀገራት እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ ሀገሮች ከ English ወይም ከ Dutch አንዱ ይፋዊ ቋንቋቸው ነው?", "query": "select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and isofficial = 'T' union select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' and isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ ሀገሮች ከ English ወይም ከ Dutch አንዱ ይፋዊ ቋንቋቸው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsian አህጉር ውስጥ የትኛው ቋንቋ በጣም ታዋቂ ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' order by countrylanguage.percentage desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsian አህጉር ውስጥ የትኛው ቋንቋ በጣም ታዋቂ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትልቅ ቁጥር ባላቸው የእስያ ክልሎች ውስጥ አገልግሎት ላይ የሚውልው ቋንቋ የትኛው ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትልቅ ቁጥር ባላቸው የእስያ ክልሎች ውስጥ አገልግሎት ላይ የሚውልው ቋንቋ የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፕሬዝዳንታዊ በሆኑ መንግስታት ውስጥ የትኛው ቋንቋ በአንድ ሀገር ውስጥ ብቻ ይነገራል?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.countrycode having count ( distinct countrylanguage.language ) = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፕሬዝዳንታዊ በሆኑ መንግስታት ውስጥ የትኛው ቋንቋ በአንድ ሀገር ውስጥ ብቻ ይነገራል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፕሬዝዳንታዊ መንግስት በሆነ በአንድ ሀገር ውስጥ ብቻ አገልግሎት ላይ የሚውለው ቋንቋ የትኛው ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፕሬዝዳንታዊ መንግስት በሆነ በአንድ ሀገር ውስጥ ብቻ አገልግሎት ላይ የሚውለው ቋንቋ የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዘኛን የሚጠቀሙ ትልቅ የህዝብ ብዛት ያላቸውን ሀገራት ፈልግ?", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "select countrylanguage.language  , sum ( city.population ) as total_population from countrylanguage join city on city.countrycode = countrylanguage.countrycode group by countrylanguage.language having total_population > 100000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዘኛን የሚጠቀሙ ትልቅ የህዝብ ብዛት ያላቸውን ሀገራት ፈልግ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም ብዙ የህዝብ ቁጥር ያለው እንግሊዘኛን የሚጠቀም ሀገር የትኛው ነው?", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም ብዙ የህዝብ ቁጥር ያለው እንግሊዘኛን የሚጠቀም ሀገር የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትልቅ ስፋት ያለዉን Asian ሀገር ስም ፣ የህዝብ ብዛት እና የሚጠበቅ የእድሜ ጣርያ ምን ያህል ነው?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.surfacearea from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትልቅ ስፋት ያለዉን Asian ሀገር ስም ፣ የህዝብ ብዛት እና የሚጠበቅ የእድሜ ጣርያ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመሬት ትልቁ የ Asian ሀገር ስም፣ የህዝብ ብዛት እና የእድሜ ጣርያ ምን ያህል ነው?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.surfacearea from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመሬት ትልቁ የ Asian ሀገር ስም፣ የህዝብ ብዛት እና የእድሜ ጣርያ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English ይፋዊ ቋንቋ ያልሆነባቸው ሀገራት ውስጥ በአማካኝ የእድሜ ጣርያ ምን ያህል ነው\t?", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "select city.name from city where city.countrycode = 'ENG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English ይፋዊ ቋንቋ ያልሆነባቸው ሀገራት ውስጥ በአማካኝ የእድሜ ጣርያ ምን ያህል ነው\t? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English ይፋዊ ቋንቋ ያልሆነባቸውን ሀገራት አማካኝ የእድሜ ጣርያ ስጥ?", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English ይፋዊ ቋንቋ ያልሆነባቸውን ሀገራት አማካኝ የእድሜ ጣርያ ስጥ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English በማይጠቀሙ ክልል ውስጥ የሚኖሩ ሰዎች አጠቃላይ ብዛት ምን ያህል ነው?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English በማይጠቀሙ ክልል ውስጥ የሚኖሩ ሰዎች አጠቃላይ ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English በማይናገሩ ሀገራት ውስጥ ስንት ሰዎች ይኖራሉ?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "select count ( distinct city.name ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English በማይናገሩ ሀገራት ውስጥ ስንት ሰዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የግዛት መሪው Beatrix በሆነው ሃገር ውስጥ የሚነገረው ይፋዊ ቋንቋ ምንድን ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.headofstate = 'Beatrix'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate ( Beatrix ) , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የግዛት መሪው Beatrix በሆነው ሃገር ውስጥ የሚነገረው ይፋዊ ቋንቋ ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የገዛት መሪው ስም Beatrix በሆነው ሃገር ወስጥ አገልገሎት ላይ የሚውለው ቋንቋ ምንድን ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.headofstate = 'Beatrix'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate ( Beatrix ) , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የገዛት መሪው ስም Beatrix በሆነው ሃገር ወስጥ አገልገሎት ላይ የሚውለው ቋንቋ ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1930 በፊት በተቆረቆሩት ሃገራት ወስጥ የሚነገረው ልዩ የሆነ ይፋዊ ቋንቋ አጠቃላይ በዛት ስንት ነው?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' and countrylanguage.language not in ( select countrylanguage.language from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'F' ) and countrylanguage.countrycode in ( select city.countrycode from city where city.population > 100000 and city.district not like '%1930%' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1930 በፊት በተቆረቆሩት ሃገራት ወስጥ የሚነገረው ልዩ የሆነ ይፋዊ ቋንቋ አጠቃላይ በዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1930 በፊት ለተቆረቆሩት ሃገራት ለዩ የሆነ ይፋዊ ቋንቋ አጠቃላይ በዛት ስንት ነው?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' and countrylanguage.language not in ( select countrylanguage.language from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'F' and countrylanguage.language not in ( select countrylanguage.language from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1930 በፊት ለተቆረቆሩት ሃገራት ለዩ የሆነ ይፋዊ ቋንቋ አጠቃላይ በዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በEurope ውስጥ ካለ የትኛውም ሃገር የሚበልጥ የቆዳ ሰፋት ያላቸው ሃገራት እነማን ናቸው?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select country.name from country where country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በEurope ውስጥ ካለ የትኛውም ሃገር የሚበልጥ የቆዳ ሰፋት ያላቸው ሃገራት እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በEurope ውስጥ ካለ ከየተኛውም ሃገር በላይ ስፋት ያላቸው ሃገራት የትኞቹ ናቸው?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select city.name from city join country on city.countrycode = country.code where country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በEurope ውስጥ ካለ ከየተኛውም ሃገር በላይ ስፋት ያላቸው ሃገራት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsia ውስጥ ካሉት ሃገራት ያነሰ የህዝብ ብዛት ያላቸው ሃገራት እነማን ናቸው?", "query": "select name from country where continent = 'Africa' and population < ( select max ( population ) from country where continent = 'Asia' )", "predicted_sql": "select city.name from city join country on city.countrycode = country.code where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsia ውስጥ ካሉት ሃገራት ያነሰ የህዝብ ብዛት ያላቸው ሃገራት እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ የአፍሪካ ሃገራት Asia ውስጥ ካሉት ሃገራት ያነሰ የህዝብ በዛት አላቸው?", "query": "select name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' )", "predicted_sql": "select city.name from city join country on city.countrycode = country.code where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ የአፍሪካ ሃገራት Asia ውስጥ ካሉት ሃገራት ያነሰ የህዝብ በዛት አላቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ የAsian ሃገሮች ከየትኛወም የ አፍሪካ ሃገራት የበለጠ የሀዝብ ብዛት አላቸው?", "query": "select name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' )", "predicted_sql": "select count ( city.population ) from city join country on city.countrycode = country.code where country.continent = 'Asia' and country.region = 'Eastern Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ የAsian ሃገሮች ከየትኛወም የ አፍሪካ ሃገራት የበለጠ የሀዝብ ብዛት አላቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ወስጥ ካሉ ሃገራት የበለጠ የሀዝብ ብዛት ያላቸው Asian ሃገሮች እነማን ናቸው?", "query": "select name from country where continent = 'Asia' and population > ( select min ( population ) from country where continent = 'Africa' )", "predicted_sql": "select country.name from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ወስጥ ካሉ ሃገራት የበለጠ የሀዝብ ብዛት ያላቸው Asian ሃገሮች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English የማይናገሩት ሃገራት የሃገር መለያ ቁጥራቸው ምንድን ነው?", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English የማይናገሩት ሃገራት የሃገር መለያ ቁጥራቸው ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English የማይናገሩትን ሃገራት የ ሃገር መለያ ቁጥራቸውን መልስ።", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select city.id from city where city.countrycode = 'ENG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English የማይናገሩትን ሃገራት የ ሃገር መለያ ቁጥራቸውን መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስዎች ከ English ውጪ ለላ ቋንቋ የሚጠቀሙባቸው ሃገራት የሃገር መለያ ቁጥሮች ምንድን ናቸው?", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስዎች ከ English ውጪ ለላ ቋንቋ የሚጠቀሙባቸው ሃገራት የሃገር መለያ ቁጥሮች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሰዎች English ያልሆኑ ቋንቋዎች የሚናገሩባቸውን ሃገራት የ ሃገር መለያ ቁጥር ስጥ።", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሰዎች English ያልሆኑ ቋንቋዎች የሚናገሩባቸውን ሃገራት የ ሃገር መለያ ቁጥር ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፕሬዝዳንታዊ ያልሆኑ እና English የማይናገሩት ሃገራት መለያ ቁጥራቸው ምንድን ነው?", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፕሬዝዳንታዊ ያልሆኑ እና English የማይናገሩት ሃገራት መለያ ቁጥራቸው ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ፕሬዝዳንታዊ ያልሆኑ እና English የማይናገሩትን ሃገራት መለያ ቁጠራቸውን መልስ።", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city  , country  , countrylanguage where city.countrycode = country.code and countrylanguage.countrycode = country.code and countrylanguage.language = 'English'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ፕሬዝዳንታዊ ያልሆኑ እና English የማይናገሩትን ሃገራት መለያ ቁጠራቸውን መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English ይፋዊ ቋንቋቸው ያልሆኑት የEuropean ሃገራት የትኞቹ ናቸው?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select country.name from country where country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English ይፋዊ ቋንቋቸው ያልሆኑት የEuropean ሃገራት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "English ይፋዊ ቋንቋቸው ያልሆኑት የEurope ከተማዎቸ እነማን ናቸው?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select country.name from country where country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### English ይፋዊ ቋንቋቸው ያልሆኑት የEurope ከተማዎቸ እነማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ Chinese ይፋዊ ቋንቋቸው የሆኑት ልዩ ከተማዎች በ Asian ሃገር ውስጥ ይገኛሉ?", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 't' and countrylanguage.language = 'chinese' and country.continent = 'asia'", "predicted_sql": "select city.name from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent ( Asia ) , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ Chinese ይፋዊ ቋንቋቸው የሆኑት ልዩ ከተማዎች በ Asian ሃገር ውስጥ ይገኛሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በAsia ውስጥ ያሉትን እና Chinese ይፋዊ ቋንቋቸው የሆኑትን ከተማዎች ስም መልስ።", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'Chinese' and country.continent = 'Asia'", "predicted_sql": "select city.name from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where country.continent = 'Asia' and countrylanguage.language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በAsia ውስጥ ያሉትን እና Chinese ይፋዊ ቋንቋቸው የሆኑትን ከተማዎች ስም መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትንሽ የህዝብ ብዛት ያለው ሃገር ስም፣ የነጻነት ቀን እና የቆዳ ስፋት ምንድን ነው?", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select city.name  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትንሽ የህዝብ ብዛት ያለው ሃገር ስም፣ የነጻነት ቀን እና የቆዳ ስፋት ምንድን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ዝቅተኛ የህዝብ ብዛት ያለውን ሃገር ስም፣ የነጻነት ቀን እና የቆዳ ስፋት ስጥ።", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select city.name  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ዝቅተኛ የህዝብ ብዛት ያለውን ሃገር ስም፣ የነጻነት ቀን እና የቆዳ ስፋት ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ ስፋት ያለው ሃገር የህዝብ ብዛት፣ ስም እና መሪ ማነው?", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select city.population  , city.name  , city.district from city order by city.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ ስፋት ያለው ሃገር የህዝብ ብዛት፣ ስም እና መሪ ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ ስፋት ያለውን ሃገር ስም፣ የህዝብ ብዛት እና የግዛት መሪ ስጥ።", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select city.name  , city.population  , country.region from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ ስፋት ያለውን ሃገር ስም፣ የህዝብ ብዛት እና የግዛት መሪ ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ቢያንስ 3 ቋንቋዎች የሚናገሩትን ሃገራት፤ የሃገር ስም እና የሚናግሩትን የ ቋንቋዎች ብዛት ስጥ።", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select city.name  , country.name  , count ( distinct countrylanguage.language ) as language_count from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code group by city.name  , country.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ቢያንስ 3 ቋንቋዎች የሚናገሩትን ሃገራት፤ የሃገር ስም እና የሚናግሩትን የ ቋንቋዎች ብዛት ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ2 በላይ ቋንቋዎችን የሚናገሩት ሃገራት ስም ማነው፤ እንዲሁም ስንት ቋንቋዎችን ይናገራሉ?", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ2 በላይ ቋንቋዎችን የሚናገሩት ሃገራት ስም ማነው፤ እንዲሁም ስንት ቋንቋዎችን ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ህዝባቸው ከ ከተሞች አማካይ የህዝብ ብዛት በላይ የሆኑት በ እያንዳንዱ ወረዳ ውስጥ ያሉትን ከተሞች ብዛት ፈልግ።", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select city.name  , city.population from city where city.population > 1000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ህዝባቸው ከ ከተሞች አማካይ የህዝብ ብዛት በላይ የሆኑት በ እያንዳንዱ ወረዳ ውስጥ ያሉትን ከተሞች ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከመላው ከተማ አማካይ የህዝብ ብዛት በላይ የህዝብ ብዛት ያላቸው እያንዳንዱ ወረዳ ውስጥ ያሉት ከተማዎች ብዛት ስንት  ናቸው?", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከመላው ከተማ አማካይ የህዝብ ብዛት በላይ የህዝብ ብዛት ያላቸው እያንዳንዱ ወረዳ ውስጥ ያሉት ከተማዎች ብዛት ስንት  ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካይ የእድሜ ጣሪያቸው ከ72 በላይ የሆነ ለ እያንዳንዱ መንግስት የ መንግስት ስም እና አጠቃላይ የህዝብ ብዛት ፈልግ።", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select city.name  , city.population from city where city.population > 72", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካይ የእድሜ ጣሪያቸው ከ72 በላይ የሆነ ለ እያንዳንዱ መንግስት የ መንግስት ስም እና አጠቃላይ የህዝብ ብዛት ፈልግ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካይ የእድሜ ጣሪያቸው ከ72 በላይ የሆነ መንግስት ያላቸው የተለያዩ መንግስታት እና አጠቃላይ የህዝብ ብዛታቸው ምን ያህል ነው?", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select count ( distinct city.countrycode ) as total_countries  , sum ( city.population ) as total_population from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካይ የእድሜ ጣሪያቸው ከ72 በላይ የሆነ መንግስት ያላቸው የተለያዩ መንግስታት እና አጠቃላይ የህዝብ ብዛታቸው ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካይ የህይወት ዘመን ከ72 በታች በሆነበት ለእያንዳንዱ አህጉር አማካይ የህይወት ዘመን እና አጠቃላይ የህዝብ ብዛት ያግኙ?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select count ( distinct city.id ) from city where city.population > 72000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካይ የህይወት ዘመን ከ72 በታች በሆነበት ለእያንዳንዱ አህጉር አማካይ የህይወት ዘመን እና አጠቃላይ የህዝብ ብዛት ያግኙ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካኝ ከ72 በታች ለሆኑ አህጉራት የተለያዩ አህጉራት እና አጠቃላይ የህዝብ ብዛት እና አማካይ የህይወት ዕድሜ ከእያንዳንዱ ጋር የሚዛመደው ምን ያህል ነው?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካኝ ከ72 በታች ለሆኑ አህጉራት የተለያዩ አህጉራት እና አጠቃላይ የህዝብ ብዛት እና አማካይ የህይወት ዕድሜ ከእያንዳንዱ ጋር የሚዛመደው ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ የቦታ ስፋት ያላቸው 5 ሃገራት ስሞች እና አካባቢዎች ማን ነው?", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select city.name  , city.district  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code order by city.population desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ የቦታ ስፋት ያላቸው 5 ሃገራት ስሞች እና አካባቢዎች ማን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የ5ቱን ትላልቅ ሀገራት ስሞች እና የገጽታ ቦታዎች መልስ።", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select city.name  , city.district  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የ5ቱን ትላልቅ ሀገራት ስሞች እና የገጽታ ቦታዎች መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሶስቱ ከፍተኛ የህዝብ ቁጥር ያላቸው ሃገራት ስም ማነው?", "query": "select name from country order by population desc limit 3", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሶስቱ ከፍተኛ የህዝብ ቁጥር ያላቸው ሃገራት ስም ማነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ የህዝብ ቁጥር ያላቸው 3 ሀገራት ስም መልስ።", "query": "select name from country order by population desc limit 3", "predicted_sql": "select city.name from city limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ የህዝብ ቁጥር ያላቸው 3 ሀገራት ስም መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "3 ዝቅተኛ የህዝብ ብዛት ያላቸው ሀገራት ስም ማን ይባላል?", "query": "select name from country order by population asc limit 3", "predicted_sql": "select sqlite_sequence.name from sqlite_sequence", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 3 ዝቅተኛ የህዝብ ብዛት ያላቸው ሀገራት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም ጥቂት የህዝብ ቁጥር ያላቸውን የ3 ሀገራት ስም መልስ።", "query": "select name from country order by population asc limit 3", "predicted_sql": "select city.name from city limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም ጥቂት የህዝብ ቁጥር ያላቸውን የ3 ሀገራት ስም መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ስንት አገሮች አሉ?", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select count ( distinct city.name ) from city where city.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ስንት አገሮች አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ያሉትን አገሮች ቁጠር።", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ያሉትን አገሮች ቁጠር። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "80000 የህዝብ ቁጥር ያላቸው በአውሮፓ አህጉር ውስጥ ያሉ ሀገራት ስም ማን ይባላል?", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 80000 የህዝብ ቁጥር ያላቸው በአውሮፓ አህጉር ውስጥ ያሉ ሀገራት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአውሮፓ ውስጥ ከሚገኙ ሃገራት 80000 የህዝብ ቁጥር ያላቸውን ሃገራት ስም ይስጡ።", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select city.name from city where city.population > 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአውሮፓ ውስጥ ከሚገኙ ሃገራት 80000 የህዝብ ቁጥር ያላቸውን ሃገራት ስም ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሰሜን አሜሪካ አህጉር ከ3000 በላይ ስፋት ያላቸው ሀገራት አጠቃላይ የህዝብ ብዛት እና አማካይ አማካይ የወለል ስፋት ስንት ነው?", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select count ( distinct city.district ) as num_districts from city where city.population > 3000 and city.countrycode = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሰሜን አሜሪካ አህጉር ከ3000 በላይ ስፋት ያላቸው ሀገራት አጠቃላይ የህዝብ ብዛት እና አማካይ አማካይ የወለል ስፋት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሰሜን አሜሪካ ከ3000 በላይ የወለል ስፋት ካላቸው ሃገራት ጋር የሚዛመደውን አጠቃላይ የህዝብ ብዛት እና አማካይ የገጽታ ስፋት ይስጡ።", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select city.name  , city.population  , country.name  , country.population from city join country on city.countrycode = country.code where country.continent = 'North America' and city.population > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሰሜን አሜሪካ ከ3000 በላይ የወለል ስፋት ካላቸው ሃገራት ጋር የሚዛመደውን አጠቃላይ የህዝብ ብዛት እና አማካይ የገጽታ ስፋት ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ህዝባቸው ከ160000 እስከ 900000 ያሉት ከተሞች ማን ናቸው?", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ህዝባቸው ከ160000 እስከ 900000 ያሉት ከተሞች ማን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ160000 እስከ 900000 ህዝብ ያላቸውን የከተማ ስሞች መልስ።", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ160000 እስከ 900000 ህዝብ ያላቸውን የከተማ ስሞች መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በብዙ ሀገራት የሚነገረው የትኛው ቋንቋ ነው?", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በብዙ ሀገራት የሚነገረው የትኛው ቋንቋ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአብዛኛ ውስጥ የሚነገረውን ቋንቋ መልስ።", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአብዛኛ ውስጥ የሚነገረውን ቋንቋ መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእያንዳንዱ ሀገር ውስጥ ከፍተኛ ቁጥር ያላቸው ሰዎች የሚናገሩት ቋንቋ ምንድነው?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.percentage > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእያንዳንዱ ሀገር ውስጥ ከፍተኛ ቁጥር ያላቸው ሰዎች የሚናገሩት ቋንቋ ምንድነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የተለያዩ ሀገራት የሃገር ኮድ ምንድን ነው፤ እና ለእያንዳንዱ ሃግራት ከፍተኛው ህዝብ የሚናገሩት ቋንቋዎች ምንድናቸው?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select city.countrycode  , countrylanguage.language from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የተለያዩ ሀገራት የሃገር ኮድ ምንድን ነው፤ እና ለእያንዳንዱ ሃግራት ከፍተኛው ህዝብ የሚናገሩት ቋንቋዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስፓኒሽ በብዛት የሚነገርባቸው ሃገራት ብዛት ስንት ነው?", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስፓኒሽ በብዛት የሚነገርባቸው ሃገራት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ብዛት ቁጠር።", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሰዎች ከፍተኛው መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ኮድ ምንድን ናቸው?", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሰዎች ከፍተኛው መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ኮድ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስፓኒሽ በብዛት የሚነገርባቸው ሃገራት ኮዶችን መልስ።", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city inner join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስፓኒሽ በብዛት የሚነገርባቸው ሃገራት ኮዶችን መልስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "orchestra", "question": "ስንት ተቆጣጣሪዎች አሉ?", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( * ) from conductor  , orchestra  , performance  , show where orchestra.conductor_id = conductor.conductor_id and performance.orchestra_id = orchestra.orchestra_id and show.performance_id = performance.performance_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ስንት ተቆጣጣሪዎች አሉ? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የተቆጣጣሪዎችን ብዛት ቁጠር።", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( * ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የተቆጣጣሪዎችን ብዛት ቁጠር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በእድሜ ቅደም ተከተል ውስጥ የተቆጣጣሪዎችን ስም ዘርዝር።", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በእድሜ ቅደም ተከተል ውስጥ የተቆጣጣሪዎችን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በዕድሜ የተቀመጡ መሪዎች ስም ማን ነው?", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በዕድሜ የተቀመጡ መሪዎች ስም ማን ነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ዜጎቻቸው USA ያልሆኑ መሪዎች ስም ማን ናቸው?", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor where conductor.nationality = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality ( USA ) , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ዜጎቻቸው USA ያልሆኑ መሪዎች ስም ማን ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የ USA ዜግነት የሌላቸውን ተቆጣጣሪዎች ስም መልስ።", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor where conductor.nationality = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality ( USA ) , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የ USA ዜግነት የሌላቸውን ተቆጣጣሪዎች ስም መልስ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ተመስርተው በነበሩበት የዓመታት ቅደም ተከተል መሰራት የኦርኬስትራዎች ኩባንያዎች እነማን ናቸው?", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ተመስርተው በነበሩበት የዓመታት ቅደም ተከተል መሰራት የኦርኬስትራዎች ኩባንያዎች እነማን ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በተመሠረቱባቸው ዓመታት ቅደም ተከተል የኦርኬስትራ ሪኮርድ ኩባንያዎችን መልስ።", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በተመሠረቱባቸው ዓመታት ቅደም ተከተል የኦርኬስትራ ሪኮርድ ኩባንያዎችን መልስ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በትዕይንቶች ላይአማካይ ተሳትፎ ምን ያህል ነው?", "query": "select avg ( attendance ) from show", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በትዕይንቶች ላይአማካይ ተሳትፎ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በሁሉም ትዕይንቶች ላይ አማካኝ ተሳትፎ ይመለስ።", "query": "select avg ( attendance ) from show", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በሁሉም ትዕይንቶች ላይ አማካኝ ተሳትፎ ይመለስ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "live final ያልሆነ ትርኢቶች ከፍተኛ እና ዝቅተኛ ድርሻ ስንት ነው?", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "select performance.type from performance where performance.type = 'Live final' or performance.type = 'Final'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type ( Live final ) , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### live final ያልሆነ ትርኢቶች ከፍተኛ እና ዝቅተኛ ድርሻ ስንት ነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የlive final አይነት የሌላቸው ትርኢቶች ከፍተኛውን እና ዝቅተኛውን ድርሻ መልስ።", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "select performance.type from show join performance on show.performance_id = performance.performance_id where show.result = 'live final'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የlive final አይነት የሌላቸው ትርኢቶች ከፍተኛውን እና ዝቅተኛውን ድርሻ መልስ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "መሪዎች ስንት የተለያየ ዜግነት አሏቸው?", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select distinct type from performance", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### መሪዎች ስንት የተለያየ ዜግነት አሏቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የኮንዳክተሮች የተለያዩ ብሔረሰቦችን ቁጥር ቁጠር።", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የኮንዳክተሮች የተለያዩ ብሔረሰቦችን ቁጥር ቁጠር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በሥራ ዓመታት ቅድመ ተከተል መሰረት የተቆጣጣሪዎችን ስም ዘርዝሩ።", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በሥራ ዓመታት ቅድመ ተከተል መሰረት የተቆጣጣሪዎችን ስም ዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በሠሩት ዓመታት ብዛት ቅድመ ተከተል የተቀመጡ መሪዎች ስም ማን ነው?", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በሠሩት ዓመታት ብዛት ቅድመ ተከተል የተቀመጡ መሪዎች ስም ማን ነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በጣም ብዙ የስራ ዓመታት ያለውን የተቆጣጣሪ ስም ዘርዝር።", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በጣም ብዙ የስራ ዓመታት ያለውን የተቆጣጣሪ ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ለብዙ ዓመታት የሠራው መሪ ስም ማን ይባላል?", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id join performance on orchestra.orchestra_id = performance.orchestra_id join show on performance.performance_id = show.performance_id where show.result = 'ሠራው' group by conductor.name having count ( distinct performance.date ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ለብዙ ዓመታት የሠራው መሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የተቆጣጣሪዎችን ስም እና ያካሄዱትን ኦርኬስትራ አሳይ።", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የተቆጣጣሪዎችን ስም እና ያካሄዱትን ኦርኬስትራ አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የተቆጣጣሪዎችን ስም ማን ነው?ያካሄዱትስ ኦርኬስትራ?", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የተቆጣጣሪዎችን ስም ማን ነው?ያካሄዱትስ ኦርኬስትራ? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ ኦርኬስትራዎችን ያካሄዱትን መሪዎች ስም አሳይ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select performance.performance_id from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id where orchestra.orchestra = 'ኦርኬስትራ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ ኦርኬስትራዎችን ያካሄዱትን መሪዎች ስም አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ ኦርኬስትራ ውስጥ ያገለገሉ መሪዎች ስም ማን ይባላል?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ ኦርኬስትራ ውስጥ ያገለገሉ መሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ብዙ ኦርኬስትራዎችን ያካሄደውን መሪ ስም አሳይ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ብዙ ኦርኬስትራዎችን ያካሄደውን መሪ ስም አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ብዙ ኦርኬስትራዎችን ያካሄደው መሪ ስም ማን ይባላል?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ብዙ ኦርኬስትራዎችን ያካሄደው መሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባክዎ ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያካሄደውን መሪ ስም አሳይ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባክዎ ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያካሄደውን መሪ ስም አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያደረጉ መሪዎች ስም ማን ይባላል?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select performance.orchestra_id  , orchestra.orchestra from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id where performance.date >= '2008-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያደረጉ መሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባክዎ የተለያዩ ሪከርድ ኩባንያዎችን እና ኦርኬስትራዎችን ተዛማጅ ቁጥር አሳይ።", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባክዎ የተለያዩ ሪከርድ ኩባንያዎችን እና ኦርኬስትራዎችን ተዛማጅ ቁጥር አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እያንዳንዱ ኩባንያ ስንት ኦርኬስትራዎችን ያስተዳድራል?", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select count ( distinct orchestra.orchestra_id ) from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እያንዳንዱ ኩባንያ ስንት ኦርኬስትራዎችን ያስተዳድራል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባክዎ የኦርኬስትራዎችን ሪከርድ ቅርፀቶችን በቅደም ተከተል አሳይ።", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባክዎ የኦርኬስትራዎችን ሪከርድ ቅርፀቶችን በቅደም ተከተል አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በድግግሞሽ የተደረደሩ የኦርኬስትራ ዋና ዋና ቅርጸቶች ምንድን ናቸው?", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select performance.type from performance", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በድግግሞሽ የተደረደሩ የኦርኬስትራ ዋና ዋና ቅርጸቶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በጣም ብዙ ኦርኬስትራዎች የሚጋሩትን ሪከርድ ኩባንያ ዘርዝር።", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በጣም ብዙ ኦርኬስትራዎች የሚጋሩትን ሪከርድ ኩባንያ ዘርዝር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከፍተኛ ቁጥር ያላቸው ኦርኬስትራዎች የሚጠቀሙበት ሪከርድ ኩባንያ ምንድነው?", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select orchestra.orchestra_id  , orchestra.orchestra  , orchestra.conductor_id  , orchestra.record_company  , orchestra.year_of_founded  , orchestra.major_record_format from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከፍተኛ ቁጥር ያላቸው ኦርኬስትራዎች የሚጠቀሙበት ሪከርድ ኩባንያ ምንድነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ምንም ትእይንት የሌላቸውን ኦርኬስትራዎችን ስም ዘርዝር።", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ምንም ትእይንት የሌላቸውን ኦርኬስትራዎችን ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ምንም ትርኢት የሌላቸው ኦርኬስትራዎች የትኞቹ ናቸው?", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ምንም ትርኢት የሌላቸው ኦርኬስትራዎች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ2003 በፊት እና ከ2003 በኋላ በተመሰረቱ ኦርኬስትራዎች የተጋሩት ሪከርድ ኩባንያዎችን አሳይ።", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select * from orchestra where orchestra.year_of_founded >= 2003 and orchestra.year_of_founded <= 2003", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ2003 በፊት እና ከ2003 በኋላ በተመሰረቱ ኦርኬስትራዎች የተጋሩት ሪከርድ ኩባንያዎችን አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ2003 በፊት የተመሰረቱት እና ከ2003 በኋላ የተመሰረቱት ሁለቱም ኦርኬስትራዎች የሚጠቀሙባቸው ሪከርድ ኩባንያዎች ምንድ ናቸው?", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.year_of_founded >= 2003 and orchestra.year_of_founded <= 2003", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ2003 በፊት የተመሰረቱት እና ከ2003 በኋላ የተመሰረቱት ሁለቱም ኦርኬስትራዎች የሚጠቀሙባቸው ሪከርድ ኩባንያዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የመዝገብ ቅርጸታቸው CD ወይም DVD የሆኑ ኦርኬስትራዎችን ቁጥር ፈልግ።", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select orchestra.orchestra_id  , orchestra.orchestra  , orchestra.conductor_id  , orchestra.record_company  , orchestra.year_of_founded  , orchestra.major_record_format from orchestra where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format ( CD , DVD ) | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የመዝገብ ቅርጸታቸው CD ወይም DVD የሆኑ ኦርኬስትራዎችን ቁጥር ፈልግ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ሲዲ ወይም ዲቪዲ ያላቸውን ኦርኬስትራዎች በሪከርድ ፎርማታቸው መሰረት ቁጠር።", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ሲዲ ወይም ዲቪዲ ያላቸውን ኦርኬስትራዎች በሪከርድ ፎርማታቸው መሰረት ቁጠር። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ ትእይንት ያሳዩ ኦርኬስትራዎች የተመሰረቱበትን ዓመታት አሳይ።", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select performance.date from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id where orchestra.year_of_founded > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ ትእይንት ያሳዩ ኦርኬስትራዎች የተመሰረቱበትን ዓመታት አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ አፈፃፀም ላሳዩ ኦርኬስትራዎች የተመሰረቱ ዓመታት ምንድ ናቸው?", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ አፈፃፀም ላሳዩ ኦርኬስትራዎች የተመሰረቱ ዓመታት ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "network_1", "question": "ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ቁጠር።", "query": "select count ( * ) from highschooler", "predicted_sql": "select highschooler.id from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ቁጠር። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የእያንዳንዱን የሁለተኛ ደረጃ ተማሪ ስም እና ውጤት አሳይ።", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የእያንዳንዱን የሁለተኛ ደረጃ ተማሪ ስም እና ውጤት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ስሞች እና ውጤቶች ምንድ ናቸው?", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ስሞች እና ውጤቶች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ሁሉንም ውጤት አሳይ።", "query": "select grade from highschooler", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ሁሉንም ውጤት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ደረጃ ስንት ነው?", "query": "select grade from highschooler", "predicted_sql": "select count ( distinct highschooler.grade ) as num_grades from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle በየትኛው ክፍል ነው ያለው?", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle በየትኛው ክፍል ነው ያለው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle ለተባለው የሁለተኛ ደረጃ ተማሪ ውጤቱን መልስ።", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle ለተባለው የሁለተኛ ደረጃ ተማሪ ውጤቱን መልስ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የ10ኛ ክፍል ተማሪዎችን ስም አሳይ።", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የ10ኛ ክፍል ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle የሚባል የሁለተኛ ደረጃ ተማሪ መታወቂያ አሳይ።", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle የሚባል የሁለተኛ ደረጃ ተማሪ መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የKyle መታወቂያ ምንድን ነው?", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የKyle መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ9ኛ ወይም በ10ኛ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( * ) from highschooler where grade = 9 or grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ9ኛ ወይም በ10ኛ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ9ኛ ወይም በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ቁጠር።", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 9 or highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ9ኛ ወይም በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ቁጠር። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ለእያንዳንዱ ክፍል የሁለተኛ ደረጃ ተማሪዎችን ብዛት አሳይ።", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select count ( * ) from highschooler where grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ለእያንዳንዱ ክፍል የሁለተኛ ደረጃ ተማሪዎችን ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በእያንዳንዱ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select count ( distinct highschooler.grade ) as num_grades from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በእያንዳንዱ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የትኛው ክፍል ከፍተኛ ሁለተኛ ደረጃ ተማሪ አለው?", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.grade from highschooler order by highschooler.grade desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የትኛው ክፍል ከፍተኛ ሁለተኛ ደረጃ ተማሪ አለው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛ ቁጥር ያለው የሁለተኛ ደረጃ ተማሪዎች ያለውን ክፍል መልስ።", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛ ቁጥር ያለው የሁለተኛ ደረጃ ተማሪዎች ያለውን ክፍል መልስ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 4 ተማሪዎች ያላቸውን ሁሉንም ክፍሎች አሳየኝ።", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 4 ተማሪዎች ያላቸውን ሁሉንም ክፍሎች አሳየኝ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "4 ወይም ከዚያ በላይ የሁለተኛ ደረጃ ተማሪዎች ያሉት የትኞቹ ክፍሎች ናቸው?", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 4 ወይም ከዚያ በላይ የሁለተኛ ደረጃ ተማሪዎች ያሉት የትኞቹ ክፍሎች ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የተማሪ መታወቂያዎችን እና የጓደኛቸውን ቁጥር ከእያንዳንዱ ጋር አሳይ።", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የተማሪ መታወቂያዎችን እና የጓደኛቸውን ቁጥር ከእያንዳንዱ ጋር አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "እያንዳንዱ ተማሪ ስንት ጓደኞች አሉት?", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### እያንዳንዱ ተማሪ ስንት ጓደኞች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ስም እና ተዛማጅ የጓደኞቻቸውን ብዛት አሳይ።", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as num_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ስም እና ተዛማጅ የጓደኞቻቸውን ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎች ስም እና እያንዳንዳቸው ስንት ጓደኞች አሏቸው?", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( * ) as num_of_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( * ) = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎች ስም እና እያንዳንዳቸው ስንት ጓደኞች አሏቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛ ቁጥር ያለው ጓደኞች ያሉት የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛ ቁጥር ያለው ጓደኞች ያሉት የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪውን ስም ከብዙ ጓደኞች ጋር መልስ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪውን ስም ከብዙ ጓደኞች ጋር መልስ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 3 ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11 limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 3 ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "3 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 3 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪውን የKyle ጓደኞችን ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪውን የKyle ጓደኞችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪ Kyle ጓደኞችን ስም መልስ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪ Kyle ጓደኞችን ስም መልስ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪ Kyle ስንት ጓደኞች አሉት?", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪ Kyle ስንት ጓደኞች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle ያለው የጓደኞች ብዛት ይቁጠ።", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle ያለው የጓደኞች ብዛት ይቁጠ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ምንም ጓደኛ የሌላቸው የሁሉም ተማሪዎች መታወቂያ አሳይ።", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.name from highschooler join friend on friend.friend_id = highschooler.id join likes on likes.student_id = highschooler.id where friend.student_id = 1 and likes.liked_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ምንም ጓደኛ የሌላቸው የሁሉም ተማሪዎች መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸው የሁለተኛ ደረጃ ተማሪዎች መታወቂያ ምንድን ናቸው?", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸው የሁለተኛ ደረጃ ተማሪዎች መታወቂያ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ።", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኞች የሌላቸው ተማሪዎች ስም ማን ይባላል?", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኞች የሌላቸው ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ የሁለተኛ ደረጃ ተማሪዎች መታወቂያ አሳይ።", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ የሁለተኛ ደረጃ ተማሪዎች መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ሁለቱም ጓደኞች ያሏቸው እና የተወደዱ ተማሪዎች መታወቂያ ምንድን ናቸው?", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ሁለቱም ጓደኞች ያሏቸው እና የተወደዱ ተማሪዎች መታወቂያ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "አንዳንድ ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ ተማሪዎችን ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 9", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### አንዳንድ ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ለእያንዳንዱ የተማሪ መታወቂያ የወደዱትን ቁጥር ቁጠር።", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select highschooler.id from friend join highschooler on friend.friend_id = highschooler.id where friend.student_id = [student_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ለእያንዳንዱ የተማሪ መታወቂያ የወደዱትን ቁጥር ቁጠር። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከእያንዳንዱ የተማሪ መታወቂያ ጋር ስንት መውደዶች ይዛመዳሉ?", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከእያንዳንዱ የተማሪ መታወቂያ ጋር ስንት መውደዶች ይዛመዳሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "መውደዶች ያላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም እና ለእያንዳንዳቸው የተወደዱ ቁጥሮች አሳይ።", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### መውደዶች ያላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም እና ለእያንዳንዳቸው የተወደዱ ቁጥሮች አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "መውደዶች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ምንድ ናቸው እና እያንዳንዳቸው ስንት መውደዶች አሏቸው?", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### መውደዶች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ምንድ ናቸው እና እያንዳንዳቸው ስንት መውደዶች አሏቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛ ቁጥር ያላቸውን መውደዶች ያለው የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛ ቁጥር ያላቸውን መውደዶች ያለው የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ብዙ መውደዶች ያለውን የተማሪው ስም ስጥ።", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ብዙ መውደዶች ያለውን የተማሪው ስም ስጥ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 2 ላይክ ያደረጉ ተማሪዎችን ስም አሳይ።", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 2 ላይክ ያደረጉ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "2 ወይም ከዚያ በላይ ላይክ ያደረጉ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 2 ወይም ከዚያ በላይ ላይክ ያደረጉ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከ5 በላይ ውጤት ያላቸው እና ቢያንስ 2 ጓደኞች ያሏቸውን ተማሪዎች ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12 limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከ5 በላይ ውጤት ያላቸው እና ቢያንስ 2 ጓደኞች ያሏቸውን ተማሪዎች ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከ5 በላይ ውጤት ያላቸው እና 2 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2 limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከ5 በላይ ውጤት ያላቸው እና 2 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle ስንት መውደዶች አሉት?", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle ስንት መውደዶች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "Kyle የተባለ የሁለተኛ ደረጃ ተማሪ ያለውን የተወደዱ ብዛት መልስ።", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler where grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name ( Kyle ) , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### Kyle የተባለ የሁለተኛ ደረጃ ተማሪ ያለውን የተወደዱ ብዛት መልስ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "አንዳንድ ጓደኞች ያላቸውን ተማሪዎች ሁሉ አማካይ ውጤት አግኝ።", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 9", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### አንዳንድ ጓደኞች ያላቸውን ተማሪዎች ሁሉ አማካይ ውጤት አግኝ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኞች ያሏቸው ተማሪዎች አማካይ ውጤት ስንት ነው?", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኞች ያሏቸው ተማሪዎች አማካይ ውጤት ስንት ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛ ውጤት አግኝ።", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name from highschooler join friend on friend.friend_id = highschooler.id join likes on likes.student_id = highschooler.id where friend.student_id = 1 and likes.liked_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛ ውጤት አግኝ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛው ውጤት ምንድን ነው?", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select * from highschooler where grade = 9", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛው ውጤት ምንድን ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "dog_kennels", "question": "የየትኛው ግዛት ባለቤቶች እና ባለሙያዎች እዚያ ይኖራሉ?", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select breeds.breed_name  , owners.first_name  , owners.last_name from breeds join dogs on breeds.breed_code = dogs.breed_code join owners on dogs.owner_id = owners.owner_id where dogs.date_departed is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የየትኛው ግዛት ባለቤቶች እና ባለሙያዎች እዚያ ይኖራሉ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለቱም ባለቤቶች እና ባለሙያዎች የሚኖሩባቸውን ግዛቶች አገኝ።", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለቱም ባለቤቶች እና ባለሙያዎች የሚኖሩባቸውን ግዛቶች አገኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በማንኛውም ህክምና ያለፉ ውሾች አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select count ( * ) as num_tables from sqlite_master where type = 'table'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በማንኛውም ህክምና ያለፉ ውሾች አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾች አማካይ ዕድሜን አግኝ።", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾች አማካይ ዕድሜን አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በኢንዲያና ግዛት ውስጥ የሚኖሩት ወይም ከ2 በላይ ህክምናዎች ላይ ህክምና ያደረጉት የትኞቹ ባለሙያዎች ናቸው? የእሱን መታወቂያ፣ የአያት ስም እና የሞባይል ስልኩን ዘርዝር።", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address  , owners.home_phone  , owners.cell_number from owners where owners.owner_id in ( select dogs.owner_id from dogs where dogs.size_code = 'እንደምትኞች' or dogs.breed_code = 'እንደምትኞች' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በኢንዲያና ግዛት ውስጥ የሚኖሩት ወይም ከ2 በላይ ህክምናዎች ላይ ህክምና ያደረጉት የትኞቹ ባለሙያዎች ናቸው? የእሱን መታወቂያ፣ የአያት ስም እና የሞባይል ስልኩን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በኢንዲያና ግዛት የሚኖሩ ወይም ከሁለት በላይ ህክምናዎችን ያደረጉ ባለሙያዎችን መታወቂያ፣ የኣባትእና የሞባይል ስልክ አግኝ።", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በኢንዲያና ግዛት የሚኖሩ ወይም ከሁለት በላይ ህክምናዎችን ያደረጉ ባለሙያዎችን መታወቂያ፣ የኣባትእና የሞባይል ስልክ አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኛዎቹ ውሾች ናቸው ባለቤታቸውን ለህክምና ከ1000 በላይ ወጪ ያላወጡት? የውሻ ስሞችን ዘርዝር።", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs where dogs.weight > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኛዎቹ ውሾች ናቸው ባለቤታቸውን ለህክምና ከ1000 በላይ ወጪ ያላወጡት? የውሻ ስሞችን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ባለቤቱ ከ1000 በላይ ለህክምና ያላወጣላቸው የውሻዎች ስም ማን ይባላል?", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs where dogs.weight > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ባለቤቱ ከ1000 በላይ ለህክምና ያላወጣላቸው የውሻዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ የመጀመሪያ ስሞች ናቸው ለባለሞያዎች ወይም ለባለቤቶች ጥቅም ላይ ውለው ነገር ግን እንደ ውሻ ስም ጥቅም ላይ ያልዋሉ?", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select dogs.name from dogs where dogs.date_of_birth >= '2020-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ የመጀመሪያ ስሞች ናቸው ለባለሞያዎች ወይም ለባለቤቶች ጥቅም ላይ ውለው ነገር ግን እንደ ውሻ ስም ጥቅም ላይ ያልዋሉ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለባለሞያዎች ወይም ለባለቤቶች የሚያገለግሉ ነገር ግን እንደ ውሻ ስም የማይጠቀሙትን የመጀመሪያ ስሞች አግኝ።", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለባለሞያዎች ወይም ለባለቤቶች የሚያገለግሉ ነገር ግን እንደ ውሻ ስም የማይጠቀሙትን የመጀመሪያ ስሞች አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኛው ባለሙያ ነው በውሻ ላይ ምንም አይነት ህክምና ያላደረገው? የባለሙያውን መታወቂያ፣ ሚና እና ኢሜይል ዘርዝር።", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "select professionals.first_name  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number from professionals where professionals.role_code = 'Manager'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኛው ባለሙያ ነው በውሻ ላይ ምንም አይነት ህክምና ያላደረገው? የባለሙያውን መታወቂያ፣ ሚና እና ኢሜይል ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በውሻ ላይ ምንም አይነት ህክምና ያላደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና ኢሜይል ስጠኝ።", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በውሻ ላይ ምንም አይነት ህክምና ያላደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና ኢሜይል ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የብዙ ውሾች ባለቤት የቱ ነው? የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ዘርዝር።", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የብዙ ውሾች ባለቤት የቱ ነው? የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች ያለውን የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም መልስ።", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች ያለውን የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም መልስ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ቢያንስ ሁለት ሕክምናዎችን የሠሩት ባለሙያዎች የትኞቹ ናቸው? የባለሙያውን መታወቂያ፣ ሚና እና የመጀመሪያ ስም ዘርዝር።", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select owners.first_name  , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id where dogs.abandoned_yn = 'Yes'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ቢያንስ ሁለት ሕክምናዎችን የሠሩት ባለሙያዎች የትኞቹ ናቸው? የባለሙያውን መታወቂያ፣ ሚና እና የመጀመሪያ ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለት ወይም ከዚያ በላይ ሕክምናዎችን ያደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና የመጀመሪያ ስም ምንድ ናቸው?", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለት ወይም ከዚያ በላይ ሕክምናዎችን ያደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና የመጀመሪያ ስም ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች ያሉት ዝርያ ስም ማን ይባላል?", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች ያሉት ዝርያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች የቱ ዝርያ አላቸው? የዘር ስም ስጠኝ።", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች የቱ ዝርያ አላቸው? የዘር ስም ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሾቹ ብዙ ሕክምናዎችን የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና የአያት ስም ዘርዝር።", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name  , breeds.breed_code from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሾቹ ብዙ ሕክምናዎችን የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና የአያት ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በውሾቹ ህክምና ላይ ብዙ ወጪ ያደረገውን የባለቤቱን መታወቂያ እና የአያት ስም ይንገሩኝ።", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በውሾቹ ህክምና ላይ ብዙ ወጪ ያደረገውን የባለቤቱን መታወቂያ እና የአያት ስም ይንገሩኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በአጠቃላይ አነስተኛውን ገንዘብ የሚያስከፍለው የሕክምና ዓይነት መግለጫ ምንድነው?", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በአጠቃላይ አነስተኛውን ገንዘብ የሚያስከፍለው የሕክምና ዓይነት መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "አጠቃላይ ወጪው በጣም ዝቅተኛ የሆነውን የሕክምና ዓይነት መግለጫ ስጠኝ።", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### አጠቃላይ ወጪው በጣም ዝቅተኛ የሆነውን የሕክምና ዓይነት መግለጫ ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሾቻቸው በድምሩ ከፍተኛውን ገንዘብ የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና Zip codeአሳይ።", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሾቻቸው በድምሩ ከፍተኛውን ገንዘብ የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና Zip codeአሳይ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጠቅላላው ብዙ ገንዘብ ለውሾቹ ያጠፋውን የባለቤቱን መታወቂያ እና Zip codeአግኝ።", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.email_address  , owners.home_phone  , owners.cell_number  , owners.zip_code from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጠቅላላው ብዙ ገንዘብ ለውሾቹ ያጠፋውን የባለቤቱን መታወቂያ እና Zip codeአግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ቢያንስ ሁለት ዓይነት ሕክምናዎችን የሠሩት ባለሙያዎች የትኞቹ ናቸው? የባለሙያ መታወቂያውን እና የሞባይል ስልኩን ዘርዝር።", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ቢያንስ ሁለት ዓይነት ሕክምናዎችን የሠሩት ባለሙያዎች የትኞቹ ናቸው? የባለሙያ መታወቂያውን እና የሞባይል ስልኩን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለት ወይም ከዚያ በላይ የሕክምና ዓይነቶችን የሚሠሩ ባለሙያዎችን መታወቂያ እና ሞባይል አግኝ።", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለት ወይም ከዚያ በላይ የሕክምና ዓይነቶችን የሚሠሩ ባለሙያዎችን መታወቂያ እና ሞባይል አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ከአማካይ በታች በሆነ ወጪ ህክምና ያደረጉ ባለሙያዎች የመጀመሪያ ስም እና የኣባት ስምማን ናቸው?", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ከአማካይ በታች በሆነ ወጪ ህክምና ያደረጉ ባለሙያዎች የመጀመሪያ ስም እና የኣባት ስምማን ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ከአማካይ ያነሰ ዋጋ ያለው ህክምና የትኞቹ ባለሙያዎች ናቸው? የቲዎር የመጀመሪያ ስሞችን እና የመጨረሻ ስሞችን ስጠኝ።", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select charges.charge_type  , charges.charge_amount from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ከአማካይ ያነሰ ዋጋ ያለው ህክምና የትኞቹ ባለሙያዎች ናቸው? የቲዎር የመጀመሪያ ስሞችን እና የመጨረሻ ስሞችን ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሕክምና የሚካሄድበትን ቀን፣ ከሠራው ባለሙያ ስም ጋር ዘርዝር።", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select dogs.date_of_birth  , owners.first_name || ' ' || owners.last_name as owner_name from dogs join owners on dogs.owner_id = owners.owner_id where dogs.name = 'Max'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሕክምና የሚካሄድበትን ቀን፣ ከሠራው ባለሙያ ስም ጋር ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሕክምና ቀን እና የቀዶ ጥገና ባለሙያው የመጀመሪያ ስም ማን ናቸው?", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select dogs.name from dogs where dogs.date_of_birth = '2021-01-01' and dogs.gender = 'Male'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሕክምና ቀን እና የቀዶ ጥገና ባለሙያው የመጀመሪያ ስም ማን ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱን ሕክምና ወጪ እና ተዛማጅ የሕክምና ዓይነት መግለጫ ዘርዝር።", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱን ሕክምና ወጪ እና ተዛማጅ የሕክምና ዓይነት መግለጫ ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሕክምና ዋጋ እና የሕክምና ዓይነት መግለጫ ምን ያህል ነው?", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select charges.charge_type  , charges.charge_amount  , treatment_types.treatment_type_description from charges join treatments on charges.charge_id = treatments.treatment_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code where treatments.dog_id = [dog_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሕክምና ዋጋ እና የሕክምና ዓይነት መግለጫ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱን ባለቤት ስም፣ የአያት ስም እና የውሻውን መጠን ዘርዝር።", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where dogs.age > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱን ባለቤት ስም፣ የአያት ስም እና የውሻውን መጠን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዳቸው ባለቤት ስም፣ የአያት ስም እና የውሻቸው መጠን ስንት ናቸው?", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዳቸው ባለቤት ስም፣ የአያት ስም እና የውሻቸው መጠን ስንት ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የባለቤቱን ስም እና የውሾች ስም ዘርዝር።", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select breeds.breed_name  , dogs.name from breeds  , dogs where breeds.breed_code = dogs.breed_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የባለቤቱን ስም እና የውሾች ስም ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለቤት የመጀመሪያ ስም እና የውሻቸው ስም ማን ይባላል?", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለቤት የመጀመሪያ ስም እና የውሻቸው ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብርቅዬ ዝርያ ያላቸውን ውሾች ስም እና የሕክምና ጊዜያቸውን ዘርዝር።", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብርቅዬ ዝርያ ያላቸውን ውሾች ስም እና የሕክምና ጊዜያቸውን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ ውሾች በጣም ብርቅዬ ናቸው? ስማቸውን እና የሕክምና ቀኖቻቸውን አሳይ።", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select breeds.breed_name  , charges.charge_type  , charges.charge_amount from breeds join dogs on dogs.breed_code = breeds.breed_code join charges on charges.charge_id = dogs.dog_id where dogs.abandoned_yn = 'Y'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ ውሾች በጣም ብርቅዬ ናቸው? ስማቸውን እና የሕክምና ቀኖቻቸውን አሳይ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በVirginia የሚኖር ባለቤት ያለው ውሻ የቱ ነው? የባለቤቱን ስም እና የውሻውን ስም ይዘርዝሩ።", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where owners.state = 'Virginia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በVirginia የሚኖር ባለቤት ያለው ውሻ የቱ ነው? የባለቤቱን ስም እና የውሻውን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በVirginia የሚኖሩ የባለቤቶችን የመጀመሪያ ስም እና የውሻ ስሞችን አግኝ።", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where owners.state = 'Virginia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በVirginia የሚኖሩ የባለቤቶችን የመጀመሪያ ስም እና የውሻ ስሞችን አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾች የሚመጡበት ቀን እና የሚሄዱበት ቀን ስንት ነው?", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾች የሚመጡበት ቀን እና የሚሄዱበት ቀን ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ህክምና ያገኙ ውሾች የሚመጡበትን ቀን እና የሚሄዱበትን ቀን አግኝ።", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ህክምና ያገኙ ውሾች የሚመጡበትን ቀን እና የሚሄዱበትን ቀን አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ትንሹ ውሻ ያለውን የባለቤቱን የኣባት ስምዘርዝር።", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ትንሹ ውሻ ያለውን የባለቤቱን የኣባት ስምዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የመጨረሻ ትንሽ ውሻ ያለው ማን ነው? የመጨረሻ ስሙን ስጠኝ።", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select breeds.breed_name from breeds join dogs on dogs.breed_code = breeds.breed_code where dogs.date_arrived = ( select min ( date_arrived ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የመጨረሻ ትንሽ ውሻ ያለው ማን ነው? የመጨረሻ ስሙን ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በHawaii ግዛት ወይም በWisconsin ግዛት የሚኖሩ ባለሙያዎችን ኢሜይሎች ዘርዝር።", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "select owners.email_address from owners where owners.state = 'Hawaii' or owners.state = 'Wisconsin'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በHawaii ግዛት ወይም በWisconsin ግዛት የሚኖሩ ባለሙያዎችን ኢሜይሎች ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በHawaii ግዛት ወይም በWisconsin ግዛት የሚኖሩ የባለሙያዎች ኢሜይሎ ምንድን ናቸው?", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በHawaii ግዛት ወይም በWisconsin ግዛት የሚኖሩ የባለሙያዎች ኢሜይሎ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የውሾች ሁሉ የመድረሻ ቀን እና የሚሄዱበት ቀን መች ነው?", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed  , treatments.date_of_treatment from dogs join treatments on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የውሾች ሁሉ የመድረሻ ቀን እና የሚሄዱበት ቀን መች ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለሁሉም ውሾች የመድረሻ ቀን እና የመነሻ ቀን ዘርዝር።", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለሁሉም ውሾች የመድረሻ ቀን እና የመነሻ ቀን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምን ያህል ውሾች ማንኛውንም ሕክምና አልፈዋል?", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምን ያህል ውሾች ማንኛውንም ሕክምና አልፈዋል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾችን ቁጠር።", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾችን ቁጠር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ባለሙያዎች ለውሾች ማንኛውንም ህክምና አድርገዋል?", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select count ( * ) from sizes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ባለሙያዎች ለውሾች ማንኛውንም ህክምና አድርገዋል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ውሻዎችን ያከሙ ባለሙያዎችን ቁጥር አግኝ።", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ውሻዎችን ያከሙ ባለሙያዎችን ቁጥር አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "West የሚል ንዑስ ሕብረቁምፊ በያዘ ከተማ ውስጥ የሚኖሩት ባለሙያዎች የትኞቹ ናቸው? የእሱን ሚና፣ ጎዳና፣ ከተማ እና ግዛት ዘርዝር።", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code from owners join dogs on dogs.owner_id = owners.owner_id where dogs.dog_id = [dog_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### West የሚል ንዑስ ሕብረቁምፊ በያዘ ከተማ ውስጥ የሚኖሩት ባለሙያዎች የትኞቹ ናቸው? የእሱን ሚና፣ ጎዳና፣ ከተማ እና ግዛት ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በWest ንዑስ ሕብረቁምፊ ከተማ ውስጥ የሚኖሩ ባለሙያዎችን ሚና፣ ጎዳና፣ ከተማ እና ሁኔታ ፈልግ።", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners join dogs on dogs.owner_id = owners.owner_id join breeds on dogs.breed_code = breeds.breed_code join sizes on dogs.size_code = sizes.size_code where owners.city = 'West'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በWest ንዑስ ሕብረቁምፊ ከተማ ውስጥ የሚኖሩ ባለሙያዎችን ሚና፣ ጎዳና፣ ከተማ እና ሁኔታ ፈልግ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስማቸው North ንዑስ ሕብረቁምፊ ያለው በግዛቱ ውስጥ የሚኖሩት ባለቤቶች የትኞቹ ናቸው? የመጀመሪያ ስሙን፣ የአያት ስም እና ኢሜል ዘርዝር።", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.state = 'North'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስማቸው North ንዑስ ሕብረቁምፊ ያለው በግዛቱ ውስጥ የሚኖሩት ባለቤቶች የትኞቹ ናቸው? የመጀመሪያ ስሙን፣ የአያት ስም እና ኢሜል ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስማቸው North ንዑስ ሕብረቁምፊ የያዘ ግዛት ውስጥ የሚኖሩ ባለቤቶች የመጀመሪያ ስም ፣ የኣባት ስም እና ኢሜይል ይመለሱ", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.state = 'North'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስማቸው North ንዑስ ሕብረቁምፊ የያዘ ግዛት ውስጥ የሚኖሩ ባለቤቶች የመጀመሪያ ስም ፣ የኣባት ስም እና ኢሜይል ይመለሱ \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ውሾች ናቸው ከአማካይ በታች እድሜ ያላቸው?", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select count ( * ) from sizes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ውሾች ናቸው ከአማካይ በታች እድሜ ያላቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ከአማካይ እድሜ በታች ያሉትን የውሾች ቁጥር ቁጠር።", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select breeds.breed_code  , charges.charge_id  , sizes.size_code  , treatment_types.treatment_type_code  , owners.owner_id  , dogs.dog_id  , professionals.professional_id  , treatments.treatment_id from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ከአማካይ እድሜ በታች ያሉትን የውሾች ቁጥር ቁጠር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የቅርብ ጊዜ ሕክምና ምን ያህል ያስከፍላል?", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የቅርብ ጊዜ ሕክምና ምን ያህል ያስከፍላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በቅርብ ጊዜ የተደረገውን ህክምና ወጪ አሳየኝ።", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በቅርብ ጊዜ የተደረገውን ህክምና ወጪ አሳየኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ውሾች ምንም ዓይነት ህክምና አላደርጉም?", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ውሾች ምንም ዓይነት ህክምና አላደርጉም? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምንም አይነት ህክምና ያላገኙ ውሾች ብዛት ንገሩኝ።", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምንም አይነት ህክምና ያላገኙ ውሾች ብዛት ንገሩኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ባለቤቶች ናቸው ለጊዜው ውሻ የሌላቸው?", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select breeds.breed_name from breeds where breeds.breed_code not in ( select dogs.breed_code from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ባለቤቶች ናቸው ለጊዜው ውሻ የሌላቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በዚህ ጊዜ የውሻ ባለቤት የሌላቸውን የባለቤቶችን ቁጥር አግኝ።", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በዚህ ጊዜ የውሻ ባለቤት የሌላቸውን የባለቤቶችን ቁጥር አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ባለሙያዎች በውሻ ላይ ምንም አይነት ህክምና አላደረጉም?", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select count ( * ) from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ባለሙያዎች በውሻ ላይ ምንም አይነት ህክምና አላደረጉም? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምንም አይነት ውሾችን ያላከሙ የባለሙያዎችን ቁጥር አግኝ።", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምንም አይነት ውሾችን ያላከሙ የባለሙያዎችን ቁጥር አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የተተዉትን የውሻ ስም፣ እድሜ እና ክብደት ይዘርዝሩ? 1 አዎን ፣ 0 ደግሞ አይደለምን ይወክላል።", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የተተዉትን የውሻ ስም፣ እድሜ እና ክብደት ይዘርዝሩ? 1 አዎን ፣ 0 ደግሞ አይደለምን ይወክላል። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የተተዉት የውሻ ስም ፣ ዕድሜ እና ክብደት ስንት ናቸው? በሠንጠረዦቹ ውስጥ 1 አዎ ፣ እና 0 አይደለምን እንደሆነ ልብ ይበሉ።", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "select dogs.name  , dogs.age  , dogs.gender  , dogs.weight from dogs where dogs.abandoned_yn = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የተተዉት የውሻ ስም ፣ ዕድሜ እና ክብደት ስንት ናቸው? በሠንጠረዦቹ ውስጥ 1 አዎ ፣ እና 0 አይደለምን እንደሆነ ልብ ይበሉ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የውሾች ሁሉ አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from dogs", "predicted_sql": "select count ( * ) from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የውሾች ሁሉ አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የውሾችን አማካይ ዕድሜ አስሉ።", "query": "select avg ( age ) from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የውሾችን አማካይ ዕድሜ አስሉ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የጥንቱ ውሻ ዕድሜ ስንት ነው?", "query": "select max ( age ) from dogs", "predicted_sql": "select count ( distinct date_of_treatment ) from treatments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የጥንቱ ውሻ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የመጀመሪያውን ውሻ እድሜ ንገረኝ።", "query": "select max ( age ) from dogs", "predicted_sql": "select dogs.name  , dogs.age  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የመጀመሪያውን ውሻ እድሜ ንገረኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "እያንዳንዱ የክፍያ ዓይነት ምን ያህል ያስከፍላል? ሁለቱንም የክፍያ ዓይነት እና መጠን ዘርዝር።", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### እያንዳንዱ የክፍያ ዓይነት ምን ያህል ያስከፍላል? ሁለቱንም የክፍያ ዓይነት እና መጠን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "እያንዳንዱን የክፍያ ዓይነት እና መጠኑን ዘርዝር።", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### እያንዳንዱን የክፍያ ዓይነት እና መጠኑን ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ውድ የሆነው የክፍያ ዓይነት ምን ያህል ያስከፍላል?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ውድ የሆነው የክፍያ ዓይነት ምን ያህል ያስከፍላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ውድ የሆነ የክፍያ ዓይነት የክፍያ መጠን ስንት ነው?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select charges.charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ውድ የሆነ የክፍያ ዓይነት የክፍያ መጠን ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉንም ባለሙያዎች ኢሜይል፣ ሞባይል እና የቤት ስልክ ዘርዝር።", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select owners.email_address  , owners.home_phone  , owners.cell_number from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉንም ባለሙያዎች ኢሜይል፣ ሞባይል እና የቤት ስልክ ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለሙያ ኢሜይል ፣ ሞባይል እና የቤት ስልክ ምንድናቸው?", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select owners.email_address  , owners.home_phone  , owners.cell_number from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለሙያ ኢሜይል ፣ ሞባይል እና የቤት ስልክ ምንድናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የዝርያ ዓይነት እና የመጠን አይነት ብጥምረት ሁሉም የመሆን እድል ምንድናቸው?", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የዝርያ ዓይነት እና የመጠን አይነት ብጥምረት ሁሉም የመሆን እድል ምንድናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሾች የተለየ የዝርያ ዓይነት እና የመጠን አይነት ጥምረት አግኝ።", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሾች የተለየ የዝርያ ዓይነት እና የመጠን አይነት ጥምረት አግኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሙያተኞቹን የመጀመሪያ ስም ከዚ በፊት ካከናወኑት ህክምና አይነት መግለጫ ጋር ዘርዝር።", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select dogs.name from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሙያተኞቹን የመጀመሪያ ስም ከዚ በፊት ካከናወኑት ህክምና አይነት መግለጫ ጋር ዘርዝር። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሙያተኛ የመጀመሪያ ስማቸው እና ከዚ በፊት ያከናወኑት ህክምና አይነት መግለጫ ምንድነው?", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select first_name  , last_name from owners where owner_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሙያተኛ የመጀመሪያ ስማቸው እና ከዚ በፊት ያከናወኑት ህክምና አይነት መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "singer", "question": "ስንት ሙዚቀኞች አሉ?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from song", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ስንት ሙዚቀኞች አሉ? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ሙዚቀኞቹ ስንት ናቸው?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ሙዚቀኞቹ ስንት ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የሙዚቀኞችን ስም በሃብት ደረጃ ከትልቅ ወደ ትንሽ ዘርዝር።", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የሙዚቀኞችን ስም በሃብት ደረጃ ከትልቅ ወደ ትንሽ ዘርዝር። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "በሃብት ደረጃ ከትንሽ ወደ ትልቅ ተደርድሮ የሙዚቀኞቹን ስም ዘርዝር", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### በሃብት ደረጃ ከትንሽ ወደ ትልቅ ተደርድሮ የሙዚቀኞቹን ስም ዘርዝር \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የሙዚቀኞቹ የተወለዱበት አመተ ምሕረት እና ትውልድ ሃገር ምንድነው?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.name  , singer.birth_year  , singer.net_worth_millions  , singer.citizenship from singer where singer.net_worth_millions > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የሙዚቀኞቹ የተወለዱበት አመተ ምሕረት እና ትውልድ ሃገር ምንድነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የሙዚቀኞቹ የትውልድ ሀገራቸውና ትውልድ ሃገራቸው ምንድነው?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.name  , singer.net_worth_millions  , song.title  , song.sales from singer join song on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የሙዚቀኞቹ የትውልድ ሀገራቸውና ትውልድ ሃገራቸው ምንድነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ትውልድ ሃገራቸው France ያልሆኑትን ዘፋኞች ዘርዝር።", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer where singer.citizenship = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship ( France ) | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ትውልድ ሃገራቸው France ያልሆኑትን ዘፋኞች ዘርዝር። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ትውልደ ፈረንሳያዊ ያልሆኑት ዘፋኞች ስማቸው ማነው?", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ትውልደ ፈረንሳያዊ ያልሆኑት ዘፋኞች ስማቸው ማነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የትውልድ አመተ ምሕረታቸው 1948 ወይም 1949 የሆኑትን ዘፋኞች ስም አሳይ።", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የትውልድ አመተ ምሕረታቸው 1948 ወይም 1949 የሆኑትን ዘፋኞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "1948 ወይም 1949 የተወለዱት የዘፋኞች ስም ማነው?", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 1948 ወይም 1949 የተወለዱት የዘፋኞች ስም ማነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ብዙ የሃብት መጠን ያለው ሙዚቀኛ ስም ማነው?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ብዙ የሃብት መጠን ያለው ሙዚቀኛ ስም ማነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "እጅግ ጣምም ዋጋ ያለው ዘፋኝ ስም ማን ይባላል?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer where singer.net_worth_millions = ( select max ( net_worth_millions ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### እጅግ ጣምም ዋጋ ያለው ዘፋኝ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ሙዚቀኞች የተወለዱበትን የትውልድ ቦታ እና ከዛ የትውልድ ሃገር ስንት ሙዚቀኞች እንዳሉ አሳይ።", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select singer.name  , singer.birth_year  , singer.net_worth_millions  , singer.citizenship from singer where singer.birth_year > 1990", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ሙዚቀኞች የተወለዱበትን የትውልድ ቦታ እና ከዛ የትውልድ ሃገር ስንት ሙዚቀኞች እንዳሉ አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዜግነት ከዛ ሃገር ስንት ዘፋኞች አሉ?", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዜግነት ከዛ ሃገር ስንት ዘፋኞች አሉ? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "እባክዎን በብዛት የተለመደውን የሙዚቀኞች ዜግነት አሳይ።", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.name  , singer.birth_year  , singer.net_worth_millions  , song.title  , song.sales from singer join song on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### እባክዎን በብዛት የተለመደውን የሙዚቀኞች ዜግነት አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የተለመደው የሙዚቀኞች ዜግነት ምንድነው?", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የተለመደው የሙዚቀኞች ዜግነት ምንድነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከእያንዳንዱ አገር ያሉትን ሙዚቀኞች በ ዝነኝነታቸው እና ባላቸው ሀብት ደረጃ ከትልቅ ወደ ትንሽ አሳይ።", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select song.title from song where song.sales > 1000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከእያንዳንዱ አገር ያሉትን ሙዚቀኞች በ ዝነኝነታቸው እና ባላቸው ሀብት ደረጃ ከትልቅ ወደ ትንሽ አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዜጋ ከፍተኛው ዋጋ ስንት ነው?", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select count ( distinct song_id ) as number_of_songs from song", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዜጋ ከፍተኛው ዋጋ ስንት ነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞቹን የዘፈን ርእስ አሳይ።", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 100 order by singer.birth_year desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞቹን የዘፈን ርእስ አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፈኖቹ ርዕስ እና የዘፋኞቹ ስም ምንድ ናቸው?", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፈኖቹ ርዕስ እና የዘፋኞቹ ስም ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ300000 በላይ ሽያጭ ያላቸው ዘፈኖች ያሏቸውን የዘፋኞች የተለያየ ስም አሳይ።", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ300000 በላይ ሽያጭ ያላቸው ዘፈኖች ያሏቸውን የዘፋኞች የተለያየ ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ300000 በላይ ሽያጭ ያላቸው ዘፋኞች የተለያዩ ስሞች ምንድ ናቸው?", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select song.title from song where song.sales > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ300000 በላይ ሽያጭ ያላቸው ዘፋኞች የተለያዩ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከአንድ በላይ ዘፈን ያላቸውን የዘፋኞች ስም አሳይ።", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከአንድ በላይ ዘፈን ያላቸውን የዘፋኞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከአንድ በላይ ዘፈኖች ያሏቸው ዘፋኞች ስም ማን ይባላል?", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer where singer.singer_id in ( 1  , 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከአንድ በላይ ዘፈኖች ያሏቸው ዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞቹን ስም እና የዘፈኖቻቸውን አጠቃላይ ሽያጭ አሳይ።", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , song.title from singer join song on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞቹን ስም እና የዘፈኖቻቸውን አጠቃላይ ሽያጭ አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዘፋኝ ስም ፤ የዘፈኖቻቸው ጠቅላላ ሽያጮች ስንት ናቸው?", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select count ( * ) from singer where name = 'ዘፈንም'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዘፋኝ ስም ፤ የዘፈኖቻቸው ጠቅላላ ሽያጮች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ምንም ዓይነት ዘፈን የሌላቸውን የዘፋኞች ስም ዝርዝር።", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ምንም ዓይነት ዘፈን የሌላቸውን የዘፋኞች ስም ዝርዝር። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ምንም ዘፈን የሌለው የእያንዳንዱን ዘፋኝ ስም ማን ይባላል?", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ምንም ዘፈን የሌለው የእያንዳንዱን ዘፋኝ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞች ትውልድ ከ1945 በፊት እና ከ1955 በኋላ የሆኑት የሚጋሩትን ዜግነት አሳይ።", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select * from singer where birth_year >= 1945 and birth_year <= 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞች ትውልድ ከ1945 በፊት እና ከ1955 በኋላ የሆኑት የሚጋሩትን ዜግነት አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞች ትውልድ ከ1945 በፊት እና ከ1955 በኋላ የሆኑት የሚጋሩት ዜግነት ምንድን ነው?", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select singer.name from singer where singer.birth_year >= 1945 and singer.birth_year <= 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞች ትውልድ ከ1945 በፊት እና ከ1955 በኋላ የሆኑት የሚጋሩት ዜግነት ምንድን ነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "real_estate_properties", "question": "በአጠቃላይ ምን ያህል የሚቀርቡ አሉ?", "query": "select count ( * ) from other_available_features", "predicted_sql": "select ref_feature_types.feature_type_code  , ref_feature_types.feature_type_name  , ref_property_types.property_type_code  , ref_property_types.property_type_description  , other_available_features.feature_id  , other_available_features.feature_type_code  , other_available_features.feature_name  , other_available_features.feature_description  , properties.property_id  , properties.property_type_code  , properties.date_on_market  , properties.date_sold  , properties.property_name  , properties.property_address  , properties.room_count  , properties.vendor_requested_price  , properties.buyer_offered_price  , properties.agreed_selling_price  , properties.apt_feature_1  , properties.apt_feature_2  , properties.apt_feature_3  , properties.fld_feature_1  , properties.fld_feature_2  , properties.fld_feature_3  , properties.hse_feature_1  , properties.hse_feature_2  , properties.hse_feature_3  , properties.oth_feature_1  , properties.oth_feature_2  , properties.oth_feature_3  , properties.shp_feature_1  , properties.shp_feature_2  , properties.shp_feature_3  , properties.other_property_details from ref_feature_types  , ref_property_types  , other_available_features  , properties  , other_property_features where other_available_features.feature_type_code = ref_feature_types.feature_type_code and properties.property_type_code = ref_property_types.property_type_code and other_property_features.property_id = properties.property_id and other_property_features.feature_id = other_available_features.feature_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### በአጠቃላይ ምን ያህል የሚቀርቡ አሉ? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "የAirCon የሚቀርብ አይነት ስም ምንድን ነው?", "query": "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'", "predicted_sql": "select ref_feature_types.feature_type_name from ref_feature_types where ref_feature_types.feature_type_code = 'AirCon'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### የAirCon የሚቀርብ አይነት ስም ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "የዛ ኮድ ንብረት የሆኑ ንብረቶችን የንብረት አይነት ዝርዝር መግለጫዎችን አሳይ።", "query": "select ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code", "predicted_sql": "select ref_feature_types.feature_type_code  , ref_feature_types.feature_type_name  , ref_property_types.property_type_code  , ref_property_types.property_type_description  , other_available_features.feature_id  , other_available_features.feature_type_code  , other_available_features.feature_name  , other_available_features.feature_description  , properties.property_id  , properties.property_type_code  , properties.date_on_market  , properties.date_sold  , properties.property_name  , properties.property_address  , properties.room_count  , properties.vendor_requested_price  , properties.buyer_offered_price  , properties.agreed_selling_price  , properties.apt_feature_1  , properties.apt_feature_2  , properties.apt_feature_3  , properties.fld_feature_1  , properties.fld_feature_2  , properties.fld_feature_3  , properties.hse_feature_1  , properties.hse_feature_2  , properties.hse_feature_3  , properties.oth_feature_1  , properties.oth_feature_2  , properties.oth_feature_3  , properties.shp_feature_1  , properties.shp_feature_2  , properties.shp_feature_3  , properties.other_property_details from ref_feature_types  , ref_property_types  , other_available_features  , properties  , other_property_features where other_available_features.feature_type_code = ref_feature_types.feature_type_code and properties.property_type_code = ref_property_types.property_type_code and other_property_features.property_id = properties.property_id and other_property_features.feature_id = other_available_features.feature_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### የዛ ኮድ ንብረት የሆኑ ንብረቶችን የንብረት አይነት ዝርዝር መግለጫዎችን አሳይ። \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "ከ1 ክፍል በላይ ያላቸው ቤቶች ወይም የጋራ መኖሪያዎች የንብረት ስሞች ምንድ ናቸው?", "query": "select property_name from properties where property_type_code = 'House' union select property_name from properties where property_type_code = 'Apartment' and room_count > 1", "predicted_sql": "select properties.property_name  , properties.property_address  , ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code where properties.property_type_code = 1 or properties.property_type_code = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### ከ1 ክፍል በላይ ያላቸው ቤቶች ወይም የጋራ መኖሪያዎች የንብረት ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
