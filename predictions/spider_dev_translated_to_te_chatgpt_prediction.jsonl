{"db_id": "concert_singer", "question": "మనకు ఎంతమంది గాయకులు ఉన్నారు?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( singer.singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### మనకు ఎంతమంది గాయకులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "మొత్తం గాయకుల సంఖ్య ఎంత?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( singer.singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### మొత్తం గాయకుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "పెద్దవారి నుండి చిన్నవారి వరకు వయస్సు ప్రకారం ఆర్డర్ చేసిన గాయకులందరికీ పేరు, దేశం, వయస్సు చూపండి.", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select singer.name  , singer.country  , singer.age from singer order by singer.age desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### పెద్దవారి నుండి చిన్నవారి వరకు వయస్సు ప్రకారం ఆర్డర్ చేసిన గాయకులందరికీ పేరు, దేశం, వయస్సు చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "వయస్సు యొక్క అవరోహణ క్రమంలో ప్రతి గాయకుడికి పేర్లు, దేశాలు మరియు వయస్సు ఏమిటి?", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select singer.name  , singer.country  , singer.age from singer order by singer.age desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### వయస్సు యొక్క అవరోహణ క్రమంలో ప్రతి గాయకుడికి పేర్లు, దేశాలు మరియు వయస్సు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ఫ్రాన్స్‌కు చెందిన గాయకులందరి సగటు, కనిష్ట మరియు గరిష్ట వయస్సు ఎంత?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "select singer.name  , min ( singer.age )  , max ( singer.age ) from singer where singer.country = 'ఫ్రాన్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ఫ్రాన్స్‌కు చెందిన గాయకులందరి సగటు, కనిష్ట మరియు గరిష్ట వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ఫ్రెంచ్ గాయకులందరికీ సగటు, కనిష్ట మరియు గరిష్ట వయస్సు ఎంత?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "select min ( age )  , max ( age ) from singer where country = 'France'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ఫ్రెంచ్ గాయకులందరికీ సగటు, కనిష్ట మరియు గరిష్ట వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అతి పిన్న వయస్కుడైన గాయకుడి పేరు మరియు పాట విడుదల సంవత్సరాన్ని చూపండి.", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అతి పిన్న వయస్కుడైన గాయకుడి పేరు మరియు పాట విడుదల సంవత్సరాన్ని చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అతి పిన్న వయస్కుడి పాటలన్నింటికీ పేర్లు మరియు విడుదల సంవత్సరాలు ఏమిటి?", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.name  , singer.song_name  , singer.song_release_year  , singer.age from singer where singer.age >= 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అతి పిన్న వయస్కుడి పాటలన్నింటికీ పేర్లు మరియు విడుదల సంవత్సరాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "20 ఏళ్లు పైబడిన గాయకులు ఉన్న అన్ని విభిన్న దేశాలు ఏవి?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select distinct singer.country from singer where singer.age >= 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 20 ఏళ్లు పైబడిన గాయకులు ఉన్న అన్ని విభిన్న దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "20 ఏళ్లు పైబడిన గాయకులు ఉన్న వివిధ దేశాలు ఏమిటి?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select singer.name  , singer.country from singer where singer.age >= 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 20 ఏళ్లు పైబడిన గాయకులు ఉన్న వివిధ దేశాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అన్ని దేశాలు మరియు ప్రతి దేశంలోని గాయకుల సంఖ్యను చూపండి.", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select count ( singer.singer_id ) as total_singers from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అన్ని దేశాలు మరియు ప్రతి దేశంలోని గాయకుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ప్రతి దేశం నుండి ఎంత మంది గాయకులు ఉన్నారు?", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select count ( singer.singer_id ) as total_singers from singer group by singer.country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ప్రతి దేశం నుండి ఎంత మంది గాయకులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "సగటు వయస్సు కంటే ఎక్కువ వయస్సు ఉన్న గాయకుల ద్వారా అన్ని పాటల పేర్లను జాబితా చేయండి.", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.name from singer where singer.age > ( select max ( singer.age ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### సగటు వయస్సు కంటే ఎక్కువ వయస్సు ఉన్న గాయకుల ద్వారా అన్ని పాటల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "సగటు కంటే ఎక్కువ వయస్సు ఉన్న గాయకుల అన్ని పాటల పేర్లు ఏమిటి?", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.name from singer where singer.age > 40", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### సగటు కంటే ఎక్కువ వయస్సు ఉన్న గాయకుల అన్ని పాటల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "5000 మరియు 10000 మధ్య కెపాసిటీ ఉన్న అన్ని స్టేడియాల కోసం స్థానం మరియు పేరును చూపండి.", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 5000 మరియు 10000 మధ్య కెపాసిటీ ఉన్న అన్ని స్టేడియాల కోసం స్థానం మరియు పేరును చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "5000 మరియు 10000 మధ్య కెపాసిటీ ఉన్న అన్ని స్టేషన్ల స్థానాలు మరియు పేర్లు ఏమిటి?", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 5000 మరియు 10000 మధ్య కెపాసిటీ ఉన్న అన్ని స్టేషన్ల స్థానాలు మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అన్ని స్టేడియాల గరిష్ట సామర్థ్యం మరియు సగటు ఎంత?", "query": "select max ( capacity ) , average from stadium", "predicted_sql": "select max ( capacity ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అన్ని స్టేడియాల గరిష్ట సామర్థ్యం మరియు సగటు ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అన్ని స్టేడియాల సగటు మరియు గరిష్ట సామర్థ్యాలు ఎంత?", "query": "select avg ( capacity ) , max ( capacity ) from stadium", "predicted_sql": "select count ( stadium.stadium_id )  , max ( stadium.capacity ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అన్ని స్టేడియాల సగటు మరియు గరిష్ట సామర్థ్యాలు ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అత్యధిక సగటు హాజరు ఉన్న స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium where stadium.capacity = ( select max ( capacity ) from stadium )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అత్యధిక సగటు హాజరు ఉన్న స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అత్యధిక సగటు హాజరు ఉన్న స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium where stadium.capacity = ( select max ( capacity ) from stadium )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అత్యధిక సగటు హాజరు ఉన్న స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 లేదా 2015లో ఎన్ని కచేరీలు ఉన్నాయి?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select count ( concert_id ) from concert where year = 2014 or year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 లేదా 2015లో ఎన్ని కచేరీలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 లేదా 2015లో ఎన్ని కచేరీలు జరిగాయి?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select count ( concert_id ) from concert where year = 2014 or year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 లేదా 2015లో ఎన్ని కచేరీలు జరిగాయి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "స్టేడియం పేరు మరియు ప్రతి స్టేడియంలోని కచేరీల సంఖ్యను చూపండి.", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select stadium.name  , stadium.capacity from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### స్టేడియం పేరు మరియు ప్రతి స్టేడియంలోని కచేరీల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ప్రతి స్టేడియం కోసం, అక్కడ ఎన్ని కచేరీలు ఆడతారు?", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ప్రతి స్టేడియం కోసం, అక్కడ ఎన్ని కచేరీలు ఆడతారు? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 సంవత్సరం లేదా తర్వాత ఎక్కువ సంఖ్యలో కచేరీలతో స్టేడియం పేరు మరియు సామర్థ్యాన్ని చూపండి.", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 సంవత్సరం లేదా తర్వాత ఎక్కువ సంఖ్యలో కచేరీలతో స్టేడియం పేరు మరియు సామర్థ్యాన్ని చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2013 తర్వాత అత్యధిక కచేరీలు జరిగిన స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి?", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select stadium.name  , stadium.capacity from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year > 2013 order by stadium.capacity desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2013 తర్వాత అత్యధిక కచేరీలు జరిగిన స్టేడియం పేరు మరియు సామర్థ్యం ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ఏ సంవత్సరంలో ఎక్కువ కచేరీలు జరిగాయి?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select concert.year from concert group by concert.year having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ఏ సంవత్సరంలో ఎక్కువ కచేరీలు జరిగాయి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అత్యధిక కచేరీలు జరిగిన సంవత్సరం ఏది?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select max ( concert.year ) from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అత్యధిక కచేరీలు జరిగిన సంవత్సరం ఏది? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "కచేరీ లేకుండానే స్టేడియం పేర్లను చూపించండి.", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.name from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### కచేరీ లేకుండానే స్టేడియం పేర్లను చూపించండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "కచేరీలు లేని స్టేడియాల పేర్లు ఏమిటి?", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select stadium.name from stadium where stadium.capacity is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### కచేరీలు లేని స్టేడియాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "40 ఏళ్లు పైబడిన గాయకుడు మరియు 30 ఏళ్లలోపు గాయకుడు ఉన్న దేశాలను చూపండి.", "query": "select country from singer where age > 40 intersect select country from singer where age < 30", "predicted_sql": "select singer.name  , singer.country from singer where singer.age = 40 or singer.age = 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 40 ఏళ్లు పైబడిన గాయకుడు మరియు 30 ఏళ్లలోపు గాయకుడు ఉన్న దేశాలను చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 సంవత్సరంలో సంగీత కచేరీ ఉన్న స్టేడియాలు మినహా అన్ని స్టేడియాల పేర్లను చూపండి.", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select stadium.name from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 సంవత్సరంలో సంగీత కచేరీ ఉన్న స్టేడియాలు మినహా అన్ని స్టేడియాల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014లో కచేరీ లేని అన్ని స్టేడియాల పేర్లు ఏమిటి?", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select stadium.name from stadium left join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014లో కచేరీ లేని అన్ని స్టేడియాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అన్ని కచేరీలకు పేరు మరియు థీమ్ మరియు ప్రతి కచేరీలోని గాయకుల సంఖ్యను చూపండి.", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select concert.concert_name  , concert.theme  , count ( singer_in_concert.singer_id ) as singer_count from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name  , concert.theme", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అన్ని కచేరీలకు పేరు మరియు థీమ్ మరియు ప్రతి కచేరీలోని గాయకుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ప్రతి కచేరీకి పేర్లు , థీమ్‌లు మరియు గాయకుల సంఖ్య ఏమిటి ?", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select concert.concert_name  , concert.theme  , count ( singer_in_concert.singer_id ) as singer_count from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name  , concert.theme", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ప్రతి కచేరీకి పేర్లు , థీమ్‌లు మరియు గాయకుల సంఖ్య ఏమిటి ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ప్రతి గాయకుడి పేర్లు మరియు కచేరీల సంఖ్యను జాబితా చేయండి.", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( singer_in_concert.singer_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ప్రతి గాయకుడి పేర్లు మరియు కచేరీల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ప్రతి వ్యక్తికి గాయకుల పేర్లు మరియు కచేరీల సంఖ్య ఏమిటి?", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ప్రతి వ్యక్తికి గాయకుల పేర్లు మరియు కచేరీల సంఖ్య ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 సంవత్సరంలో కచేరీలలోని గాయకులందరి పేర్లను జాబితా చేయండి.", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 సంవత్సరంలో కచేరీలలోని గాయకులందరి పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014లో ఒక కచేరీలో చేసిన గాయకుల పేర్లు ఏమిటి?", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014లో ఒక కచేరీలో చేసిన గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "&#39;హే&#39; అనే పాటను కలిగి ఉన్న గాయకుడి పేరు మరియు దేశం ఏమిటి?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , singer.country from singer where singer.song_name = 'హే'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### &#39;హే&#39; అనే పాటను కలిగి ఉన్న గాయకుడి పేరు మరియు దేశం ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "టైటిల్‌లో &#39;హే&#39; అనే పదంతో పాట ఉన్న ప్రతి గాయకుడి పేరు మరియు దేశం ఏమిటి?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , singer.country from singer where singer.song_name like '%హే%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### టైటిల్‌లో &#39;హే&#39; అనే పదంతో పాట ఉన్న ప్రతి గాయకుడి పేరు మరియు దేశం ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 మరియు 2015 సంవత్సరాల్లో కొన్ని కచేరీలు జరిగిన స్టేడియాల పేరు మరియు స్థానాన్ని కనుగొనండి.", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select stadium.name  , stadium.location from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year in ( 2014  , 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 మరియు 2015 సంవత్సరాల్లో కొన్ని కచేరీలు జరిగిన స్టేడియాల పేరు మరియు స్థానాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "2014 మరియు 2015 రెండింటిలోనూ కచేరీలు జరిగిన స్టేడియాల పేర్లు మరియు స్థానాలు ఏమిటి?", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select stadium.name  , stadium.location from stadium join concert on concert.stadium_id = stadium.stadium_id where concert.year in ( 2014  , 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### 2014 మరియు 2015 రెండింటిలోనూ కచేరీలు జరిగిన స్టేడియాల పేర్లు మరియు స్థానాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అత్యధిక సామర్థ్యంతో స్టేడియంలో జరిగిన కచేరీల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "select count ( * ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అత్యధిక సామర్థ్యంతో స్టేడియంలో జరిగిన కచేరీల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "అతిపెద్ద సామర్థ్యంతో స్టేడియంలో జరిగిన కచేరీల సంఖ్య ఎంత?", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### అతిపెద్ద సామర్థ్యంతో స్టేడియంలో జరిగిన కచేరీల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "pets_1", "question": "10 కంటే ఎక్కువ బరువున్న పెంపుడు జంతువుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select count ( * ) from pets where pets.weight > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 10 కంటే ఎక్కువ బరువున్న పెంపుడు జంతువుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఎన్ని పెంపుడు జంతువులు 10 కంటే ఎక్కువ బరువు కలిగి ఉన్నాయి?", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select student.fname  , student.lname  , count ( pets.petid ) as num_pets from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by student.fname  , student.lname having sum ( pets.weight ) > 10 order by num_pets desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఎన్ని పెంపుడు జంతువులు 10 కంటే ఎక్కువ బరువు కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "చిన్న కుక్క బరువును కనుగొనండి.", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.weight from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'చిన్న కుక్క' order by pets.weight asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### చిన్న కుక్క బరువును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "చిన్న కుక్క బరువు ఎంత?", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select pets.pet_age from pets where pets.pettype = 'చిన్న కుక్క'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### చిన్న కుక్క బరువు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ప్రతి రకమైన పెంపుడు జంతువు కోసం గరిష్ట బరువును కనుగొనండి. గరిష్ట బరువు మరియు పెంపుడు జంతువు రకాన్ని జాబితా చేయండి.", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , max ( pets.weight ) as max_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ప్రతి రకమైన పెంపుడు జంతువు కోసం గరిష్ట బరువును కనుగొనండి. గరిష్ట బరువు మరియు పెంపుడు జంతువు రకాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువు యొక్క ప్రతి రకం కోసం గరిష్ట బరువు మరియు రకాన్ని జాబితా చేయండి.", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , max ( pets.weight ) as max_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువు యొక్క ప్రతి రకం కోసం గరిష్ట బరువు మరియు రకాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "20 ఏళ్ల కంటే ఎక్కువ వయస్సు ఉన్న విద్యార్థుల పెంపుడు జంతువుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select count ( * ) from student where age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 20 ఏళ్ల కంటే ఎక్కువ వయస్సు ఉన్న విద్యార్థుల పెంపుడు జంతువుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "20 ఏళ్ల కంటే ఎక్కువ వయస్సు ఉన్న విద్యార్థులు ఎన్ని పెంపుడు జంతువులను కలిగి ఉన్నారు?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select count ( distinct student.stuid ) from student where student.age > 20 and exists ( select * from has_pet where has_pet.stuid = student.stuid )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 20 ఏళ్ల కంటే ఎక్కువ వయస్సు ఉన్న విద్యార్థులు ఎన్ని పెంపుడు జంతువులను కలిగి ఉన్నారు? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "మహిళా విద్యార్థులు (సెక్స్ ఎఫ్‌తో) పెంచే కుక్క పెంపుడు జంతువుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select count ( distinct has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### మహిళా విద్యార్థులు (సెక్స్ ఎఫ్‌తో) పెంచే కుక్క పెంపుడు జంతువుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "విద్యార్థినులు ఎన్ని కుక్క పెంపుడు జంతువులను పెంచుతున్నారు?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select count ( distinct student.stuid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### విద్యార్థినులు ఎన్ని కుక్క పెంపుడు జంతువులను పెంచుతున్నారు? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "విభిన్న రకాల పెంపుడు జంతువుల సంఖ్యను కనుగొనండి.", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select count ( distinct has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### విభిన్న రకాల పెంపుడు జంతువుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఎన్ని రకాల పెంపుడు జంతువులు ఉన్నాయి?", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select count ( distinct pets.pettype ) from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఎన్ని రకాల పెంపుడు జంతువులు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లి లేదా కుక్క పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల మొదటి పేరును కనుగొనండి.", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లి' or pets.pettype = 'కుక్క'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లి లేదా కుక్క పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల మొదటి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లి లేదా కుక్కను పెంపుడు జంతువుగా కలిగి ఉన్న ప్రతి విద్యార్థి మొదటి పేర్లు ఏమిటి?", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లి' or pets.pettype = 'కుక్క'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లి లేదా కుక్కను పెంపుడు జంతువుగా కలిగి ఉన్న ప్రతి విద్యార్థి మొదటి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లి మరియు కుక్క పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల మొదటి పేరును కనుగొనండి.", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లి' or pets.pettype = 'కుక్క'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లి మరియు కుక్క పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల మొదటి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లులు మరియు కుక్కలను పెంపుడు జంతువులుగా కలిగి ఉన్న విద్యార్థుల మొదటి పేర్లు ఏమిటి?", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లి' or pets.pettype = 'కుక్క'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లులు మరియు కుక్కలను పెంపుడు జంతువులుగా కలిగి ఉన్న విద్యార్థుల మొదటి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లి పెంపుడు జంతువు లేని విద్యార్థుల ప్రధాన మరియు వయస్సును కనుగొనండి.", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.lname  , student.fname  , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లి పెంపుడు జంతువు లేని విద్యార్థుల ప్రధాన మరియు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువుగా పిల్లిని సొంతం చేసుకోని ప్రతి విద్యార్థి ఏ మేజర్, మరియు వారి వయస్సు ఎంత?", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.major  , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లిని సొంతం చేసుకోని పెంపుడు జంతువు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువుగా పిల్లిని సొంతం చేసుకోని ప్రతి విద్యార్థి ఏ మేజర్, మరియు వారి వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లి పెంపుడు జంతువు లేని విద్యార్థుల IDని కనుగొనండి.", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లి పెంపుడు జంతువు లేని విద్యార్థుల IDని కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పిల్లులను పెంపుడు జంతువులుగా పెంచుకోని విద్యార్థుల ఐడీలు ఏమిటి?", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పిల్లులను పెంపుడు జంతువులుగా పెంచుకోని విద్యార్థుల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "కుక్కను కలిగి ఉండి, పెంపుడు జంతువుగా పిల్లి లేని విద్యార్థుల మొదటి పేరు మరియు వయస్సును కనుగొనండి.", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname  , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'కుక్క' and pets.pet_age > 1 and student.fname not in ( select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'పిల్లి' ) order by student.fname asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### కుక్కను కలిగి ఉండి, పెంపుడు జంతువుగా పిల్లి లేని విద్యార్థుల మొదటి పేరు మరియు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "కుక్కను కలిగి ఉండి పిల్లి లేని ప్రతి విద్యార్థి మొదటి పేరు ఏమిటి?", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname from student left join has_pet on student.stuid = has_pet.stuid left join pets on has_pet.petid = pets.petid where pets.pettype = 'కుక్క' and pets.pet_age > 1 and not exists ( select * from has_pet where has_pet.stuid = student.stuid and pets.pettype = 'పిల్లి' ) order by student.fname asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### కుక్కను కలిగి ఉండి పిల్లి లేని ప్రతి విద్యార్థి మొదటి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "చిన్న పెంపుడు జంతువు రకం మరియు బరువును కనుగొనండి.", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.weight from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'చిన్న పెంపుడు జంతువు' and pets.weight < 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### చిన్న పెంపుడు జంతువు రకం మరియు బరువును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఏ రకమైన పెంపుడు జంతువు చిన్న జంతువు, దాని బరువు ఎంత?", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select pets.pettype  , pets.weight from pets where pets.pettype = 'చిన్న జంతువు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఏ రకమైన పెంపుడు జంతువు చిన్న జంతువు, దాని బరువు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "1 కంటే ఎక్కువ వయస్సు ఉన్న అన్ని పెంపుడు జంతువుల ఐడి మరియు బరువును కనుగొనండి.", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 1 కంటే ఎక్కువ వయస్సు ఉన్న అన్ని పెంపుడు జంతువుల ఐడి మరియు బరువును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "1 కంటే ఎక్కువ వయస్సు ఉన్న ప్రతి పెంపుడు జంతువు యొక్క ఐడి మరియు బరువు ఎంత?", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select has_pet.petid  , pets.weight from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where student.age > 1 group by has_pet.petid having count ( * ) > 1 order by pets.weight desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 1 కంటే ఎక్కువ వయస్సు ఉన్న ప్రతి పెంపుడు జంతువు యొక్క ఐడి మరియు బరువు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ప్రతి రకమైన పెంపుడు జంతువుకు సగటు మరియు గరిష్ట వయస్సును కనుగొనండి.", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.weight > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ప్రతి రకమైన పెంపుడు జంతువుకు సగటు మరియు గరిష్ట వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ప్రతి పెంపుడు జంతువుల సగటు మరియు గరిష్ట వయస్సు ఎంత?", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , max ( pets.pet_age ) as max_pet_age from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ప్రతి పెంపుడు జంతువుల సగటు మరియు గరిష్ట వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ప్రతి పెంపుడు జంతువుల సగటు బరువును కనుగొనండి.", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , sum ( pets.weight ) as total_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ప్రతి పెంపుడు జంతువుల సగటు బరువును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ప్రతి రకమైన పెంపుడు జంతువుల సగటు బరువు ఎంత?", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , sum ( pets.weight ) as total_weight from pets group by pets.pettype", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ప్రతి రకమైన పెంపుడు జంతువుల సగటు బరువు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువును కలిగి ఉన్న విద్యార్థుల మొదటి పేరు మరియు వయస్సును కనుగొనండి.", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid order by student.age asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువును కలిగి ఉన్న విద్యార్థుల మొదటి పేరు మరియు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల వివిధ మొదటి పేర్లు మరియు వయస్సు ఏమిటి?", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.lname  , student.age from student inner join has_pet on student.stuid = has_pet.stuid inner join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థుల వివిధ మొదటి పేర్లు మరియు వయస్సు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "&#39;స్మిత్&#39; అనే ఇంటిపేరు ఉన్న విద్యార్థికి చెందిన పెంపుడు జంతువు ఐడిని కనుగొనండి.", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.lname = 'స్మిత్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### &#39;స్మిత్&#39; అనే ఇంటిపేరు ఉన్న విద్యార్థికి చెందిన పెంపుడు జంతువు ఐడిని కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "&#39;స్మిత్&#39; అనే ఇంటిపేరు కలిగిన విద్యార్థి పెంపుడు జంతువు యొక్క ID ఏమిటి?", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select student.stuid from student where student.lname = 'స్మిత్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### &#39;స్మిత్&#39; అనే ఇంటిపేరు కలిగిన విద్యార్థి పెంపుడు జంతువు యొక్క ID ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఏదైనా పెంపుడు జంతువు మరియు విద్యార్థి ఐడిని కలిగి ఉన్న ప్రతి విద్యార్థికి పెంపుడు జంతువుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.stuid  , count ( has_pet.petid ) as pet_count from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఏదైనా పెంపుడు జంతువు మరియు విద్యార్థి ఐడిని కలిగి ఉన్న ప్రతి విద్యార్థికి పెంపుడు జంతువుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థులకు, ప్రతి విద్యార్థికి ఎన్ని పెంపుడు జంతువులు ఉన్నాయి? పేర్లకు బదులుగా వారి ఐడిలను జాబితా చేయండి.", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select student.stuid  , count ( has_pet.petid ) as num_pets from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థులకు, ప్రతి విద్యార్థికి ఎన్ని పెంపుడు జంతువులు ఉన్నాయి? పేర్లకు బదులుగా వారి ఐడిలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఒకటి కంటే ఎక్కువ పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థి యొక్క మొదటి పేరు మరియు లింగాన్ని కనుగొనండి.", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by student.stuid having count ( pets.petid ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఒకటి కంటే ఎక్కువ పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థి యొక్క మొదటి పేరు మరియు లింగాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ఒకటి కంటే ఎక్కువ పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థులందరి మొదటి పేరు మరియు లింగం ఏమిటి?", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.sex from student order by student.stuid asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ఒకటి కంటే ఎక్కువ పెంపుడు జంతువులను కలిగి ఉన్న విద్యార్థులందరి మొదటి పేరు మరియు లింగం ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "3 సంవత్సరాల వయస్సు గల పిల్లిని కలిగి ఉన్న విద్యార్థి యొక్క చివరి పేరును కనుగొనండి.", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age = 3 and student.sex = 'పిల్లి'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 3 సంవత్సరాల వయస్సు గల పిల్లిని కలిగి ఉన్న విద్యార్థి యొక్క చివరి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "3 సంవత్సరాల వయస్సు గల పిల్లిని కలిగి ఉన్న విద్యార్థి ఇంటిపేరు ఏమిటి?", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age = 3 and student.sex = 'పిల్లి'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### 3 సంవత్సరాల వయస్సు గల పిల్లిని కలిగి ఉన్న విద్యార్థి ఇంటిపేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువు లేని విద్యార్థుల సగటు వయస్సును కనుగొనండి.", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "select student.age from student left join has_pet on student.stuid = has_pet.stuid where has_pet.petid is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువు లేని విద్యార్థుల సగటు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "పెంపుడు జంతువులు లేని విద్యార్థులందరికీ సగటు వయస్సు ఎంత?", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "select student.fname  , student.lname  , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### పెంపుడు జంతువులు లేని విద్యార్థులందరికీ సగటు వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "car_1", "question": "ఎన్ని ఖండాలు ఉన్నాయి?", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents  , countries  , car_makers  , model_list  , car_names  , cars_data where countries.continent = continents.contid and car_makers.country = countries.countryid and model_list.maker = car_makers.id and car_names.model = model_list.model and cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఎన్ని ఖండాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఖండాల సంఖ్య ఎంత?", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఖండాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి ఖండానికి ఎన్ని దేశాలు ఉన్నాయి? ఖండం ID, ఖండం పేరు మరియు దేశాల సంఖ్యను జాబితా చేయండి.", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.contid  , continents.continent  , count ( countries.countryid ) as country_count from continents inner join countries on countries.continent = continents.contid group by continents.contid  , continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి ఖండానికి ఎన్ని దేశాలు ఉన్నాయి? ఖండం ID, ఖండం పేరు మరియు దేశాల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి ఖండం కోసం, దాని ఐడి, పేరు మరియు దానికి ఎన్ని దేశాలున్నాయి?", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.contid  , continents.continent  , count ( countries.countryid ) as number_of_countries from continents inner join countries on countries.continent = continents.contid group by continents.contid  , continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి ఖండం కోసం, దాని ఐడి, పేరు మరియు దానికి ఎన్ని దేశాలున్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఎన్ని దేశాలు జాబితా చేయబడ్డాయి?", "query": "select count ( * ) from countries", "predicted_sql": "select count ( distinct countries.countryname ) from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఎన్ని దేశాలు జాబితా చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఎన్ని దేశాలు ఉన్నాయి?", "query": "select count ( * ) from countries", "predicted_sql": "select count ( distinct countries.countryname ) from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఎన్ని దేశాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి కార్ల తయారీ సంస్థ ఎన్ని మోడళ్లను ఉత్పత్తి చేస్తుంది? జాబితా తయారీదారు పూర్తి పేరు, ఐడి మరియు సంఖ్య.", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select car_makers.fullname  , count ( model_list.modelid ) as total_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.fullname  , car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి కార్ల తయారీ సంస్థ ఎన్ని మోడళ్లను ఉత్పత్తి చేస్తుంది? జాబితా తయారీదారు పూర్తి పేరు, ఐడి మరియు సంఖ్య. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి కారు తయారీదారు యొక్క పూర్తి పేరు ఏమిటి, దాని ఐడితో పాటు అది ఎన్ని మోడల్‌లను ఉత్పత్తి చేస్తుంది?", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select car_makers.fullname  , car_makers.id  , count ( model_list.model ) as total_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.fullname  , car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి కారు తయారీదారు యొక్క పూర్తి పేరు ఏమిటి, దాని ఐడితో పాటు అది ఎన్ని మోడల్‌లను ఉత్పత్తి చేస్తుంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కారు యొక్క ఏ మోడల్ కనీస హార్స్‌పవర్‌ను కలిగి ఉంది?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model  , cars_data.horsepower from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కారు యొక్క ఏ మోడల్ కనీస హార్స్‌పవర్‌ను కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అతి తక్కువ మొత్తంలో హార్స్ పవర్ ఉన్న కారు మోడల్ ఏది?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.horsepower = ( select max ( horsepower ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అతి తక్కువ మొత్తంలో హార్స్ పవర్ ఉన్న కారు మోడల్ ఏది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "సగటు బరువు కంటే తక్కువ బరువు ఉన్న కారు మోడల్‌ను కనుగొనండి.", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < 2000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### సగటు బరువు కంటే తక్కువ బరువు ఉన్న కారు మోడల్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "సగటు కంటే తక్కువ బరువు ఉన్న కారు మోడల్ ఏమిటి?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### సగటు కంటే తక్కువ బరువు ఉన్న కారు మోడల్ ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1970 సంవత్సరంలో కొన్ని కార్లను ఉత్పత్తి చేసిన తయారీదారుల పేరును కనుగొనండి?", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select car_makers.maker from car_makers join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where cars_data.year = 1970", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1970 సంవత్సరంలో కొన్ని కార్లను ఉత్పత్తి చేసిన తయారీదారుల పేరును కనుగొనండి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1970లో కారును ఉత్పత్తి చేసిన వివిధ కార్ల తయారీదారుల పేరు ఏమిటి?", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1970లో కారును ఉత్పత్తి చేసిన వివిధ కార్ల తయారీదారుల పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "తొలి సంవత్సరంలో ఉత్పత్తి చేయబడిన కార్ల తయారీ మరియు ఉత్పత్తి సమయాన్ని కనుగొనండి?", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select cars_data.year  , car_makers.maker  , model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### తొలి సంవత్సరంలో ఉత్పత్తి చేయబడిన కార్ల తయారీ మరియు ఉత్పత్తి సమయాన్ని కనుగొనండి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "తొలి సంవత్సరంలో ఉత్పత్తి చేయబడిన కారు తయారీదారు ఏది మరియు అది ఏ సంవత్సరం?", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select car_makers.maker  , cars_data.year from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### తొలి సంవత్సరంలో ఉత్పత్తి చేయబడిన కారు తయారీదారు ఏది మరియు అది ఏ సంవత్సరం? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980 తర్వాత ఏ ప్రత్యేకమైన కార్ మోడల్‌లు ఉత్పత్తి చేయబడ్డాయి?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year > 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980 తర్వాత ఏ ప్రత్యేకమైన కార్ మోడల్‌లు ఉత్పత్తి చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980 తర్వాత ఉత్పత్తి చేయబడిన కార్డ్‌ల కోసం వివిధ నమూనాలు ఏమిటి?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data where cars_data.year > 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980 తర్వాత ఉత్పత్తి చేయబడిన కార్డ్‌ల కోసం వివిధ నమూనాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఒక్కో ఖండంలో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు? ఖండం పేరు మరియు గణనను జాబితా చేయండి.", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select count ( distinct car_makers.id ) as total_car_makers from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఒక్కో ఖండంలో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు? ఖండం పేరు మరియు గణనను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి ఖండం పేరు ఏమిటి మరియు ప్రతి దానిలో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు?", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select car_makers.maker  , count ( distinct car_makers.id ) as num_car_makers from car_makers group by car_makers.maker", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి ఖండం పేరు ఏమిటి మరియు ప్రతి దానిలో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అత్యధిక కార్ల తయారీదారులను కలిగి ఉన్న దేశాలు ఏవి? దేశం పేరును జాబితా చేయండి.", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select countries.countryname from countries join car_makers on car_makers.country = countries.countryid group by countries.countryname having count ( car_makers.id ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అత్యధిక కార్ల తయారీదారులను కలిగి ఉన్న దేశాలు ఏవి? దేశం పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అత్యధిక కార్ల తయారీదారులు ఉన్న దేశం పేరు ఏమిటి?", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select car_makers.country from car_makers group by car_makers.country having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అత్యధిక కార్ల తయారీదారులు ఉన్న దేశం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి తయారీదారు ఎన్ని కార్ మోడళ్లను ఉత్పత్తి చేస్తారు? గణన మరియు తయారీదారు పూర్తి పేరును మాత్రమే జాబితా చేయండి.", "query": "select count ( * ) , car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "select car_makers.fullname  , count ( model_list.model ) as total_models from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.fullname", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి తయారీదారు ఎన్ని కార్ మోడళ్లను ఉత్పత్తి చేస్తారు? గణన మరియు తయారీదారు పూర్తి పేరును మాత్రమే జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి తయారీదారు ఉత్పత్తి చేసే కార్ మోడల్‌ల సంఖ్య మరియు ప్రతి తయారీదారు యొక్క ఐడి మరియు పూర్తి పేరు ఏమిటి?", "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "select car_makers.id  , car_makers.maker  , count ( model_list.modelid ) as model_count from car_makers join model_list on model_list.maker = car_makers.id group by car_makers.id  , car_makers.maker", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి తయారీదారు ఉత్పత్తి చేసే కార్ మోడల్‌ల సంఖ్య మరియు ప్రతి తయారీదారు యొక్క ఐడి మరియు పూర్తి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కారు మేక్ ఎమ్‌సి హార్నెట్ స్పోర్టబౌట్ (sw) యొక్క యాక్సిలరేట్ ఎంత?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select cars_data.accelerate from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_names.make = 'EMC' and car_names.model = 'Hornet Sportabout' and continents.continent = 'sw'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కారు మేక్ ఎమ్‌సి హార్నెట్ స్పోర్టబౌట్ (sw) యొక్క యాక్సిలరేట్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏఎమ్‌సి హార్నెట్ స్పోర్టబౌట్ (sw)ని తయారు చేసే కారు ఎంత వేగవంతమవుతుంది?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select cars_data.accelerate from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_names.make = 'ఏఎమ్‌సి హార్నెట్ స్పోర్టబౌట్ (sw)'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏఎమ్‌సి హార్నెట్ స్పోర్టబౌట్ (sw)ని తయారు చేసే కారు ఎంత వేగవంతమవుతుంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఫ్రాన్స్‌లో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select count ( car_makers.id ) from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'ఫ్రాన్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఫ్రాన్స్‌లో ఎంత మంది కార్ల తయారీదారులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఫ్రాన్స్‌లో సంరక్షణ తయారీదారుల సంఖ్య ఎంత?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select count ( car_makers.id ) from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'ఫ్రాన్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఫ్రాన్స్‌లో సంరక్షణ తయారీదారుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "USAలో ఎన్ని కార్ మోడల్‌లు ఉత్పత్తి చేయబడ్డాయి?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( distinct model_list.model ) as total_car_models from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### USAలో ఎన్ని కార్ మోడల్‌లు ఉత్పత్తి చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "యునైటెడ్ స్టేట్స్‌లో ఉత్పత్తి చేయబడిన కార్ మోడల్‌ల కౌంట్ ఎంత?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( cars_data.id ) from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where countries.countryname = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### యునైటెడ్ స్టేట్స్‌లో ఉత్పత్తి చేయబడిన కార్ మోడల్‌ల కౌంట్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 సిలిండర్‌లు ఉన్న కార్ల గ్యాలన్ (mpg)కి సగటు మైళ్లు ఎంత?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select cars_data.mpg from cars_data where cars_data.cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 సిలిండర్‌లు ఉన్న కార్ల గ్యాలన్ (mpg)కి సగటు మైళ్లు ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 సిలిండర్‌లు ఉన్న అన్ని కార్డ్‌ల సగటు మైళ్లు ప్రతి గాలన్‌కి ఎంత?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select cars_data.mpg from cars_data where cars_data.cylinders = 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 సిలిండర్‌లు ఉన్న అన్ని కార్డ్‌ల సగటు మైళ్లు ప్రతి గాలన్‌కి ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1974లో 8 సిలిండర్లతో ఉత్పత్తి చేయబడిన కారు యొక్క అతి చిన్న బరువు ఎంత?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1974లో 8 సిలిండర్లతో ఉత్పత్తి చేయబడిన కారు యొక్క అతి చిన్న బరువు ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1974లో ఉత్పత్తి చేయబడిన 8 సిలిండర్లు కలిగిన కారు కనీస బరువు ఎంత?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select cars_data.weight from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974 order by cars_data.weight asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1974లో ఉత్పత్తి చేయబడిన 8 సిలిండర్లు కలిగిన కారు కనీస బరువు ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అన్ని తయారీదారులు మరియు నమూనాలు ఏమిటి?", "query": "select maker , model from model_list", "predicted_sql": "select continents.contid  , continents.continent  , countries.countryid  , countries.countryname  , countries.continent  , car_makers.id  , car_makers.maker  , car_makers.fullname  , car_makers.country  , model_list.modelid  , model_list.maker  , model_list.model  , car_names.makeid  , car_names.model  , car_names.make  , cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents  , countries  , car_makers  , model_list  , car_names  , cars_data where countries.continent = continents.contid and car_makers.country = countries.countryid and model_list.maker = car_makers.id and car_names.model = model_list.model and cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అన్ని తయారీదారులు మరియు నమూనాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "తయారీదారులు మరియు నమూనాలు ఏమిటి?", "query": "select maker , model from model_list", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , car_makers.country  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### తయారీదారులు మరియు నమూనాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీసం ఒక కార్ తయారీదారుని కలిగి ఉన్న దేశాలు ఏవి? జాబితా పేరు మరియు ఐడి.", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select countries.countryname  , countries.countryid from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'కార్ తయారీదారు పేరు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీసం ఒక కార్ తయారీదారుని కలిగి ఉన్న దేశాలు ఏవి? జాబితా పేరు మరియు ఐడి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీసం ఒక కార్ మేకర్ ఉన్న అన్ని దేశాల పేర్లు మరియు ఐడీలు ఏమిటి?", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.country from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీసం ఒక కార్ మేకర్ ఉన్న అన్ని దేశాల పేర్లు మరియు ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "150 కంటే ఎక్కువ హార్స్ పవర్ ఉన్న కార్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where horsepower > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 150 కంటే ఎక్కువ హార్స్ పవర్ ఉన్న కార్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "150 కంటే ఎక్కువ హార్స్‌పవర్ ఉన్న కార్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where horsepower > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 150 కంటే ఎక్కువ హార్స్‌పవర్ ఉన్న కార్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి సంవత్సరం కార్ల సగటు బరువు ఎంత?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select cars_data.year  , sum ( cars_data.weight ) as total_weight from cars_data group by cars_data.year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి సంవత్సరం కార్ల సగటు బరువు ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ప్రతి సంవత్సరం సగటు బరువు మరియు సంవత్సరం ఎంత?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select cars_data.year  , sum ( cars_data.weight ) as total_weight  , avg ( cars_data.weight ) as average_weight from cars_data group by cars_data.year", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ప్రతి సంవత్సరం సగటు బరువు మరియు సంవత్సరం ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "యూరోప్‌లోని ఏ దేశాలు కనీసం 3 కార్ల తయారీదారులను కలిగి ఉన్నాయి?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select countries.countryname from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid group by countries.countryname having count ( distinct car_makers.id ) >= 3 and continents.continent = 'యూరోప్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### యూరోప్‌లోని ఏ దేశాలు కనీసం 3 కార్ల తయారీదారులను కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీసం 3 తయారీదారులు ఉన్న అన్ని యూరోపియన్ దేశాల పేర్లు ఏమిటి?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select car_makers.maker from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'Europe' limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీసం 3 తయారీదారులు ఉన్న అన్ని యూరోపియన్ దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "గరిష్ట హార్స్‌పవర్ మరియు 3 సిలిండర్‌లతో కూడిన కారు మోడల్‌ల తయారీ ఎంత?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.cylinders = 3 and cars_data.horsepower > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### గరిష్ట హార్స్‌పవర్ మరియు 3 సిలిండర్‌లతో కూడిన కారు మోడల్‌ల తయారీ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3 సిలిండర్‌లతో కూడిన మోడల్‌ల కోసం అతిపెద్ద మొత్తంలో హార్స్‌పవర్ ఏది మరియు అది ఏది తయారు చేయబడింది?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select cars_data.horsepower  , cars_data.weight from cars_data where cars_data.cylinders = 3 order by cars_data.weight desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3 సిలిండర్‌లతో కూడిన మోడల్‌ల కోసం అతిపెద్ద మొత్తంలో హార్స్‌పవర్ ఏది మరియు అది ఏది తయారు చేయబడింది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏ మోడల్ ఎక్కువ గ్యాసోలిన్ ఆదా చేస్తుంది? అంటే, గాలన్‌కు గరిష్ట మైళ్లను కలిగి ఉండండి.", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select model_list.model  , sum ( cars_data.mpg ) as total_mpg from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.id in ( select cars_data.id from cars_data where cars_data.mpg = ( select max ( cars_data.mpg ) from cars_data ) ) group by model_list.model order by total_mpg desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏ మోడల్ ఎక్కువ గ్యాసోలిన్ ఆదా చేస్తుంది? అంటే, గాలన్‌కు గరిష్ట మైళ్లను కలిగి ఉండండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అత్యధిక mpg ఉన్న కారు మోడల్ ఏది?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.mpg = ( select max ( mpg ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అత్యధిక mpg ఉన్న కారు మోడల్ ఏది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980కి ముందు కార్ల సగటు హార్స్‌పవర్ ఎంత?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select cars_data.horsepower from cars_data where cars_data.year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980కి ముందు కార్ల సగటు హార్స్‌పవర్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980కి ముందు ఉత్పత్తి చేయబడిన అన్ని కార్ల సగటు హార్స్‌పవర్ ఎంత?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select sum ( cars_data.horsepower ) from cars_data where cars_data.year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980కి ముందు ఉత్పత్తి చేయబడిన అన్ని కార్ల సగటు హార్స్‌పవర్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "మోడల్ వోల్వో కార్ల సగటు edispl ఎంత?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select cars_data.edispl from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.maker = 'వోల్వో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### మోడల్ వోల్వో కార్ల సగటు edispl ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అన్ని వోల్వోలకు సగటు edispl ఎంత?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select cars_data.edispl from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.fullname = 'Volvo'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అన్ని వోల్వోలకు సగటు edispl ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "వివిధ సంఖ్యలో సిలిండర్‌లకు గరిష్ట త్వరణం ఎంత?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select cars_data.cylinders  , max ( cars_data.accelerate ) as max_accelerate from cars_data group by cars_data.cylinders order by max_accelerate desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### వివిధ సంఖ్యలో సిలిండర్‌లకు గరిష్ట త్వరణం ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అన్ని విభిన్న సిలిండర్‌లకు గరిష్ట త్వరణం ఎంత?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select max ( cars_data.accelerate ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అన్ని విభిన్న సిలిండర్‌లకు గరిష్ట త్వరణం ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏ మోడల్ కార్లలో అత్యధిక వెర్షన్ (తయారు) కలిగి ఉంది?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏ మోడల్ కార్లలో అత్యధిక వెర్షన్ (తయారు) కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏ మోడల్ చాలా విభిన్న సంస్కరణలను కలిగి ఉంది?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select distinct model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏ మోడల్ చాలా విభిన్న సంస్కరణలను కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఎన్ని కార్లలో 4 కంటే ఎక్కువ సిలిండర్లు ఉన్నాయి?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from cars_data where cylinders > 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఎన్ని కార్లలో 4 కంటే ఎక్కువ సిలిండర్లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 కంటే ఎక్కువ సిలిండర్లు ఉన్న కార్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( cars_data.id ) from cars_data where cars_data.cylinders > 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 కంటే ఎక్కువ సిలిండర్లు ఉన్న కార్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980లో ఎన్ని కార్లు ఉత్పత్తి చేయబడ్డాయి?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select count ( * ) from cars_data where year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980లో ఎన్ని కార్లు ఉత్పత్తి చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "1980లో, ఎన్ని కార్లు తయారు చేయబడ్డాయి?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select count ( * ) from cars_data where year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 1980లో, ఎన్ని కార్లు తయారు చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "పూర్తి పేరు అమెరికన్ మోటార్ కంపెనీతో తయారీదారు ఎన్ని కార్ మోడళ్లను ఉత్పత్తి చేశాడు?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "select model_list.model from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id where car_makers.fullname = 'అమెరికన్ మోటార్ కంపెనీ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### పూర్తి పేరు అమెరికన్ మోటార్ కంపెనీతో తయారీదారు ఎన్ని కార్ మోడళ్లను ఉత్పత్తి చేశాడు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కార్ల తయారీ సంస్థ అమెరికన్ మోటార్ కంపెనీ రూపొందించిన కార్ మోడల్‌ల సంఖ్య ఎంత?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "select count ( model_list.modelid ) from car_makers join model_list on model_list.maker = car_makers.id where car_makers.fullname = 'అమెరికన్ మోటార్ కంపెనీ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కార్ల తయారీ సంస్థ అమెరికన్ మోటార్ కంపెనీ రూపొందించిన కార్ మోడల్‌ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏ తయారీదారులు 3 కంటే ఎక్కువ కార్ మోడళ్లను రూపొందించారు? పూర్తి పేరు మరియు ఐడిని జాబితా చేయండి.", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.maker  , count ( model_list.model ) as num_models from model_list group by model_list.maker having count ( model_list.model ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏ తయారీదారులు 3 కంటే ఎక్కువ కార్ మోడళ్లను రూపొందించారు? పూర్తి పేరు మరియు ఐడిని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3 కంటే ఎక్కువ మోడల్‌లను కలిగి ఉన్న అన్ని తయారీదారుల పేర్లు మరియు ఐడిలు ఏమిటి?", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3 కంటే ఎక్కువ మోడల్‌లను కలిగి ఉన్న అన్ని తయారీదారుల పేర్లు మరియు ఐడిలు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "పూర్తి పేరుతో జనరల్ మోటార్స్ లేదా 3500 కంటే ఎక్కువ బరువున్న తయారీదారు ఏ విలక్షణమైన మోడళ్లను ఉత్పత్తి చేస్తారు?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### పూర్తి పేరుతో జనరల్ మోటార్స్ లేదా 3500 కంటే ఎక్కువ బరువున్న తయారీదారు ఏ విలక్షణమైన మోడళ్లను ఉత్పత్తి చేస్తారు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కార్ల తయారీ సంస్థ జనరల్ మోటార్స్ లేదా 3500 కంటే ఎక్కువ బరువుతో రూపొందించిన విభిన్న మోడల్‌లు ఏమిటి?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from car_makers join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where cars_data.weight > 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కార్ల తయారీ సంస్థ జనరల్ మోటార్స్ లేదా 3500 కంటే ఎక్కువ బరువుతో రూపొందించిన విభిన్న మోడల్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఏ సంవత్సరాల్లో 3000 కంటే తక్కువ మరియు 4000 కంటే ఎక్కువ బరువు లేని కార్లు ఉత్పత్తి చేయబడ్డాయి?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data where cars_data.weight < 3000 and cars_data.weight > 4000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఏ సంవత్సరాల్లో 3000 కంటే తక్కువ మరియు 4000 కంటే ఎక్కువ బరువు లేని కార్లు ఉత్పత్తి చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4000 కంటే తక్కువ బరువున్న కార్లు మరియు 3000 కంటే ఎక్కువ బరువున్న కార్లు ఉత్పత్తి చేయబడిన వివిధ సంవత్సరాల్లో ఏవి ఉన్నాయి?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.weight < 4000 and cars_data.weight > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4000 కంటే తక్కువ బరువున్న కార్లు మరియు 3000 కంటే ఎక్కువ బరువున్న కార్లు ఉత్పత్తి చేయబడిన వివిధ సంవత్సరాల్లో ఏవి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అతిపెద్ద యాక్సిలరేట్ ఉన్న కారు యొక్క హార్స్‌పవర్ ఎంత?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "select max ( cars_data.horsepower ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అతిపెద్ద యాక్సిలరేట్ ఉన్న కారు యొక్క హార్స్‌పవర్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "గ్రేటెస్ట్ యాక్సిలరేట్ ఉన్న కారు హార్స్‌పవర్ ఎంత?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "select cars_data.horsepower from cars_data where cars_data.accelerate = ( select max ( accelerate ) from cars_data )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### గ్రేటెస్ట్ యాక్సిలరేట్ ఉన్న కారు హార్స్‌పవర్ ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "మోడల్ వోల్వో కోసం, తక్కువ యాక్సిలరేట్ ఉన్న కారులో ఎన్ని సిలిండర్లు ఉంటాయి?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### మోడల్ వోల్వో కోసం, తక్కువ యాక్సిలరేట్ ఉన్న కారులో ఎన్ని సిలిండర్లు ఉంటాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "వోల్వో మోడల్ కోసం, కనీసం యాక్సిలరేట్ ఉన్న వెర్షన్ ఎన్ని సిలిండర్‌లను కలిగి ఉంటుంది?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "select cars_data.cylinders from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where car_names.make = 'వోల్వో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### వోల్వో మోడల్ కోసం, కనీసం యాక్సిలరేట్ ఉన్న వెర్షన్ ఎన్ని సిలిండర్‌లను కలిగి ఉంటుంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అతిపెద్ద హార్స్‌పవర్ ఉన్న కారు కంటే పెద్ద యాక్సిలరేట్‌ని ఎన్ని కార్లు కలిగి ఉన్నాయి?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అతిపెద్ద హార్స్‌పవర్ ఉన్న కారు కంటే పెద్ద యాక్సిలరేట్‌ని ఎన్ని కార్లు కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అత్యధిక హార్స్‌పవర్ కలిగిన కార్ల కంటే ఎక్కువ యాక్సిలరేట్ ఉన్న కార్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అత్యధిక హార్స్‌పవర్ కలిగిన కార్ల కంటే ఎక్కువ యాక్సిలరేట్ ఉన్న కార్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "2 కంటే ఎక్కువ కార్ల తయారీదారులు ఎన్ని దేశాల్లో ఉన్నారు?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select count ( distinct car_makers.id ) as num_car_makers from car_makers join countries on car_makers.country = countries.countryid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 2 కంటే ఎక్కువ కార్ల తయారీదారులు ఎన్ని దేశాల్లో ఉన్నారు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "2 కంటే ఎక్కువ కార్ల తయారీదారులు ఉన్న దేశాల సంఖ్య ఎంత?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select count ( distinct car_makers.id ) as num_car_makers from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 2 కంటే ఎక్కువ కార్ల తయారీదారులు ఉన్న దేశాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "6 కంటే ఎక్కువ సిలిండర్లను కలిగి ఉన్న కార్లు ఎన్ని?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select cars_data.id from cars_data where cars_data.cylinders > 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 6 కంటే ఎక్కువ సిలిండర్లను కలిగి ఉన్న కార్లు ఎన్ని? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "6 కంటే ఎక్కువ సిలిండర్లు ఉన్న కార్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( * ) from cars_data where cylinders >= 6", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 6 కంటే ఎక్కువ సిలిండర్లు ఉన్న కార్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 సిలిండర్లు ఉన్న కార్ల కోసం, ఏ మోడల్ అతిపెద్ద హార్స్‌పవర్‌ను కలిగి ఉంది?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 సిలిండర్లు ఉన్న కార్ల కోసం, ఏ మోడల్ అతిపెద్ద హార్స్‌పవర్‌ను కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అన్ని 4 సిలిండర్ కార్ల కోసం, ఏ మోడల్ ఎక్కువ హార్స్‌పవర్‌ని కలిగి ఉంది?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అన్ని 4 సిలిండర్ కార్ల కోసం, ఏ మోడల్ ఎక్కువ హార్స్‌పవర్‌ని కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "అత్యల్ప హార్స్‌పవర్ కంటే ఎక్కువ ఉన్న కార్లలో, ఏవి 3 కంటే ఎక్కువ సిలిండర్‌లను కలిగి ఉండవు? తయారు చేసిన కారును జాబితా చేయండి మరియు పేరు పెట్టండి.", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders <= 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### అత్యల్ప హార్స్‌పవర్ కంటే ఎక్కువ ఉన్న కార్లలో, ఏవి 3 కంటే ఎక్కువ సిలిండర్‌లను కలిగి ఉండవు? తయారు చేసిన కారును జాబితా చేయండి మరియు పేరు పెట్టండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీస హార్స్‌పవర్ లేని కార్లలో, 4 సిలిండర్‌ల కంటే తక్కువ ఉన్న అన్ని కార్ల తయారీ ఐడీలు మరియు పేర్లు ఏమిటి?", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.fullname from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.horsepower is null and cars_data.cylinders < 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీస హార్స్‌పవర్ లేని కార్లలో, 4 సిలిండర్‌ల కంటే తక్కువ ఉన్న అన్ని కార్ల తయారీ ఐడీలు మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 సిలిండర్లు లేదా 1980కి ముందు ఉత్పత్తి చేయబడిన కారు యొక్క గాలన్‌కు గరిష్ట మైళ్లు ఎంత?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 and cars_data.year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 సిలిండర్లు లేదా 1980కి ముందు ఉత్పత్తి చేయబడిన కారు యొక్క గాలన్‌కు గరిష్ట మైళ్లు ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 సిలిండర్లు ఉన్న లేదా 1980కి ముందు ఉత్పత్తి చేయబడిన కార్ల గరిష్ట mpg ఎంత?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "select cars_data.mpg from cars_data where cars_data.cylinders = 8 and cars_data.year < 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 సిలిండర్లు ఉన్న లేదా 1980కి ముందు ఉత్పత్తి చేయబడిన కార్ల గరిష్ట mpg ఎంత? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3500 కంటే తేలికైన మోడల్స్ ఏవి కానీ &#39;ఫోర్డ్ మోటార్ కంపెనీ&#39; నిర్మించలేదు?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.model from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname  != 'ఫోర్డ్ మోటార్ కంపెనీ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3500 కంటే తేలికైన మోడల్స్ ఏవి కానీ &#39;ఫోర్డ్ మోటార్ కంపెనీ&#39; నిర్మించలేదు? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3500 కంటే తేలికైన కానీ ఫోర్డ్ మోటార్ కంపెనీ నిర్మించని విభిన్న నమూనాలు ఏవి?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.model from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'Ford Motor Company' limit 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3500 కంటే తేలికైన కానీ ఫోర్డ్ మోటార్ కంపెనీ నిర్మించని విభిన్న నమూనాలు ఏవి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ఒక్క కార్ మేకర్ కూడా లేని దేశాల పేర్లు ఏమిటి?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select car_makers.maker from car_makers where car_makers.country not in ( select countries.countryid from countries )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ఒక్క కార్ మేకర్ కూడా లేని దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కార్ల తయారీదారులు లేని దేశాల పేర్లు ఏమిటి?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select car_makers.maker from car_makers where car_makers.country is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కార్ల తయారీదారులు లేని దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీసం 2 మోడల్‌లు మరియు 3 కంటే ఎక్కువ కార్ల తయారీదారులను ఉత్పత్తి చేసే కార్ల తయారీదారులు ఎవరు? id మరియు తయారీదారుని జాబితా చేయండి.", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.fullname from car_makers join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model group by car_makers.id  , car_makers.maker  , car_makers.fullname having count ( distinct car_names.makeid ) >= 3 limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీసం 2 మోడల్‌లు మరియు 3 కంటే ఎక్కువ కార్ల తయారీదారులను ఉత్పత్తి చేసే కార్ల తయారీదారులు ఎవరు? id మరియు తయారీదారుని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "కనీసం 2 మోడల్‌లను ఉత్పత్తి చేసే మరియు 3 కంటే ఎక్కువ కార్లను తయారు చేసే అన్ని కార్ల తయారీదారుల ఐడీలు మరియు తయారీదారులు ఏమిటి?", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.fullname from car_makers join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model group by car_makers.id  , car_makers.maker  , car_makers.fullname having count ( distinct car_names.makeid ) > 2 limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### కనీసం 2 మోడల్‌లను ఉత్పత్తి చేసే మరియు 3 కంటే ఎక్కువ కార్లను తయారు చేసే అన్ని కార్ల తయారీదారుల ఐడీలు మరియు తయారీదారులు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3 కంటే ఎక్కువ కార్ల తయారీదారులను కలిగి ఉన్న లేదా &#39;ఫియట్&#39; మోడల్‌ను ఉత్పత్తి చేసే దేశాల ఐడి మరియు పేర్లు ఏమిటి?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.fullname  , car_makers.country from car_makers where car_makers.maker = 'ఫియట్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3 కంటే ఎక్కువ కార్ల తయారీదారులను కలిగి ఉన్న లేదా &#39;ఫియట్&#39; మోడల్‌ను ఉత్పత్తి చేసే దేశాల ఐడి మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "3 కంటే ఎక్కువ కార్ల తయారీదారులను కలిగి ఉన్న లేదా ఫియట్ మోడల్‌ను ఉత్పత్తి చేసే అన్ని దేశాల ఐడిలు మరియు పేర్లు ఏమిటి?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select car_makers.id  , car_makers.maker  , car_makers.fullname  , car_makers.country from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker  != 'Fiat' or car_makers.maker = 'Fiat' and car_makers.fullname  != 'Fiat'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 3 కంటే ఎక్కువ కార్ల తయారీదారులను కలిగి ఉన్న లేదా ఫియట్ మోడల్‌ను ఉత్పత్తి చేసే అన్ని దేశాల ఐడిలు మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "flight_2", "question": "ఎయిర్‌లైన్ &quot;జెట్‌బ్లూ ఎయిర్‌వేస్&quot; ఏ దేశానికి చెందినది?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airlines.country from airlines where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌లైన్ &quot;జెట్‌బ్లూ ఎయిర్‌వేస్&quot; ఏ దేశానికి చెందినది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "జెట్‌బ్లూ ఎయిర్‌వేస్ ఏ దేశంతో అనుబంధంగా ఉంది?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airlines.country from airlines where airlines.airline = 'జెట్‌బ్లూ ఎయిర్‌వేస్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### జెట్‌బ్లూ ఎయిర్‌వేస్ ఏ దేశంతో అనుబంధంగా ఉంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఎయిర్‌లైన్ &quot;జెట్‌బ్లూ ఎయిర్‌వేస్&quot; యొక్క సంక్షిప్తీకరణ ఏమిటి?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select abbreviation from airlines where airline = 'జెట్‌బ్లూ ఎయిర్‌వేస్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌లైన్ &quot;జెట్‌బ్లూ ఎయిర్‌వేస్&quot; యొక్క సంక్షిప్తీకరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ సంక్షిప్తీకరణ జెట్‌బ్లూ ఎయిర్‌వేస్‌కు అనుగుణంగా ఉంటుంది?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airlines.airline from airlines where airlines.abbreviation = 'JetBlue'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ సంక్షిప్తీకరణ జెట్‌బ్లూ ఎయిర్‌వేస్‌కు అనుగుణంగా ఉంటుంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&quot;USA&quot;లో అన్ని ఎయిర్‌లైన్ పేర్లు మరియు వాటి సంక్షిప్తాలను జాబితా చేయండి.", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airlines.airline  , airlines.abbreviation from airlines where airlines.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &quot;USA&quot;లో అన్ని ఎయిర్‌లైన్ పేర్లు మరియు వాటి సంక్షిప్తాలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "USAలోని ఎయిర్‌లైన్‌ల కోసం ఎయిర్‌లైన్ పేర్లు మరియు సంక్షిప్తాలు ఏమిటి?", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airlines.airline  , airlines.abbreviation from airlines where airlines.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### USAలోని ఎయిర్‌లైన్‌ల కోసం ఎయిర్‌లైన్ పేర్లు మరియు సంక్షిప్తాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఆంథోనీ నగరంలో విమానాశ్రయం కోడ్ మరియు పేరును జాబితా చేయండి.", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = 'ఆంథోనీ నగరం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఆంథోనీ నగరంలో విమానాశ్రయం కోడ్ మరియు పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఆంథోనీ నగరానికి సంబంధించిన విమానాశ్రయం కోడ్ మరియు విమానాశ్రయం పేరును ఇవ్వండి.", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = 'ఆంథోనీ నగరం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఆంథోనీ నగరానికి సంబంధించిన విమానాశ్రయం కోడ్ మరియు విమానాశ్రయం పేరును ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "మనకు ఎన్ని విమానయాన సంస్థలు ఉన్నాయి?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( distinct airlines.airline ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### మనకు ఎన్ని విమానయాన సంస్థలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "మొత్తం విమానయాన సంస్థల సంఖ్య ఎంత?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( distinct airlines.uid ) as total_airlines from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### మొత్తం విమానయాన సంస్థల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "మనకు ఎన్ని విమానాశ్రయాలు ఉన్నాయి?", "query": "select count ( * ) from airports", "predicted_sql": "select count ( distinct airports.airportcode ) as num_airports from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### మనకు ఎన్ని విమానాశ్రయాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాశ్రయాల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from airports", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాశ్రయాల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "మనకు ఎన్ని విమానాలు ఉన్నాయి?", "query": "select count ( * ) from flights", "predicted_sql": "select count ( distinct airlines.airline ) as total_airlines from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### మనకు ఎన్ని విమానాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from flights", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;UAL&#39; సంక్షిప్తీకరణను కలిగి ఉన్న విమానయాన సంస్థ ఏది?", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select airlines.airline from airlines where airlines.abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;UAL&#39; సంక్షిప్తీకరణను కలిగి ఉన్న విమానయాన సంస్థ ఏది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;UAL&#39; సంక్షిప్తీకరణతో విమానయాన సంస్థకు ఇవ్వండి.", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select airlines.airline from airlines where airlines.abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;UAL&#39; సంక్షిప్తీకరణతో విమానయాన సంస్థకు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "USA నుండి ఎన్ని విమానయాన సంస్థలు ఉన్నాయి?", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( distinct airlines.airline ) from airlines where airlines.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country ( USA ) | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### USA నుండి ఎన్ని విమానయాన సంస్థలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "USAలోని విమానయాన సంస్థల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( * ) from airlines where airlines.country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### USAలోని విమానయాన సంస్థల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఆల్టన్ విమానాశ్రయం ఏ నగరం మరియు దేశంలో ఉంది?", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.city  , airports.country from airports where airports.airportname = 'ఆల్టన్ విమానాశ్రయం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఆల్టన్ విమానాశ్రయం ఏ నగరం మరియు దేశంలో ఉంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఆల్టన్ విమానాశ్రయం కోసం నగరం మరియు దేశాన్ని ఇవ్వండి.", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.city  , airports.country from airports where airports.airportname = 'ఆల్టన్ విమానాశ్రయం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఆల్టన్ విమానాశ్రయం కోసం నగరం మరియు దేశాన్ని ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాశ్రయం &#39;AKO&#39; యొక్క విమానాశ్రయం పేరు ఏమిటి?", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాశ్రయం &#39;AKO&#39; యొక్క విమానాశ్రయం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;AKO&#39; కోడ్‌తో విమానాశ్రయం పేరును తిరిగి ఇవ్వండి.", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airportname from airports where airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;AKO&#39; కోడ్‌తో విమానాశ్రయం పేరును తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ &#39;అబెర్డీన్&#39;లో విమానాశ్రయాల పేర్లు ఏమిటి?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ &#39;అబెర్డీన్&#39;లో విమానాశ్రయాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్‌లోని విమానాశ్రయాల పేర్లు ఏమిటి?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్‌లోని విమానాశ్రయాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;APG&#39; నుండి ఎన్ని విమానాలు బయలుదేరుతాయి?", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from flights where sourceairport = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;APG&#39; నుండి ఎన్ని విమానాలు బయలుదేరుతాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;APG&#39; నుండి బయలుదేరే విమానాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from flights where sourceairport = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;APG&#39; నుండి బయలుదేరే విమానాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ATOకి ఎన్ని విమానాలు గమ్యస్థానాన్ని కలిగి ఉన్నాయి?", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "select count ( distinct flights.airline ) as num_flights from flights where flights.destairport = 'ATO' or flights.sourceairport = 'ATO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ATOకి ఎన్ని విమానాలు గమ్యస్థానాన్ని కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ATOలోని విమానాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ATOలోని విమానాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ అబెర్డీన్ నుండి ఎన్ని విమానాలు బయలుదేరుతాయి?", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights where sourceairport = ( select airportcode from airports where city = 'Aberdeen' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ అబెర్డీన్ నుండి ఎన్ని విమానాలు బయలుదేరుతాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ నుండి బయలుదేరే విమానాల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( flights.flightno ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ నుండి బయలుదేరే విమానాల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ నగరానికి ఎన్ని విమానాలు వచ్చాయి?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ నగరానికి ఎన్ని విమానాలు వచ్చాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్‌కు చేరుకున్న విమానాల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights where destairport = 'ABZ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్‌కు చేరుకున్న విమానాల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ &#39;అబెర్డీన్&#39; నుండి ఎన్ని విమానాలు బయలుదేరుతాయి మరియు గమ్యస్థానం &#39;యాష్లే&#39;ని కలిగి ఉన్నాయి?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen' and flights.destairport = 'YAS'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ &#39;అబెర్డీన్&#39; నుండి ఎన్ని విమానాలు బయలుదేరుతాయి మరియు గమ్యస్థానం &#39;యాష్లే&#39;ని కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ నుండి ఆష్లేకి ఎన్ని విమానాలు నడుస్తాయి?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights where sourceairport = ( select airportcode from airports where city = 'Aberdeen' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ నుండి ఆష్లేకి ఎన్ని విమానాలు నడుస్తాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానయాన సంస్థ &#39;జెట్‌బ్లూ ఎయిర్‌వేస్&#39; ఎన్ని విమానాలను కలిగి ఉంది?", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'జెట్‌బ్లూ ఎయిర్‌వేస్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానయాన సంస్థ &#39;జెట్‌బ్లూ ఎయిర్‌వేస్&#39; ఎన్ని విమానాలను కలిగి ఉంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "జెట్‌బ్లూ ఎయిర్‌వేస్ విమానాల సంఖ్యను ఇవ్వండి.", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select count ( flights.flightno ) from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### జెట్‌బ్లూ ఎయిర్‌వేస్ విమానాల సంఖ్యను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఎయిర్‌పోర్ట్ &#39;ASY&#39;కి ఎన్ని &#39;యునైటెడ్ ఎయిర్‌లైన్స్&#39; విమానాలు వెళ్తాయి?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select count ( flights.flightno ) from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = 'United Airlines' and airports.airportcode = 'ASY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌పోర్ట్ &#39;ASY&#39;కి ఎన్ని &#39;యునైటెడ్ ఎయిర్‌లైన్స్&#39; విమానాలు వెళ్తాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ASY విమానాశ్రయానికి చేరుకున్న యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select count ( flights.flightno ) from flights join airlines on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airports.city = 'ASY' and airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ASY ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ASY ) , flights.destairport ( ASY ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ASY విమానాశ్రయానికి చేరుకున్న యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఎయిర్‌పోర్ట్ &#39;AHD&#39; నుండి ఎన్ని &#39;యునైటెడ్ ఎయిర్‌లైన్స్&#39; విమానాలు బయలుదేరుతాయి?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select count ( flights.flightno ) from flights join airlines on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airports.airportcode = 'AHD' and airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌పోర్ట్ &#39;AHD&#39; నుండి ఎన్ని &#39;యునైటెడ్ ఎయిర్‌లైన్స్&#39; విమానాలు బయలుదేరుతాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "AHD విమానాశ్రయం నుండి బయలుదేరే యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'AHD' and airlines.country = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AHD ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.destairport ( AHD ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### AHD విమానాశ్రయం నుండి బయలుదేరే యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ &#39;అబెర్డీన్&#39;కి ఎన్ని యునైటెడ్ ఎయిర్‌లైన్స్ విమానాలు వెళ్తాయి?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select count ( flights.flightno ) from flights join airlines on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ &#39;అబెర్డీన్&#39;కి ఎన్ని యునైటెడ్ ఎయిర్‌లైన్స్ విమానాలు వెళ్తాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్‌కు వచ్చిన యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select count ( flights.flightno ) from flights join airlines on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airlines.airline = 'United Airlines' and airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్‌కు వచ్చిన యునైటెడ్ ఎయిర్‌లైన్స్ విమానాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ నగరానికి ఎక్కువ సంఖ్యలో వచ్చే విమానాలు ఉన్నాయి?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city  , count ( flights.airline ) as num_flights from airports join flights on flights.destairport = airports.airportcode group by airports.city order by num_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ నగరానికి ఎక్కువ సంఖ్యలో వచ్చే విమానాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ నగరంలో అత్యంత తరచుగా గమ్యస్థాన విమానాశ్రయం ఉంది?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports group by airports.city having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from airports group by airports.city ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ నగరంలో అత్యంత తరచుగా గమ్యస్థాన విమానాశ్రయం ఉంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ నగరం నుండి బయలుదేరే విమానాలు ఎక్కువగా ఉన్నాయి?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city  , count ( flights.airline ) as num_flights from airports join flights on flights.destairport = airports.airportcode group by airports.city order by num_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ నగరం నుండి బయలుదేరే విమానాలు ఎక్కువగా ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అత్యంత తరచుగా సోర్స్ విమానాశ్రయం ఏ నగరం?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports join flights on flights.sourceairport = airports.airportcode where flights.destairport = 'ఏ నగరం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అత్యంత తరచుగా సోర్స్ విమానాశ్రయం ఏ నగరం? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అత్యధిక విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఏది?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "select airports.airportcode from airports group by airports.airportcode having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అత్యధిక విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఏది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అత్యధిక విమానాలు ఉన్న విమానాశ్రయం యొక్క విమానాశ్రయం కోడ్ ఏమిటి?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "select airports.airportcode from airports group by airports.airportcode having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అత్యధిక విమానాలు ఉన్న విమానాశ్రయం యొక్క విమానాశ్రయం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "తక్కువ సంఖ్యలో విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఏమిటి?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode from airports join flights on flights.destairport = airports.airportcode group by airports.airportcode having count ( flights.flightno ) < 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### తక్కువ సంఖ్యలో విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అతి తక్కువ విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఇవ్వండి.", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode from airports left join flights on flights.destairport = airports.airportcode group by airports.airportcode having count ( flights.flightno ) < 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అతి తక్కువ విమానాలు ఉన్న విమానాశ్రయం కోడ్ ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ ఎయిర్‌లైన్‌లో అత్యధిక విమానాలు ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select airlines.airline  , count ( flights.flightno ) as total_flights from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by total_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ ఎయిర్‌లైన్‌లో అత్యధిక విమానాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ విమానయాన సంస్థ అత్యధిక విమానాలను అందిస్తోంది?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select airlines.airline  , count ( flights.flightno ) as total_flights from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by total_flights desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ విమానయాన సంస్థ అత్యధిక విమానాలను అందిస్తోంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "తక్కువ సంఖ్యలో విమానాలను కలిగి ఉన్న విమానయాన సంస్థ యొక్క సంక్షిప్తీకరణ మరియు దేశాన్ని కనుగొనాలా?", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select airlines.airline  , airlines.abbreviation  , airlines.country from airlines order by airlines.uid asc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### తక్కువ సంఖ్యలో విమానాలను కలిగి ఉన్న విమానయాన సంస్థ యొక్క సంక్షిప్తీకరణ మరియు దేశాన్ని కనుగొనాలా? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "airilne యొక్క సంక్షిప్తీకరణ ఏది తక్కువ విమానాలు మరియు అది ఏ దేశంలో ఉంది?", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select airlines.abbreviation  , airlines.country from airlines where airlines.airline = 'airline' and airlines.country = 'country'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### airilne యొక్క సంక్షిప్తీకరణ ఏది తక్కువ విమానాలు మరియు అది ఏ దేశంలో ఉంది? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాశ్రయం &#39;AHD&#39; నుండి కొంత విమానాన్ని కలిగి ఉన్న విమానయాన సంస్థలు ఏమిటి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.destairport = airports.airportcode where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాశ్రయం &#39;AHD&#39; నుండి కొంత విమానాన్ని కలిగి ఉన్న విమానయాన సంస్థలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ ఎయిర్‌లైన్స్ సోర్స్ ఎయిర్‌పోర్ట్ AHDతో విమానాన్ని కలిగి ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ ఎయిర్‌లైన్స్ సోర్స్ ఎయిర్‌పోర్ట్ AHDతో విమానాన్ని కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఎయిర్‌పోర్ట్ &#39;AHD&#39;కి చేరుకునే విమానాలను కలిగి ఉన్న ఎయిర్‌లైన్స్ ఏమిటి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.airportcode = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌పోర్ట్ &#39;AHD&#39;కి చేరుకునే విమానాలను కలిగి ఉన్న ఎయిర్‌లైన్స్ ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "గమ్యస్థాన విమానాశ్రయం AHDతో ఏ ఎయిర్‌లైన్స్ విమానాలను కలిగి ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### గమ్యస్థాన విమానాశ్రయం AHDతో ఏ ఎయిర్‌లైన్స్ విమానాలను కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&#39;APG&#39; మరియు &#39;CVO&#39; రెండు విమానాశ్రయాల నుండి విమానాలను కలిగి ఉన్న అన్ని ఎయిర్‌లైన్‌లను కనుగొనండి.", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select airlines.airline from airlines join airports on airlines.abbreviation = airports.airportcode where airports.airportcode in ( 'APG'  , 'CVO' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &#39;APG&#39; మరియు &#39;CVO&#39; రెండు విమానాశ్రయాల నుండి విమానాలను కలిగి ఉన్న అన్ని ఎయిర్‌లైన్‌లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ ఎయిర్‌లైన్స్ APG మరియు CVO విమానాశ్రయాల నుండి బయలుదేరే విమానాలను కలిగి ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select airlines.airline  , airlines.abbreviation  , airports.airportname from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airports.airportcode in ( 'APG'  , 'CVO' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ ఎయిర్‌లైన్స్ APG మరియు CVO విమానాశ్రయాల నుండి బయలుదేరే విమానాలను కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాశ్రయం &#39;CVO&#39; నుండి విమానాలను కలిగి ఉన్న అన్ని ఎయిర్‌లైన్‌లను కనుగొనండి కానీ &#39;APG&#39; నుండి కాదు.", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.abbreviation join airports on flights.sourceairport = airports.airportcode where airports.city = 'CVO' and airports.countryabbrev  != 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాశ్రయం &#39;CVO&#39; నుండి విమానాలను కలిగి ఉన్న అన్ని ఎయిర్‌లైన్‌లను కనుగొనండి కానీ &#39;APG&#39; నుండి కాదు. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "APG విమానాశ్రయాల నుండి కాకుండా CVO నుండి బయలుదేరే విమానయాన సంస్థలు ఏవి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "select airlines.airline from airlines join flights on flights.airline = airlines.uid join airports on flights.sourceairport = airports.airportcode where airports.city = 'APG' and airports.countryabbrev <> 'CVO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### APG విమానాశ్రయాల నుండి కాకుండా CVO నుండి బయలుదేరే విమానయాన సంస్థలు ఏవి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "కనీసం 10 విమానాలు ఉన్న అన్ని విమానయాన సంస్థలను కనుగొనండి.", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airlines.airline from airlines limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### కనీసం 10 విమానాలు ఉన్న అన్ని విమానయాన సంస్థలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ ఎయిర్‌లైన్స్‌లో కనీసం 10 విమానాలు ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airline from airlines limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ ఎయిర్‌లైన్స్‌లో కనీసం 10 విమానాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "200 కంటే తక్కువ విమానాలు ఉన్న అన్ని విమానయాన సంస్థలను కనుగొనండి.", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airlines.airline  , airlines.abbreviation  , airlines.country from airlines join flights on flights.airline = airlines.uid group by airlines.airline  , airlines.abbreviation  , airlines.country having count ( distinct flights.flightno ) < 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### 200 కంటే తక్కువ విమానాలు ఉన్న అన్ని విమానయాన సంస్థలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ ఎయిర్‌లైన్స్ 200 కంటే తక్కువ విమానాలను కలిగి ఉన్నాయి?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airlines.airline from airlines limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ ఎయిర్‌లైన్స్ 200 కంటే తక్కువ విమానాలను కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఎయిర్‌లైన్ &quot;యునైటెడ్ ఎయిర్‌లైన్స్&quot; విమాన సంఖ్యలు ఏమిటి?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఎయిర్‌లైన్ &quot;యునైటెడ్ ఎయిర్‌లైన్స్&quot; విమాన సంఖ్యలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "యునైటెడ్ ఎయిర్‌లైన్స్ విమానాలకు ఏ విమాన నంబర్‌లు సరిపోతాయి?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### యునైటెడ్ ఎయిర్‌లైన్స్ విమానాలకు ఏ విమాన నంబర్‌లు సరిపోతాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "విమానాశ్రయం &quot;APG&quot; నుండి బయలుదేరే విమానాల సంఖ్యలు ఏమిటి?", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select count ( flights.flightno ) from flights join airports on flights.destairport = airports.airportcode where airports.countryabbrev = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### విమానాశ్రయం &quot;APG&quot; నుండి బయలుదేరే విమానాల సంఖ్యలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "APG నుండి బయలుదేరే విమానాల సంఖ్యలను ఇవ్వండి.", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select count ( flights.flightno ) from flights where flights.sourceairport = 'APG' or flights.destairport = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( APG ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### APG నుండి బయలుదేరే విమానాల సంఖ్యలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "&quot;APG&quot; విమానాశ్రయానికి చేరుకునే విమానాల విమాన సంఖ్యలు ఏమిటి?", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.airportname = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### &quot;APG&quot; విమానాశ్రయానికి చేరుకునే విమానాల విమాన సంఖ్యలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "APGలో ల్యాండింగ్ అయ్యే విమానాల సంఖ్యలను ఇవ్వండి.", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select count ( * ) from flights", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### APGలో ల్యాండింగ్ అయ్యే విమానాల సంఖ్యలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ &quot;అబెర్డీన్&quot; నుండి బయలుదేరే విమానాల సంఖ్యలు ఏమిటి?", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( flights.flightno ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'అబెర్డీన్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ &quot;అబెర్డీన్&quot; నుండి బయలుదేరే విమానాల సంఖ్యలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ నుండి బయలుదేరే విమానాల సంఖ్యలను ఇవ్వండి.", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( flights.flightno ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ నుండి బయలుదేరే విమానాల సంఖ్యలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "సిటీ &quot;అబెర్డీన్&quot;కి చేరుకునే విమానాల సంఖ్యలు ఏమిటి?", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( flights.flightno ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### సిటీ &quot;అబెర్డీన్&quot;కి చేరుకునే విమానాల సంఖ్యలు ఏమిటి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్‌కు చేరుకునే విమానాల సంఖ్యలను ఇవ్వండి.", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from flights where destairport = ( select airportcode from airports where city = 'Aberdeen' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్‌కు చేరుకునే విమానాల సంఖ్యలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ లేదా అబిలీన్ నగరంలో ల్యాండ్ అవుతున్న విమానాల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen' or city = 'Abilene'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ లేదా అబిలీన్ నగరంలో ల్యాండ్ అవుతున్న విమానాల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "అబెర్డీన్ లేదా అబిలీన్‌లో ఎన్ని విమానాలు దిగుతాయి?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airports where city = 'Aberdeen' or city = 'Abilene'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### అబెర్డీన్ లేదా అబిలీన్‌లో ఎన్ని విమానాలు దిగుతాయి? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "లోపలికి మరియు బయటికి ఎటువంటి విమానాలు లేని విమానాశ్రయాల పేరును కనుగొనండి.", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports left join flights on flights.destairport = airports.airportcode where flights.destairport is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### లోపలికి మరియు బయటికి ఎటువంటి విమానాలు లేని విమానాశ్రయాల పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ఏ విమానాశ్రయాలలో బయలుదేరే లేదా వచ్చే విమానాలు లేవు?", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports left join flights on flights.sourceairport = airports.airportcode where flights.sourceairport is null and flights.destairport is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ఏ విమానాశ్రయాలలో బయలుదేరే లేదా వచ్చే విమానాలు లేవు? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "employee_hire_evaluation", "question": "ఎంత మంది ఉద్యోగులు ఉన్నారు?", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఎంత మంది ఉద్యోగులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉద్యోగుల సంఖ్యను లెక్కించండి", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉద్యోగుల సంఖ్యను లెక్కించండి \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉద్యోగి పేర్లను వారి వయస్సు ప్రకారం ఆరోహణ క్రమంలో క్రమబద్ధీకరించండి.", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name  , employee.age from employee order by employee.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉద్యోగి పేర్లను వారి వయస్సు ప్రకారం ఆరోహణ క్రమంలో క్రమబద్ధీకరించండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉద్యోగుల పేర్లను జాబితా చేయండి మరియు వయస్సు ఆరోహణ క్రమంలో క్రమబద్ధీకరించండి.", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name  , employee.age from employee order by employee.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉద్యోగుల పేర్లను జాబితా చేయండి మరియు వయస్సు ఆరోహణ క్రమంలో క్రమబద్ధీకరించండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఒక్కో నగరం నుంచి ఉద్యోగుల సంఖ్య ఎంత?", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఒక్కో నగరం నుంచి ఉద్యోగుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ప్రతి నగరానికి ఉద్యోగుల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select shop.district  , count ( employee.employee_id ) as total_employees from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id group by shop.district", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ప్రతి నగరానికి ఉద్యోగుల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "30 ఏళ్లలోపు ఒకరి కంటే ఎక్కువ మంది ఉద్యోగులు ఏ నగరాల నుండి వచ్చారు?", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.city  , count ( employee.employee_id ) as num_employees from employee where employee.age >= 30 group by employee.city having count ( employee.employee_id ) > 1 order by num_employees desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 30 ఏళ్లలోపు ఒకరి కంటే ఎక్కువ మంది ఉద్యోగులు ఏ నగరాల నుండి వచ్చారు? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "30 ఏళ్లలోపు ఒకరి కంటే ఎక్కువ మంది ఉద్యోగులు ఉన్న నగరాలను కనుగొనండి.", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select city from employee group by city having count ( * ) > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 30 ఏళ్లలోపు ఒకరి కంటే ఎక్కువ మంది ఉద్యోగులు ఉన్న నగరాలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ప్రతి ప్రదేశంలో దుకాణాల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select count ( shop.shop_id ) from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ప్రతి ప్రదేశంలో దుకాణాల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఒక్కో ప్రదేశంలో ఎన్ని దుకాణాలు ఉన్నాయి?", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select count ( distinct shop.shop_id ) as total_shops from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఒక్కో ప్రదేశంలో ఎన్ని దుకాణాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "దుకాణం యొక్క మేనేజర్ పేరు మరియు జిల్లాను కనుగొనండి, దీని ఉత్పత్తుల సంఖ్య అతిపెద్దది.", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select shop.manager_name  , shop.district from shop where shop.number_products = ( select max ( shop.number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### దుకాణం యొక్క మేనేజర్ పేరు మరియు జిల్లాను కనుగొనండి, దీని ఉత్పత్తుల సంఖ్య అతిపెద్దది. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అత్యధిక సంఖ్యలో ఉత్పత్తులను విక్రయించే దుకాణం యొక్క మేనేజర్ పేరు మరియు జిల్లా ఏమిటి?", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select shop.manager_name  , shop.district from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అత్యధిక సంఖ్యలో ఉత్పత్తులను విక్రయించే దుకాణం యొక్క మేనేజర్ పేరు మరియు జిల్లా ఏమిటి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అన్ని స్టోర్‌ల ఉత్పత్తుల యొక్క కనిష్ట మరియు గరిష్ట సంఖ్యను కనుగొనండి.", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అన్ని స్టోర్‌ల ఉత్పత్తుల యొక్క కనిష్ట మరియు గరిష్ట సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అన్ని దుకాణాలలో కనిష్ట మరియు గరిష్ట సంఖ్యలో ఉత్పత్తుల సంఖ్య ఏమిటి?", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select min ( shop.number_products ) as min_number_products  , max ( shop.number_products ) as max_number_products from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అన్ని దుకాణాలలో కనిష్ట మరియు గరిష్ట సంఖ్యలో ఉత్పత్తుల సంఖ్య ఏమిటి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉత్పత్తుల సంఖ్య అవరోహణ క్రమంలో అన్ని దుకాణాల పేరు, స్థానం మరియు జిల్లాను తిరిగి ఇవ్వండి.", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select shop.name  , shop.location  , shop.district from shop order by shop.number_products desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉత్పత్తుల సంఖ్య అవరోహణ క్రమంలో అన్ని దుకాణాల పేరు, స్థానం మరియు జిల్లాను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అన్ని షాపులను సంఖ్య ఉత్పత్తుల ఆధారంగా అవరోహణ క్రమంలో క్రమబద్ధీకరించండి మరియు ప్రతి దుకాణం పేరు, స్థానం మరియు జిల్లాను తిరిగి ఇవ్వండి.", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select shop.name  , shop.location  , shop.district from shop order by shop.number_products desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అన్ని షాపులను సంఖ్య ఉత్పత్తుల ఆధారంగా అవరోహణ క్రమంలో క్రమబద్ధీకరించండి మరియు ప్రతి దుకాణం పేరు, స్థానం మరియు జిల్లాను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉత్పత్తుల సంఖ్య సగటు ఉత్పత్తుల సంఖ్య కంటే ఎక్కువగా ఉన్న స్టోర్‌ల పేర్లను కనుగొనండి.", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name from shop where shop.number_products > ( select count ( * ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉత్పత్తుల సంఖ్య సగటు ఉత్పత్తుల సంఖ్య కంటే ఎక్కువగా ఉన్న స్టోర్‌ల పేర్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఏ షాపుల సంఖ్య ఉత్పత్తులు సగటు కంటే ఎక్కువగా ఉన్నాయి? నాకు షాప్ పేర్లు ఇవ్వండి.", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name  , count ( shop.number_products ) as total_products from shop group by shop.name having total_products > ( select avg ( shop.number_products ) from shop )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఏ షాపుల సంఖ్య ఉత్పత్తులు సగటు కంటే ఎక్కువగా ఉన్నాయి? నాకు షాప్ పేర్లు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "మూల్యాంకనంలో అత్యధిక సార్లు అవార్డు పొందిన ఉద్యోగి పేరును కనుగొనండి.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.year_awarded desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### మూల్యాంకనంలో అత్యధిక సార్లు అవార్డు పొందిన ఉద్యోగి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "మూల్యాంకనాల్లో ఏ ఉద్యోగి అత్యధిక అవార్డులు అందుకున్నారు? నాకు ఉద్యోగి పేరు ఇవ్వండి.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.name having count ( evaluation.year_awarded ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### మూల్యాంకనాల్లో ఏ ఉద్యోగి అత్యధిక అవార్డులు అందుకున్నారు? నాకు ఉద్యోగి పేరు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అత్యధిక వన్ టైమ్ బోనస్ పొందిన ఉద్యోగి పేరును కనుగొనండి.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id where evaluation.bonus = ( select max ( bonus ) from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అత్యధిక వన్ టైమ్ బోనస్ పొందిన ఉద్యోగి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఏ ఉద్యోగి అత్యధిక బోనస్‌ని అందుకున్నారు? నాకు ఉద్యోగి పేరు ఇవ్వండి.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id where evaluation.bonus = ( select max ( bonus ) from evaluation )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఏ ఉద్యోగి అత్యధిక బోనస్‌ని అందుకున్నారు? నాకు ఉద్యోగి పేరు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "మూల్యాంకనంలో ఎప్పుడూ ఏ అవార్డును గెలుచుకోని ఉద్యోగుల పేర్లను కనుగొనండి.", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select evaluation.employee_id  , employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### మూల్యాంకనంలో ఎప్పుడూ ఏ అవార్డును గెలుచుకోని ఉద్యోగుల పేర్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఎన్నడూ మూల్యాంకనం పొందని ఉద్యోగుల పేర్లు ఏమిటి?", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఎన్నడూ మూల్యాంకనం పొందని ఉద్యోగుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అత్యధిక సంఖ్యలో ఉద్యోగులను నియమించుకుంటున్న దుకాణం పేరు ఏమిటి?", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop join hiring on hiring.shop_id = shop.shop_id group by shop.name having count ( hiring.employee_id ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అత్యధిక సంఖ్యలో ఉద్యోగులను నియమించుకుంటున్న దుకాణం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఏ దుకాణంలో ఎక్కువ మంది ఉద్యోగులు ఉన్నారు? నాకు షాప్ పేరు ఇవ్వండి.", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name  , count ( employee.employee_id ) as num_employees from shop join hiring on shop.shop_id = hiring.shop_id join employee on hiring.employee_id = employee.employee_id group by shop.name order by num_employees desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఏ దుకాణంలో ఎక్కువ మంది ఉద్యోగులు ఉన్నారు? నాకు షాప్ పేరు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఏ ఉద్యోగిని తీసుకోని దుకాణాల పేరును కనుగొనండి.", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select shop.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id where employee.name = 'ఉద్యోగి పేరు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఏ ఉద్యోగిని తీసుకోని దుకాణాల పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఉద్యోగులు లేకుండా నడిచే దుకాణాలు ఏవి? దుకాణం పేర్లను కనుగొనండి", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select shop.name from shop left join hiring on shop.shop_id = hiring.shop_id where hiring.employee_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఉద్యోగులు లేకుండా నడిచే దుకాణాలు ఏవి? దుకాణం పేర్లను కనుగొనండి \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ప్రతి దుకాణంలో నియమించబడిన ఉద్యోగుల సంఖ్యను కనుగొనండి; షాప్ పేరు కూడా చూపించండి.", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select shop.name  , count ( hiring.employee_id ) as total_employees from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ప్రతి దుకాణంలో నియమించబడిన ఉద్యోగుల సంఖ్యను కనుగొనండి; షాప్ పేరు కూడా చూపించండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ప్రతి దుకాణానికి, అక్కడ పనిచేస్తున్న ఉద్యోగుల సంఖ్య మరియు దుకాణం పేరును తిరిగి ఇవ్వండి.", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select shop.name  , count ( employee.employee_id ) as num_employees from shop join hiring on shop.shop_id = hiring.shop_id join employee on hiring.employee_id = employee.employee_id group by shop.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ప్రతి దుకాణానికి, అక్కడ పనిచేస్తున్న ఉద్యోగుల సంఖ్య మరియు దుకాణం పేరును తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అన్ని మూల్యాంకనాల్లో ఇచ్చిన మొత్తం బోనస్ ఎంత?", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select sum ( evaluation.bonus ) from evaluation", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అన్ని మూల్యాంకనాల్లో ఇచ్చిన మొత్తం బోనస్ ఎంత? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "అన్ని మూల్యాంకనాల్లో ఇచ్చిన మొత్తం బోనస్ మొత్తాన్ని కనుగొనండి.", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select sum ( evaluation.bonus ) from employee join evaluation on employee.employee_id = evaluation.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### అన్ని మూల్యాంకనాల్లో ఇచ్చిన మొత్తం బోనస్ మొత్తాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "నియామకానికి సంబంధించిన మొత్తం సమాచారాన్ని నాకు ఇవ్వండి.", "query": "select * from hiring", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city  , shop.shop_id  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id left join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### నియామకానికి సంబంధించిన మొత్తం సమాచారాన్ని నాకు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "నియామకం గురించి మొత్తం సమాచారం ఏమిటి?", "query": "select * from hiring", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### నియామకం గురించి మొత్తం సమాచారం ఏమిటి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఏ జిల్లాలో 3000 కంటే తక్కువ ఉత్పత్తులు మరియు 10000 కంటే ఎక్కువ ఉత్పత్తులతో దుకాణాలు ఉన్నాయి?", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select shop.name  , shop.location  , shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఏ జిల్లాలో 3000 కంటే తక్కువ ఉత్పత్తులు మరియు 10000 కంటే ఎక్కువ ఉత్పత్తులతో దుకాణాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "3000 కంటే తక్కువ ఉత్పత్తులను విక్రయించే దుకాణాలు మరియు 10000 కంటే ఎక్కువ ఉత్పత్తులను విక్రయించే దుకాణాలు ఉన్న జిల్లాలను కనుగొనండి.", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select shop.district from shop where shop.number_products < 3000 or shop.number_products > 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### 3000 కంటే తక్కువ ఉత్పత్తులను విక్రయించే దుకాణాలు మరియు 10000 కంటే ఎక్కువ ఉత్పత్తులను విక్రయించే దుకాణాలు ఉన్న జిల్లాలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ఎన్ని విభిన్న స్టోర్ స్థానాలు ఉన్నాయి?", "query": "select count ( distinct location ) from shop", "predicted_sql": "select distinct shop.location from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ఎన్ని విభిన్న స్టోర్ స్థానాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "విభిన్న స్టోర్ స్థానాల సంఖ్యను లెక్కించండి.", "query": "select count ( distinct location ) from shop", "predicted_sql": "select count ( distinct shop.location ) from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### విభిన్న స్టోర్ స్థానాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "మన దగ్గర ఎన్ని పత్రాలు ఉన్నాయి?", "query": "select count ( * ) from documents", "predicted_sql": "select count ( distinct documents.document_id ) as total_documents from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### మన దగ్గర ఎన్ని పత్రాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "పత్రాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from documents", "predicted_sql": "select count ( documents.document_id ) from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### పత్రాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని పత్రాల కోసం డాక్యుమెంట్ IDలు, డాక్యుమెంట్ పేర్లు మరియు డాక్యుమెంట్ వివరణలను జాబితా చేయండి.", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select documents.document_id  , documents.document_name  , documents.document_description from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని పత్రాల కోసం డాక్యుమెంట్ IDలు, డాక్యుమెంట్ పేర్లు మరియు డాక్యుమెంట్ వివరణలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని పత్రాల కోసం IDలు, పేర్లు మరియు వివరణలు ఏమిటి?", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select documents.document_id  , documents.document_name  , documents.document_description from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని పత్రాల కోసం IDలు, పేర్లు మరియు వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "డాక్యుమెంట్ పేరు మరియు టెంప్లేట్ ఐడిలో &#39;w&#39; అక్షరంతో వివరణతో కూడిన పత్రం ఏమిటి?", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select documents.document_name  , documents.document_description  , documents.other_details from documents join templates on documents.template_id = templates.template_id where documents.document_name like '%w%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### డాక్యుమెంట్ పేరు మరియు టెంప్లేట్ ఐడిలో &#39;w&#39; అక్షరంతో వివరణతో కూడిన పత్రం ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "వాటి వివరణలో w అక్షరాన్ని కలిగి ఉన్న పత్రాల పేర్లు మరియు టెంప్లేట్ IDలను తిరిగి ఇవ్వండి.", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select documents.document_name  , templates.template_id from documents join templates on documents.template_id = templates.template_id where documents.document_name like '%w%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### వాటి వివరణలో w అక్షరాన్ని కలిగి ఉన్న పత్రాల పేర్లు మరియు టెంప్లేట్ IDలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&quot;రాబిన్ CV&quot; పేరుతో ఉన్న డాక్యుమెంట్ ఐడి, టెంప్లేట్ ఐడి మరియు వివరణ ఏమిటి?", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "select documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'రాబిన్ CV'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &quot;రాబిన్ CV&quot; పేరుతో ఉన్న డాక్యుమెంట్ ఐడి, టెంప్లేట్ ఐడి మరియు వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "రాబిన్ CV పేరుతో డాక్యుమెంట్ ఐడి, టెంప్లేట్ ఐడి మరియు పత్రం యొక్క వివరణను తిరిగి ఇవ్వండి.", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) | templates : templates.template_id , templates.version_number , templates.template_type_code ( CV ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### రాబిన్ CV పేరుతో డాక్యుమెంట్ ఐడి, టెంప్లేట్ ఐడి మరియు పత్రం యొక్క వివరణను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని పత్రాలు ఎన్ని విభిన్న టెంప్లేట్‌లను ఉపయోగిస్తాయి?", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select count ( distinct templates.template_type_code ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని పత్రాలు ఎన్ని విభిన్న టెంప్లేట్‌లను ఉపయోగిస్తాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "పత్రాల కోసం ఉపయోగించే వివిధ టెంప్లేట్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select count ( distinct templates.template_id ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### పత్రాల కోసం ఉపయోగించే వివిధ టెంప్లేట్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;PPT&#39; టైప్ కోడ్‌తో టెంప్లేట్‌ని ఎన్ని డాక్యుమెంట్‌లు ఉపయోగిస్తున్నాయి?", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select count ( documents.document_id ) from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where ref_template_types.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;PPT&#39; టైప్ కోడ్‌తో టెంప్లేట్‌ని ఎన్ని డాక్యుమెంట్‌లు ఉపయోగిస్తున్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PPT టెంప్లేట్ రకాన్ని ఉపయోగించే పత్రాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select count ( documents.document_id ) from templates join documents on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PPT టెంప్లేట్ రకాన్ని ఉపయోగించే పత్రాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి టెంప్లేట్‌ని ఉపయోగించి అన్ని టెంప్లేట్ ఐడిలు మరియు పత్రాల సంఖ్యను చూపండి.", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి టెంప్లేట్‌ని ఉపయోగించి అన్ని టెంప్లేట్ ఐడిలు మరియు పత్రాల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "డాక్యుమెంట్‌ల కోసం ఉపయోగించే అన్ని విభిన్న టెంప్లేట్ ఐడిలు ఏమిటి మరియు వాటిలో ప్రతి ఒక్కటి ఎన్ని సార్లు ఉపయోగించబడ్డాయి?", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select templates.template_id  , count ( * ) as usage_count from templates group by templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### డాక్యుమెంట్‌ల కోసం ఉపయోగించే అన్ని విభిన్న టెంప్లేట్ ఐడిలు ఏమిటి మరియు వాటిలో ప్రతి ఒక్కటి ఎన్ని సార్లు ఉపయోగించబడ్డాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "చాలా పత్రాలు ఉపయోగించే టెంప్లేట్ కోసం ఐడి మరియు టైప్ కోడ్ ఏమిటి?", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_id  , templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### చాలా పత్రాలు ఉపయోగించే టెంప్లేట్ కోసం ఐడి మరియు టైప్ కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అత్యధిక సంఖ్యలో డాక్యుమెంట్‌ల కోసం ఉపయోగించిన టెంప్లేట్ యొక్క ఐడి మరియు టైప్ కోడ్‌ను తిరిగి ఇవ్వండి.", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_id  , templates.template_type_code from templates join documents on documents.template_id = templates.template_id group by templates.template_id  , templates.template_type_code having count ( documents.document_id ) > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అత్యధిక సంఖ్యలో డాక్యుమెంట్‌ల కోసం ఉపయోగించిన టెంప్లేట్ యొక్క ఐడి మరియు టైప్ కోడ్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఒకటి కంటే ఎక్కువ పత్రాలు ఉపయోగించే అన్ని టెంప్లేట్‌ల కోసం idలను చూపండి.", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select templates.template_id from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఒకటి కంటే ఎక్కువ పత్రాలు ఉపయోగించే అన్ని టెంప్లేట్‌ల కోసం idలను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఒకే డాక్యుమెంట్ కంటే ఎక్కువ ఉపయోగించిన టెంప్లేట్‌ల టెంప్లేట్ ఐడిలు ఏమిటి?", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select templates.template_id from templates group by templates.template_id having count ( templates.template_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఒకే డాక్యుమెంట్ కంటే ఎక్కువ ఉపయోగించిన టెంప్లేట్‌ల టెంప్లేట్ ఐడిలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ పత్రం ఉపయోగించని అన్ని టెంప్లేట్‌ల కోసం idలను చూపు.", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select templates.template_id from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ పత్రం ఉపయోగించని అన్ని టెంప్లేట్‌ల కోసం idలను చూపు. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ పత్రాల్లోనూ ఉపయోగించని టెంప్లేట్‌ల ఐడీలు ఏమిటి?", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select templates.template_id from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ పత్రాల్లోనూ ఉపయోగించని టెంప్లేట్‌ల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "మన దగ్గర ఎన్ని టెంప్లేట్లు ఉన్నాయి?", "query": "select count ( * ) from templates", "predicted_sql": "select count ( distinct templates.template_id ) as total_templates from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### మన దగ్గర ఎన్ని టెంప్లేట్లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from templates", "predicted_sql": "select count ( templates.template_id ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని టెంప్లేట్‌ల కోసం టెంప్లేట్ ఐడిలు, వెర్షన్ నంబర్‌లు మరియు టెంప్లేట్ రకం కోడ్‌లను చూపండి.", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని టెంప్లేట్‌ల కోసం టెంప్లేట్ ఐడిలు, వెర్షన్ నంబర్‌లు మరియు టెంప్లేట్ రకం కోడ్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి టెంప్లేట్ కోసం idలు, సంస్కరణ సంఖ్యలు మరియు టైప్ కోడ్‌లు ఏమిటి?", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి టెంప్లేట్ కోసం idలు, సంస్కరణ సంఖ్యలు మరియు టైప్ కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని టెంప్లేట్‌ల కోసం అన్ని విభిన్న టెంప్లేట్ రకం కోడ్‌లను చూపండి.", "query": "select distinct template_type_code from templates", "predicted_sql": "select templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని టెంప్లేట్‌ల కోసం అన్ని విభిన్న టెంప్లేట్ రకం కోడ్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి?", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం కోడ్ PP లేదా PPTతో టెంప్లేట్‌ల IDలు ఏమిటి?", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం కోడ్ PP లేదా PPTతో టెంప్లేట్‌ల IDలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "PP లేదా PPT కోడ్ ఉన్న టెంప్లేట్‌ల idలను తిరిగి ఇవ్వండి.", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP , PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### PP లేదా PPT కోడ్ ఉన్న టెంప్లేట్‌ల idలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఎన్ని టెంప్లేట్‌లు టెంప్లేట్ రకం కోడ్ CVని కలిగి ఉన్నాయి?", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select count ( distinct templates.template_id ) from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'CV'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఎన్ని టెంప్లేట్‌లు టెంప్లేట్ రకం కోడ్ CVని కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "CV రకం టెంప్లేట్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select count ( distinct templates.template_id ) as template_count from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) | templates : templates.template_id , templates.version_number , templates.template_type_code ( CV ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### CV రకం టెంప్లేట్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "5 తర్వాత వెర్షన్ నంబర్ ఉన్న టెంప్లేట్ కోసం వెర్షన్ నంబర్ మరియు టెంప్లేట్ రకం కోడ్ ఏమిటి?", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select templates.version_number  , templates.template_type_code from templates where templates.template_id = 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 5 తర్వాత వెర్షన్ నంబర్ ఉన్న టెంప్లేట్ కోసం వెర్షన్ నంబర్ మరియు టెంప్లేట్ రకం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "సంస్కరణ సంఖ్య 5 కంటే ఎక్కువ ఉన్న టెంప్లేట్‌ల సంస్కరణ సంఖ్యలు మరియు టెంప్లేట్ రకం కోడ్‌లను తిరిగి ఇవ్వండి.", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code from templates where templates.version_number > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### సంస్కరణ సంఖ్య 5 కంటే ఎక్కువ ఉన్న టెంప్లేట్‌ల సంస్కరణ సంఖ్యలు మరియు టెంప్లేట్ రకం కోడ్‌లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి టెంప్లేట్ రకం కోడ్‌లు మరియు టెంప్లేట్‌ల సంఖ్యను చూపండి.", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select templates.template_type_code  , count ( templates.template_id ) as template_count from templates group by templates.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి టెంప్లేట్ రకం కోడ్‌లు మరియు టెంప్లేట్‌ల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి మరియు ఒక్కోదానికి ఎన్ని టెంప్లేట్‌లు సరిపోతాయి?", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( templates.template_id ) as total_templates from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి మరియు ఒక్కోదానికి ఎన్ని టెంప్లేట్‌లు సరిపోతాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ టెంప్లేట్ రకం కోడ్‌లో అత్యధిక సంఖ్యలో టెంప్లేట్‌లు ఉన్నాయి?", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code  , count ( templates.template_id ) as template_count from templates group by templates.template_type_code having count ( templates.template_id ) > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ టెంప్లేట్ రకం కోడ్‌లో అత్యధిక సంఖ్యలో టెంప్లేట్‌లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అత్యధిక టెంప్లేట్‌లు ఉన్న టెంప్లేట్ రకం యొక్క టైప్ కోడ్‌ను తిరిగి ఇవ్వండి.", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code from templates group by templates.template_type_code having count ( * ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అత్యధిక టెంప్లేట్‌లు ఉన్న టెంప్లేట్ రకం యొక్క టైప్ కోడ్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "మూడు టెంప్లేట్‌ల కంటే తక్కువ ఉన్న అన్ని టెంప్లేట్ రకం కోడ్‌లను చూపండి.", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select templates.template_type_code from templates group by templates.template_type_code having count ( * ) < 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### మూడు టెంప్లేట్‌ల కంటే తక్కువ ఉన్న అన్ని టెంప్లేట్ రకం కోడ్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "3 కంటే తక్కువ టెంప్లేట్‌లను కలిగి ఉన్న టెంప్లేట్ రకాల కోడ్‌లు ఏమిటి?", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select templates.template_type_code from templates group by templates.template_type_code having count ( * ) < 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 3 కంటే తక్కువ టెంప్లేట్‌లను కలిగి ఉన్న టెంప్లేట్ రకాల కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అతిచిన్న సంస్కరణ సంఖ్య మరియు దాని టెంప్లేట్ రకం కోడ్ ఏమిటి?", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select templates.version_number  , templates.template_type_code from templates order by templates.version_number desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అతిచిన్న సంస్కరణ సంఖ్య మరియు దాని టెంప్లేట్ రకం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "దాని సంబంధిత టెంప్లేట్ రకం కోడ్‌తో పాటు అత్యల్ప సంస్కరణ సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### దాని సంబంధిత టెంప్లేట్ రకం కోడ్‌తో పాటు అత్యల్ప సంస్కరణ సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&quot;డేటా బేస్&quot; పేరుతో పత్రం ఉపయోగించే టెంప్లేట్ యొక్క టెంప్లేట్ రకం కోడ్ ఏమిటి?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select ref_template_types.template_type_code from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where documents.document_name = 'డేటా బేస్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &quot;డేటా బేస్&quot; పేరుతో పత్రం ఉపయోగించే టెంప్లేట్ యొక్క టెంప్లేట్ రకం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "డేటా బేస్ అనే పత్రం ఉపయోగించే టెంప్లేట్ యొక్క టెంప్లేట్ రకం కోడ్‌ను తిరిగి ఇవ్వండి.", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select templates.template_type_code from templates join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### డేటా బేస్ అనే పత్రం ఉపయోగించే టెంప్లేట్ యొక్క టెంప్లేట్ రకం కోడ్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం కోడ్ BKతో టెంప్లేట్‌లను ఉపయోగించి అన్ని డాక్యుమెంట్ పేర్లను చూపండి.", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select documents.document_name from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where ref_template_types.template_type_code = 'BK'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం కోడ్ BKతో టెంప్లేట్‌లను ఉపయోగించి అన్ని డాక్యుమెంట్ పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "BK కోడ్‌తో టెంప్లేట్‌లను ఉపయోగించే పత్రాల పేర్లు ఏమిటి?", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select documents.document_name from templates join documents on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_code = 'BK'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### BK కోడ్‌తో టెంప్లేట్‌లను ఉపయోగించే పత్రాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని టెంప్లేట్ రకం కోడ్‌లను మరియు ప్రతి రకాన్ని ఉపయోగించి పత్రాల సంఖ్యను చూపండి.", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select templates.template_type_code  , count ( documents.document_id ) as document_count from templates join documents on documents.template_id = templates.template_id group by templates.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని టెంప్లేట్ రకం కోడ్‌లను మరియు ప్రతి రకాన్ని ఉపయోగించి పత్రాల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి మరియు ప్రతి రకాన్ని ఎన్ని పత్రాలు ఉపయోగిస్తాయి?", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( distinct documents.document_id ) as total_documents from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### విభిన్న టెంప్లేట్ రకం కోడ్‌లు ఏమిటి మరియు ప్రతి రకాన్ని ఎన్ని పత్రాలు ఉపయోగిస్తాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ టెంప్లేట్ రకం కోడ్‌ని అత్యధిక సంఖ్యలో డాక్యుమెంట్‌లు ఉపయోగిస్తాయి?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code  , count ( documents.document_id ) as document_count from templates join documents on documents.template_id = templates.template_id group by templates.template_type_code order by document_count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ టెంప్లేట్ రకం కోడ్‌ని అత్యధిక సంఖ్యలో డాక్యుమెంట్‌లు ఉపయోగిస్తాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "డాక్యుమెంట్‌లలో సాధారణంగా ఉపయోగించే టెంప్లేట్ రకం కోడ్‌ని తిరిగి ఇవ్వండి.", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select templates.template_type_code from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### డాక్యుమెంట్‌లలో సాధారణంగా ఉపయోగించే టెంప్లేట్ రకం కోడ్‌ని తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ పత్రం ఉపయోగించని అన్ని టెంప్లేట్ రకం కోడ్‌లను చూపుతుంది.", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select templates.template_type_code from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ పత్రం ఉపయోగించని అన్ని టెంప్లేట్ రకం కోడ్‌లను చూపుతుంది. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ డాక్యుమెంట్ కోసం ఉపయోగించని టెంప్లేట్ రకాల కోడ్‌లు ఏమిటి?", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select templates.template_type_code from templates join documents on documents.template_id = templates.template_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ డాక్యుమెంట్ కోసం ఉపయోగించని టెంప్లేట్ రకాల కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని టెంప్లేట్ రకం కోడ్‌లు మరియు వివరణలను చూపించు.", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని టెంప్లేట్ రకం కోడ్‌లు మరియు వివరణలను చూపించు. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అన్ని టెంప్లేట్ రకాలకు టైప్ కోడ్‌లు మరియు వివరణలు ఏమిటి?", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అన్ని టెంప్లేట్ రకాలకు టైప్ కోడ్‌లు మరియు వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం కోడ్ &quot;AD&quot; కోసం టెంప్లేట్ రకం వివరణలు ఏమిటి.", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం కోడ్ &quot;AD&quot; కోసం టెంప్లేట్ రకం వివరణలు ఏమిటి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "AD కోడ్‌తో టెంప్లేట్ రకం యొక్క టెంప్లేట్ రకం వివరణను తిరిగి ఇవ్వండి.", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( AD ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( AD ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### AD కోడ్‌తో టెంప్లేట్ రకం యొక్క టెంప్లేట్ రకం వివరణను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం వివరణ &quot;బుక్&quot; కోసం టెంప్లేట్ రకం కోడ్ ఏమిటి.", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'బుక్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం వివరణ &quot;బుక్&quot; కోసం టెంప్లేట్ రకం కోడ్ ఏమిటి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం యొక్క టైప్ కోడ్‌ను వివరణ &quot;బుక్&quot;తో తిరిగి ఇవ్వండి.", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'బుక్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం యొక్క టైప్ కోడ్‌ను వివరణ &quot;బుక్&quot;తో తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఏ పత్రం ద్వారా అయినా ఉపయోగించిన టెంప్లేట్‌ల కోసం ప్రత్యేకమైన టెంప్లేట్ రకం వివరణలు ఏమిటి?", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details from templates join documents on documents.template_id = templates.template_id where documents.document_id = [document_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఏ పత్రం ద్వారా అయినా ఉపయోగించిన టెంప్లేట్‌ల కోసం ప్రత్యేకమైన టెంప్లేట్ రకం వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "డాక్యుమెంట్‌లో ఉపయోగించిన టెంప్లేట్‌ల కోసం విభిన్న వివరణలను తిరిగి ఇవ్వండి.", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details from templates join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### డాక్యుమెంట్‌లో ఉపయోగించిన టెంప్లేట్‌ల కోసం విభిన్న వివరణలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "టెంప్లేట్ రకం వివరణ &quot;ప్రెజెంటేషన్&quot;తో టెంప్లేట్ ఐడిలు ఏమిటి.", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'ప్రెజెంటేషన్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### టెంప్లేట్ రకం వివరణ &quot;ప్రెజెంటేషన్&quot;తో టెంప్లేట్ ఐడిలు ఏమిటి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;ప్రెజెంటేషన్&#39; వివరణతో టెంప్లేట్‌లకు సంబంధించిన idలను తిరిగి ఇవ్వండి.", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'ప్రెజెంటేషన్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;ప్రెజెంటేషన్&#39; వివరణతో టెంప్లేట్‌లకు సంబంధించిన idలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "మొత్తం ఎన్ని పేరాలు?", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( * ) from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### మొత్తం ఎన్ని పేరాలు? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "పేరాగ్రాఫ్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( paragraph_id ) from paragraphs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### పేరాగ్రాఫ్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;సమ్మర్ షో&#39; పేరుతో పత్రం కోసం ఎన్ని పేరాలు ఉన్నాయి?", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select count ( distinct documents.document_name ) from templates join documents on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'సమ్మర్ షో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;సమ్మర్ షో&#39; పేరుతో పత్రం కోసం ఎన్ని పేరాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;సమ్మర్ షో&#39; పేరుతో ఉన్న డాక్యుమెంట్‌లోని పేరాగ్రాఫ్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select count ( paragraphs.paragraph_id ) from documents join templates on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where documents.document_name = 'సమ్మర్ షో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;సమ్మర్ షో&#39; పేరుతో ఉన్న డాక్యుమెంట్‌లోని పేరాగ్రాఫ్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;కొరియా&#39; వచనంతో పేరా కోసం పేరా వివరాలను చూపండి.", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id and ref_template_types.template_type_description = 'కొరియా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;కొరియా&#39; వచనంతో పేరా కోసం పేరా వివరాలను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;కొరియా&#39; వచనాన్ని కలిగి ఉన్న పేరాకు సంబంధించిన వివరాలు ఏమిటి?", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where ref_template_types.template_type_description = 'కొరియా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;కొరియా&#39; వచనాన్ని కలిగి ఉన్న పేరాకు సంబంధించిన వివరాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;వెల్కమ్ టు NY&#39; పేరుతో పత్రం కోసం అన్ని పేరాగ్రాఫ్ ఐడిలు మరియు టెక్స్ట్‌లను చూపండి.", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select paragraphs.paragraph_id  , paragraphs.paragraph_text from templates join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where templates.template_type_code = ( select template_type_code from ref_template_types where template_type_description = 'వెల్కమ్ టు NY' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;వెల్కమ్ టు NY&#39; పేరుతో పత్రం కోసం అన్ని పేరాగ్రాఫ్ ఐడిలు మరియు టెక్స్ట్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;వెల్‌కమ్ టు NY&#39; అనే పత్రంలో పేరాగ్రాఫ్‌ల ఐడిలు మరియు వచనాలు ఏమిటి?", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select paragraphs.paragraph_id  , paragraphs.paragraph_text from documents join templates on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where documents.document_name = 'వెల్‌కమ్ టు NY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;వెల్‌కమ్ టు NY&#39; అనే పత్రంలో పేరాగ్రాఫ్‌ల ఐడిలు మరియు వచనాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&quot;కస్టమర్ సమీక్షలు&quot; పత్రం కోసం అన్ని పేరా టెక్స్ట్‌లను చూపించు.", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'కస్టమర్ సమీక్షలు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &quot;కస్టమర్ సమీక్షలు&quot; పత్రం కోసం అన్ని పేరా టెక్స్ట్‌లను చూపించు. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;కస్టమర్ రివ్యూలు&#39; పేరుతో డాక్యుమెంట్‌కి సంబంధించిన పేరా టెక్స్ట్‌లు ఏమిటి?", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'కస్టమర్ రివ్యూలు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;కస్టమర్ రివ్యూలు&#39; పేరుతో డాక్యుమెంట్‌కి సంబంధించిన పేరా టెక్స్ట్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి డాక్యుమెంట్‌లోని అన్ని డాక్యుమెంట్ ఐడిలు మరియు పేరాగ్రాఫ్‌ల సంఖ్యను చూపండి. డాక్యుమెంట్ ఐడి ద్వారా ఆర్డర్ చేయండి.", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select documents.document_id  , count ( paragraphs.paragraph_id ) as paragraph_count from documents join paragraphs on paragraphs.document_id = documents.document_id group by documents.document_id order by documents.document_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి డాక్యుమెంట్‌లోని అన్ని డాక్యుమెంట్ ఐడిలు మరియు పేరాగ్రాఫ్‌ల సంఖ్యను చూపండి. డాక్యుమెంట్ ఐడి ద్వారా ఆర్డర్ చేయండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఐడి ద్వారా ఆర్డర్ చేయబడిన ప్రతి పేరాగ్రాఫ్‌ల సంఖ్యతో పాటు విభిన్న డాక్యుమెంట్ ఐడిలను తిరిగి ఇవ్వండి.", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select paragraphs.paragraph_id  , documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id order by paragraphs.paragraph_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఐడి ద్వారా ఆర్డర్ చేయబడిన ప్రతి పేరాగ్రాఫ్‌ల సంఖ్యతో పాటు విభిన్న డాక్యుమెంట్ ఐడిలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి డాక్యుమెంట్‌లోని అన్ని డాక్యుమెంట్ ఐడిలు, పేర్లు మరియు పేరాగ్రాఫ్‌ల సంఖ్యను చూపండి.", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select documents.document_id  , documents.document_name  , count ( paragraphs.paragraph_id ) as paragraph_count from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id  , documents.document_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి డాక్యుమెంట్‌లోని అన్ని డాక్యుమెంట్ ఐడిలు, పేర్లు మరియు పేరాగ్రాఫ్‌ల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ప్రతి పత్రం యొక్క IDలు మరియు పేర్లు, అలాగే ప్రతి పేరాగ్రాఫ్‌ల సంఖ్య ఏమిటి?", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select documents.document_id  , documents.document_name  , paragraphs.paragraph_id  , count ( paragraphs.paragraph_id ) as paragraph_count from documents join paragraphs on paragraphs.document_id = documents.document_id group by documents.document_id  , documents.document_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ప్రతి పత్రం యొక్క IDలు మరియు పేర్లు, అలాగే ప్రతి పేరాగ్రాఫ్‌ల సంఖ్య ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "కనీసం రెండు పేరాగ్రాఫ్‌లతో అన్ని డాక్యుమెంట్ ఐడిలను జాబితా చేయండి.", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select documents.document_id  , paragraphs.paragraph_id from documents join paragraphs on documents.document_id = paragraphs.document_id limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### కనీసం రెండు పేరాగ్రాఫ్‌లతో అన్ని డాక్యుమెంట్ ఐడిలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "2 లేదా అంతకంటే ఎక్కువ పేరాగ్రాఫ్‌లను కలిగి ఉన్న పత్రాల IDలు ఏమిటి?", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id group by documents.document_id having count ( paragraphs.paragraph_id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 2 లేదా అంతకంటే ఎక్కువ పేరాగ్రాఫ్‌లను కలిగి ఉన్న పత్రాల IDలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అత్యధిక సంఖ్యలో పేరాగ్రాఫ్‌లు ఉన్న డాక్యుమెంట్ ఐడి మరియు పేరు ఏమిటి?", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అత్యధిక సంఖ్యలో పేరాగ్రాఫ్‌లు ఉన్న డాక్యుమెంట్ ఐడి మరియు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "చాలా పేరాలతో పత్రం యొక్క ఐడి మరియు పేరును తిరిగి ఇవ్వండి.", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select documents.document_id  , documents.document_name from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### చాలా పేరాలతో పత్రం యొక్క ఐడి మరియు పేరును తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "కనీసం పేరాగ్రాఫ్‌లు ఉన్న డాక్యుమెంట్ ఐడి ఏది?", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### కనీసం పేరాగ్రాఫ్‌లు ఉన్న డాక్యుమెంట్ ఐడి ఏది? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "అతి తక్కువ పేరాలతో పత్రం యొక్క ఐడిని తిరిగి ఇవ్వండి.", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select documents.document_id from documents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### అతి తక్కువ పేరాలతో పత్రం యొక్క ఐడిని తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "1 నుండి 2 పేరాలతో డాక్యుమెంట్ ఐడి అంటే ఏమిటి?", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select documents.document_id from documents where documents.document_name = '1' or documents.document_name = '2'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 1 నుండి 2 పేరాలతో డాక్యుమెంట్ ఐడి అంటే ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ఒకటి మరియు రెండు పేరాగ్రాఫ్‌ల మధ్య ఉన్న పత్రాల IDలను ఇవ్వండి.", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select documents.document_id  , paragraphs.paragraph_id from documents join paragraphs on documents.document_id = paragraphs.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ఒకటి మరియు రెండు పేరాగ్రాఫ్‌ల మధ్య ఉన్న పత్రాల IDలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "పేరా టెక్స్ట్ &#39;బ్రెజిల్&#39; మరియు &#39;ఐర్లాండ్&#39;తో డాక్యుమెంట్ ఐడిని చూపండి.", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select documents.document_id from documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'బ్రెజిల్' or ref_template_types.template_type_description = 'ఐర్లాండ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### పేరా టెక్స్ట్ &#39;బ్రెజిల్&#39; మరియు &#39;ఐర్లాండ్&#39;తో డాక్యుమెంట్ ఐడిని చూపండి. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;బ్రెజిల్&#39; మరియు &#39;ఐర్లాండ్&#39; అనే పేరాగ్రాఫ్ టెక్స్ట్‌ని కలిగి ఉన్న డాక్యుమెంట్‌ల ఐడీలు ఏమిటి?", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id where paragraphs.paragraph_text like '%బ్రెజిల్%' or paragraphs.paragraph_text like '%ఐర్లాండ్%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;బ్రెజిల్&#39; మరియు &#39;ఐర్లాండ్&#39; అనే పేరాగ్రాఫ్ టెక్స్ట్‌ని కలిగి ఉన్న డాక్యుమెంట్‌ల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయులు ఎంత మంది ఉన్నారు?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( teacher.teacher_id ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయులు ఎంత మంది ఉన్నారు? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "మొత్తం ఉపాధ్యాయుల సంఖ్య ఎంత?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( teacher.teacher_id ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### మొత్తం ఉపాధ్యాయుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "వయస్సు ఆరోహణ క్రమంలో ఉపాధ్యాయుల పేర్లను జాబితా చేయండి.", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher order by teacher.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### వయస్సు ఆరోహణ క్రమంలో ఉపాధ్యాయుల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఆరోహణ వయస్సు ప్రకారం ఉపాధ్యాయుల పేర్లు ఏమిటి?", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher where teacher.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఆరోహణ వయస్సు ప్రకారం ఉపాధ్యాయుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల వయస్సు మరియు స్వస్థలం ఏమిటి?", "query": "select age , hometown from teacher", "predicted_sql": "select teacher.age  , teacher.hometown from teacher  , course_arrange where teacher.teacher_id = course_arrange.teacher_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల వయస్సు మరియు స్వస్థలం ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ప్రతి ఉపాధ్యాయుని వయస్సు మరియు స్వస్థలం ఏమిటి?", "query": "select age , hometown from teacher", "predicted_sql": "select teacher.age  , teacher.hometown from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ప్రతి ఉపాధ్యాయుని వయస్సు మరియు స్వస్థలం ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "స్వస్థలం `` లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్ &#39;&#39; కాని ఉపాధ్యాయుల పేరును జాబితా చేయండి.", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.hometown = 'స్వస్థలం లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### స్వస్థలం `` లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్ &#39;&#39; కాని ఉపాధ్యాయుల పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "స్వస్థలం `` లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్ &#39;&#39; కాని ఉపాధ్యాయుల పేర్లు ఏమిటి ?", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.hometown = 'స్వస్థలం లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### స్వస్థలం `` లిటిల్ లివర్ అర్బన్ డిస్ట్రిక్ట్ &#39;&#39; కాని ఉపాధ్యాయుల పేర్లు ఏమిటి ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "32 లేదా 33 సంవత్సరాల వయస్సు గల ఉపాధ్యాయుల పేరును చూపించాలా?", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 32 లేదా 33 సంవత్సరాల వయస్సు గల ఉపాధ్యాయుల పేరును చూపించాలా? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "32 లేదా 33 సంవత్సరాల వయస్సు గల ఉపాధ్యాయుల పేర్లు ఏమిటి?", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### 32 లేదా 33 సంవత్సరాల వయస్సు గల ఉపాధ్యాయుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "చిన్న ఉపాధ్యాయుడి స్వస్థలం ఏది?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.hometown from teacher where teacher.age < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### చిన్న ఉపాధ్యాయుడి స్వస్థలం ఏది? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "చిన్న ఉపాధ్యాయుడు ఎక్కడ నుండి వచ్చాడు?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.name from teacher where teacher.age < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### చిన్న ఉపాధ్యాయుడు ఎక్కడ నుండి వచ్చాడు? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల వేర్వేరు స్వస్థలం మరియు ప్రతి ఊరి నుండి ఉపాధ్యాయుల సంఖ్యను చూపండి.", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select teacher.hometown  , count ( distinct teacher.teacher_id ) as teacher_count from teacher group by teacher.hometown", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల వేర్వేరు స్వస్థలం మరియు ప్రతి ఊరి నుండి ఉపాధ్యాయుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఒక్కో ఊరికి టీచర్లు ఎంత మంది?", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select count ( teacher.teacher_id ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఒక్కో ఊరికి టీచర్లు ఎంత మంది? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల అత్యంత సాధారణ స్వస్థలాన్ని జాబితా చేయండి.", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "select teacher.name  , teacher.age  , teacher.hometown from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల అత్యంత సాధారణ స్వస్థలాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయులకు అత్యంత సాధారణ స్వస్థలాలు ఏమిటి?", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "select teacher.name  , teacher.age  , teacher.hometown from teacher where teacher.age > 40", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయులకు అత్యంత సాధారణ స్వస్థలాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కనీసం ఇద్దరు ఉపాధ్యాయులు పంచుకున్న స్వస్థలాలను చూపండి.", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select teacher.name  , teacher.age  , teacher.hometown from teacher where teacher.age >= 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కనీసం ఇద్దరు ఉపాధ్యాయులు పంచుకున్న స్వస్థలాలను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కనీసం ఇద్దరు ఉపాధ్యాయులు ఏ పట్టణాల నుండి వచ్చారు?", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select teacher.hometown from teacher where teacher.teacher_id in ( select course_arrange.teacher_id from course_arrange )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కనీసం ఇద్దరు ఉపాధ్యాయులు ఏ పట్టణాల నుండి వచ్చారు? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల పేర్లు మరియు వారు బోధించడానికి ఏర్పాటు చేసిన కోర్సులను చూపండి.", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల పేర్లు మరియు వారు బోధించడానికి ఏర్పాటు చేసిన కోర్సులను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ప్రతి ఉపాధ్యాయుని పేరు ఏమిటి మరియు వారు ఏ కోర్సు బోధిస్తారు?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ప్రతి ఉపాధ్యాయుని పేరు ఏమిటి మరియు వారు ఏ కోర్సు బోధిస్తారు? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల పేర్లను మరియు ఉపాధ్యాయుని పేరు యొక్క ఆరోహణ అక్షర క్రమంలో వారు బోధించడానికి ఏర్పాటు చేసిన కోర్సులను చూపండి.", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల పేర్లను మరియు ఉపాధ్యాయుని పేరు యొక్క ఆరోహణ అక్షర క్రమంలో వారు బోధించడానికి ఏర్పాటు చేసిన కోర్సులను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల పేర్లు మరియు వారు ఉపాధ్యాయుని పేరుతో అక్షర క్రమంలో ఆరోహణలో బోధించే కోర్సులు ఏమిటి?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select course.course from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల పేర్లు మరియు వారు ఉపాధ్యాయుని పేరుతో అక్షర క్రమంలో ఆరోహణలో బోధించే కోర్సులు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "గణిత కోర్సు కోసం ఉపాధ్యాయుని పేరును చూపండి.", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id where course.course = 'గణిత కోర్సు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### గణిత కోర్సు కోసం ఉపాధ్యాయుని పేరును చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "గణిత కోర్సులను బోధించే వ్యక్తుల పేర్లు ఏమిటి?", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id where course.course = 'గణిత'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### గణిత కోర్సులను బోధించే వ్యక్తుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల పేర్లు మరియు వారు బోధించే కోర్సుల సంఖ్యను చూపండి.", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course_arrange.course_id ) as course_count from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల పేర్లు మరియు వారు బోధించే కోర్సుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ఉపాధ్యాయుల పేర్లు ఏమిటి మరియు వారు ఎన్ని కోర్సులు బోధిస్తారు?", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course_arrange.course_id ) as num_courses from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ఉపాధ్యాయుల పేర్లు ఏమిటి మరియు వారు ఎన్ని కోర్సులు బోధిస్తారు? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కనీసం రెండు కోర్సులను బోధించే ఉపాధ్యాయుల పేర్లను చూపండి.", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id group by teacher.name having count ( distinct course.course_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కనీసం రెండు కోర్సులను బోధించే ఉపాధ్యాయుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కనీసం రెండు కోర్సులు బోధించే ఉపాధ్యాయుల పేర్లు ఏమిటి?", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id group by teacher.name having count ( distinct course.course_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కనీసం రెండు కోర్సులు బోధించే ఉపాధ్యాయుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కోర్సులు బోధించడానికి ఏర్పాటు చేయని ఉపాధ్యాయుల పేర్లను జాబితా చేయండి.", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher left join course_arrange on teacher.teacher_id = course_arrange.teacher_id where course_arrange.course_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కోర్సులు బోధించడానికి ఏర్పాటు చేయని ఉపాధ్యాయుల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "కోర్సులు ఏర్పాటు చేయని ఉపాధ్యాయుల పేర్లు ఏమిటి?", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher left join course_arrange on teacher.teacher_id = course_arrange.teacher_id where course_arrange.course_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### కోర్సులు ఏర్పాటు చేయని ఉపాధ్యాయుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "museum_visit", "question": "30 ఏళ్లలోపు ఎంత మంది సందర్శకులు ఉన్నారు?", "query": "select count ( * ) from visitor where age < 30", "predicted_sql": "select count ( visitor.id ) from visitor where visitor.age >= 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 30 ఏళ్లలోపు ఎంత మంది సందర్శకులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "మెంబర్‌షిప్ స్థాయి 4 కంటే ఎక్కువగా ఉన్న సందర్శకుల పేర్లను కనుగొని, ఫలితాలను ఎక్కువ నుండి తక్కువ స్థాయికి ఆర్డర్ చేయండి.", "query": "select name from visitor where level_of_membership > 4 order by level_of_membership desc", "predicted_sql": "select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### మెంబర్‌షిప్ స్థాయి 4 కంటే ఎక్కువగా ఉన్న సందర్శకుల పేర్లను కనుగొని, ఫలితాలను ఎక్కువ నుండి తక్కువ స్థాయికి ఆర్డర్ చేయండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "సభ్యత్వ స్థాయి 4 కంటే ఎక్కువగా లేని సందర్శకుల సగటు వయస్సు ఎంత?", "query": "select avg ( age ) from visitor where level_of_membership <= 4", "predicted_sql": "select max ( visitor.age ) from visitor where visitor.level_of_membership < 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### సభ్యత్వ స్థాయి 4 కంటే ఎక్కువగా లేని సందర్శకుల సగటు వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "సభ్యత్వ స్థాయి 4 కంటే ఎక్కువగా ఉన్న సందర్శకుల పేరు మరియు సభ్యత్వ స్థాయిని కనుగొనండి మరియు వారి వయస్సును బట్టి వృద్ధుల నుండి యువకుల వరకు క్రమబద్ధీకరించండి.", "query": "select name , level_of_membership from visitor where level_of_membership > 4 order by age desc", "predicted_sql": "select visitor.name  , visitor.level_of_membership  , visitor.age from visitor where visitor.level_of_membership >= 4 and visitor.age >= 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### సభ్యత్వ స్థాయి 4 కంటే ఎక్కువగా ఉన్న సందర్శకుల పేరు మరియు సభ్యత్వ స్థాయిని కనుగొనండి మరియు వారి వయస్సును బట్టి వృద్ధుల నుండి యువకుల వరకు క్రమబద్ధీకరించండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ఎక్కువ మంది సిబ్బంది ఉన్న మ్యూజియం ఐడి మరియు పేరును కనుగొనాలా?", "query": "select museum_id , name from museum order by num_of_staff desc limit 1", "predicted_sql": "select museum.museum_id  , museum.name from museum", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ఎక్కువ మంది సిబ్బంది ఉన్న మ్యూజియం ఐడి మరియు పేరును కనుగొనాలా? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2009కి ముందు తెరిచిన మ్యూజియంల కోసం పనిచేసే సగటు సిబ్బంది సంఖ్యను కనుగొనండి.", "query": "select avg ( num_of_staff ) from museum where open_year < 2009", "predicted_sql": "select count ( * ) from museum where open_year < 2009", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2009కి ముందు తెరిచిన మ్యూజియంల కోసం పనిచేసే సగటు సిబ్బంది సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ప్లాజా మ్యూజియం అని పిలువబడే మ్యూజియం ప్రారంభ సంవత్సరం మరియు సిబ్బంది సంఖ్య ఏమిటి?", "query": "select num_of_staff , open_year from museum where name = 'Plaza Museum'", "predicted_sql": "select museum.open_year  , museum.num_of_staff from museum where museum.name = 'ప్లాజా మ్యూజియం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ప్లాజా మ్యూజియం అని పిలువబడే మ్యూజియం ప్రారంభ సంవత్సరం మరియు సిబ్బంది సంఖ్య ఏమిటి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2010 తర్వాత ప్రారంభించబడిన అన్ని మ్యూజియంలలో కనీస సిబ్బంది సంఖ్య కంటే ఎక్కువ మంది సిబ్బంది ఉన్న మ్యూజియంల పేర్లను కనుగొనండి.", "query": "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )", "predicted_sql": "select museum.name from museum where museum.open_year > 2010 order by museum.num_of_staff asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2010 తర్వాత ప్రారంభించబడిన అన్ని మ్యూజియంలలో కనీస సిబ్బంది సంఖ్య కంటే ఎక్కువ మంది సిబ్బంది ఉన్న మ్యూజియంల పేర్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "కొన్ని మ్యూజియంలను ఒకటి కంటే ఎక్కువసార్లు సందర్శించిన సందర్శకుల ఐడి, పేరు మరియు వయస్సును కనుగొనండి.", "query": "select visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id having count ( * ) > 1", "predicted_sql": "select visitor.id  , visitor.name  , visitor.age from museum join visit on museum.museum_id = visit.museum_id join visitor on visit.visitor_id = visitor.id group by visitor.id  , visitor.name  , visitor.age having count ( distinct museum.museum_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### కొన్ని మ్యూజియంలను ఒకటి కంటే ఎక్కువసార్లు సందర్శించిన సందర్శకుల ఐడి, పేరు మరియు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "అన్ని మ్యూజియం టిక్కెట్లలో అత్యధిక మొత్తంలో డబ్బు ఖర్చు చేసిన సందర్శకుల ఐడి, పేరు మరియు సభ్యత్వ స్థాయి ఏమిటి?", "query": "select visit.visitor_id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1", "predicted_sql": "select visitor.id  , visitor.name  , visitor.level_of_membership from visit join visitor on visit.visitor_id = visitor.id group by visitor.id  , visitor.name  , visitor.level_of_membership having sum ( visit.total_spent ) = ( select max ( total_spent ) from visit )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### అన్ని మ్యూజియం టిక్కెట్లలో అత్యధిక మొత్తంలో డబ్బు ఖర్చు చేసిన సందర్శకుల ఐడి, పేరు మరియు సభ్యత్వ స్థాయి ఏమిటి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ఎక్కువ సార్లు సందర్శించిన మ్యూజియం యొక్క ఐడి మరియు పేరు ఏమిటి?", "query": "select visit.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1", "predicted_sql": "select museum.museum_id  , museum.name from museum", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ఎక్కువ సార్లు సందర్శించిన మ్యూజియం యొక్క ఐడి మరియు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ఇంతవరకు సందర్శకులు లేని మ్యూజియం పేరు ఏమిటి?", "query": "select name from museum where museum_id not in ( select museum_id from visit )", "predicted_sql": "select museum.name from museum", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ఇంతవరకు సందర్శకులు లేని మ్యూజియం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ఒకేసారి అత్యధిక టిక్కెట్‌లను కొనుగోలు చేసిన సందర్శకుడి పేరు మరియు వయస్సును కనుగొనండి.", "query": "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1", "predicted_sql": "select visitor.name  , visitor.age from visitor join visit on visit.visitor_id = visitor.id order by visit.num_of_ticket desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ఒకేసారి అత్యధిక టిక్కెట్‌లను కొనుగోలు చేసిన సందర్శకుడి పేరు మరియు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "అన్ని సందర్శనలలో కొనుగోలు చేసిన టిక్కెట్‌ల సగటు మరియు గరిష్ట సంఖ్య ఎంత?", "query": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### అన్ని సందర్శనలలో కొనుగోలు చేసిన టిక్కెట్‌ల సగటు మరియు గరిష్ట సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "సభ్యత్వ స్థాయి 1 ఉన్న సందర్శకుల మొత్తం టిక్కెట్ ఖర్చు ఎంత?", "query": "select sum ( visit.total_spent ) from visitor join visit on visitor.id = visit.visitor_id where visitor.level_of_membership = 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### సభ్యత్వ స్థాయి 1 ఉన్న సందర్శకుల మొత్తం టిక్కెట్ ఖర్చు ఎంత? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2009కి ముందు తెరిచిన మ్యూజియం మరియు 2011 తర్వాత తెరిచిన మ్యూజియం రెండింటినీ సందర్శించిన సందర్శకుల పేరు ఏమిటి?", "query": "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year > 2011", "predicted_sql": "select visitor.name from museum join visit on museum.museum_id = visit.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year < 2011", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2009కి ముందు తెరిచిన మ్యూజియం మరియు 2011 తర్వాత తెరిచిన మ్యూజియం రెండింటినీ సందర్శించిన సందర్శకుల పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2010 తర్వాత తెరవబడిన ఏ మ్యూజియాన్ని సందర్శించని సందర్శకుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from visitor where id not in ( select visit.visitor_id from museum join visit on museum.museum_id = visit.museum_id where museum.open_year > 2010 )", "predicted_sql": "select count ( * ) from museum join visit on museum.museum_id = visit.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year > 2010", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2010 తర్వాత తెరవబడిన ఏ మ్యూజియాన్ని సందర్శించని సందర్శకుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "2013 తర్వాత లేదా 2008కి ముందు ఎన్ని మ్యూజియంలు తెరవబడ్డాయి?", "query": "select count ( * ) from museum where open_year > 2013 or open_year < 2008", "predicted_sql": "select count ( * ) from museum where museum.open_year < 2013 or museum.open_year > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### 2013 తర్వాత లేదా 2008కి ముందు ఎన్ని మ్యూజియంలు తెరవబడ్డాయి? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "wta_1", "question": "మొత్తం ఆటగాళ్ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from players", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### మొత్తం ఆటగాళ్ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఎంత మంది ఆటగాళ్లు ఉన్నారు?", "query": "select count ( * ) from players", "predicted_sql": "select count ( distinct players.player_id ) from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఎంత మంది ఆటగాళ్లు ఉన్నారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "మొత్తం మ్యాచ్‌ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from matches", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### మొత్తం మ్యాచ్‌ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "మ్యాచ్‌ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from matches", "predicted_sql": "select matches.match_num from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### మ్యాచ్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "USA కోడ్‌తో దేశంలోని ఆటగాళ్లందరి మొదటి పేరు మరియు పుట్టిన తేదీని జాబితా చేయండి.", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players where players.country_code = 'USA' order by players.birth_date asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code ( USA ) | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc ( USA ) , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc ( USA ) , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### USA కోడ్‌తో దేశంలోని ఆటగాళ్లందరి మొదటి పేరు మరియు పుట్టిన తేదీని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "USA నుండి వచ్చిన ఆటగాళ్ల మొదటి పేర్లు మరియు పుట్టిన తేదీలు ఏమిటి?", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players join matches on matches.winner_id = players.player_id where players.country_code = 'USA' order by matches.tourney_date asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code ( USA ) | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc ( USA ) , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc ( USA ) , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### USA నుండి వచ్చిన ఆటగాళ్ల మొదటి పేర్లు మరియు పుట్టిన తేదీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో ఓడిపోయిన మరియు విజేతల సగటు వయస్సును కనుగొనండి.", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select matches.loser_age  , matches.winner_age from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో ఓడిపోయిన మరియు విజేతల సగటు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "మ్యాచ్‌లలో ఓడిపోయిన మరియు విజేతల సగటు వయస్సు ఎంత?", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select matches.loser_age - matches.winner_age as age_difference from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### మ్యాచ్‌లలో ఓడిపోయిన మరియు విజేతల సగటు వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో విజేతల సగటు ర్యాంక్‌ను కనుగొనండి.", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select matches.winner_name  , rankings.ranking from matches join rankings on matches.winner_id = rankings.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో విజేతల సగటు ర్యాంక్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో విజేతలకు సగటు ర్యాంక్ ఎంత?", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select matches.winner_rank from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో విజేతలకు సగటు ర్యాంక్ ఎంత? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో ఓడిపోయిన అత్యధిక ర్యాంక్‌ను కనుగొనండి.", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_id  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_id  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where rankings.ranking > 100 order by rankings.ranking desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో ఓడిపోయిన అత్యధిక ర్యాంక్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో ఓడిపోయిన వారి అత్యుత్తమ ర్యాంక్ ఏమిటి?", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select max ( rankings.ranking ) as max_rank from rankings join players on rankings.player_id = players.player_id join matches on matches.winner_id = players.player_id where matches.loser_rank is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో ఓడిపోయిన వారి అత్యుత్తమ ర్యాంక్ ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని ఆటగాళ్ల యొక్క విభిన్న దేశ కోడ్‌ల సంఖ్యను కనుగొనండి.", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని ఆటగాళ్ల యొక్క విభిన్న దేశ కోడ్‌ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఆటగాళ్ళు ఎన్ని విభిన్న దేశాల నుండి వచ్చారు?", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఆటగాళ్ళు ఎన్ని విభిన్న దేశాల నుండి వచ్చారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఓడిపోయిన వారి విభిన్న పేర్ల సంఖ్యను కనుగొనండి.", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఓడిపోయిన వారి విభిన్న పేర్ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఎన్ని విభిన్న ఓడిపోయిన పేర్లు ఉన్నాయి?", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select distinct players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఎన్ని విభిన్న ఓడిపోయిన పేర్లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "10 కంటే ఎక్కువ మ్యాచ్‌లు ఉన్న టోర్నీ పేరును కనుగొనండి.", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 10 కంటే ఎక్కువ మ్యాచ్‌లు ఉన్న టోర్నీ పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "10 కంటే ఎక్కువ మ్యాచ్‌లు ఉన్న టోర్నమెంట్‌ల పేర్లు ఏమిటి?", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select tourney_name from matches group by tourney_name having count ( match_num ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 10 కంటే ఎక్కువ మ్యాచ్‌లు ఉన్న టోర్నమెంట్‌ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "2013 మరియు 2016 రెండింటిలోనూ ఆడిన విజేతలందరి పేర్లను జాబితా చేయండి.", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year in ( 2013  , 2016 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 2013 మరియు 2016 రెండింటిలోనూ ఆడిన విజేతలందరి పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "2013 మరియు 2016 రెండింటిలోనూ గెలిచిన ఆటగాళ్ల పేర్లు ఏమిటి?", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year in ( 2013  , 2016 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 2013 మరియు 2016 రెండింటిలోనూ గెలిచిన ఆటగాళ్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "2013 లేదా 2016 సంవత్సరాల్లో ఆడిన అన్ని మ్యాచ్‌ల సంఖ్యను జాబితా చేయండి.", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select matches.match_num from matches where matches.year = 2013 or matches.year = 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 2013 లేదా 2016 సంవత్సరాల్లో ఆడిన అన్ని మ్యాచ్‌ల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "2013 లేదా 2016లో ఎన్ని మ్యాచ్‌లు ఆడారు?", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( * ) from matches where year = 2013 or year = 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 2013 లేదా 2016లో ఎన్ని మ్యాచ్‌లు ఆడారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "టోర్నీ WTA ఛాంపియన్‌షిప్‌లు మరియు ఆస్ట్రేలియన్ ఓపెన్ రెండింటిలోనూ గెలిచిన ఆటగాళ్ల దేశ కోడ్ మరియు మొదటి పేరు ఏమిటి?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### టోర్నీ WTA ఛాంపియన్‌షిప్‌లు మరియు ఆస్ట్రేలియన్ ఓపెన్ రెండింటిలోనూ గెలిచిన ఆటగాళ్ల దేశ కోడ్ మరియు మొదటి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "WTA ఛాంపియన్‌షిప్‌లు మరియు ఆస్ట్రేలియన్ ఓపెన్ రెండింటినీ గెలిచిన ఆటగాళ్లకు మొదటి పేర్లు మరియు దేశం కోడ్‌లు ఏమిటి?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players join matches on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' or matches.tourney_name = 'Australian Open' limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### WTA ఛాంపియన్‌షిప్‌లు మరియు ఆస్ట్రేలియన్ ఓపెన్ రెండింటినీ గెలిచిన ఆటగాళ్లకు మొదటి పేర్లు మరియు దేశం కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పాత ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్‌ను కనుగొనండి.", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పాత ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పాత ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్ ఏమిటి?", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పాత ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పుట్టిన తేదీ క్రమంలో ఆటగాళ్లందరి మొదటి మరియు చివరి పేరును జాబితా చేయండి.", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పుట్టిన తేదీ క్రమంలో ఆటగాళ్లందరి మొదటి మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పుట్టిన తేదీ ప్రకారం క్రమబద్ధీకరించబడిన ఆటగాళ్లందరి పూర్తి పేర్లు ఏమిటి?", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పుట్టిన తేదీ ప్రకారం క్రమబద్ధీకరించబడిన ఆటగాళ్లందరి పూర్తి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పుట్టిన తేదీ క్రమంలో ఎడమ / L చేతిలో ఉన్న ఆటగాళ్లందరి మొదటి మరియు చివరి పేరును జాబితా చేయండి.", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పుట్టిన తేదీ క్రమంలో ఎడమ / L చేతిలో ఉన్న ఆటగాళ్లందరి మొదటి మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "పుట్టిన తేదీ క్రమంలో ఎడమచేతి వాటం ఆటగాళ్ల పూర్తి పేర్లు ఏమిటి?", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.birth_date  , players.first_name  , players.last_name from players order by players.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### పుట్టిన తేదీ క్రమంలో ఎడమచేతి వాటం ఆటగాళ్ల పూర్తి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఎక్కువ సంఖ్యలో పర్యటనలు చేసిన ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్‌ను కనుగొనండి.", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players order by players.player_id asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఎక్కువ సంఖ్యలో పర్యటనలు చేసిన ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక పర్యటనలు ఉన్న ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్ ఏమిటి?", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.country_code from players order by players.player_id asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక పర్యటనలు ఉన్న ఆటగాడి మొదటి పేరు మరియు దేశం కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక మ్యాచ్‌లు ఉన్న సంవత్సరాన్ని కనుగొనండి.", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select matches.year  , count ( matches.match_num ) as num_matches from matches group by matches.year order by num_matches desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక మ్యాచ్‌లు ఉన్న సంవత్సరాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఏ సంవత్సరంలో అత్యధిక మ్యాచ్‌లు జరిగాయి?", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select count ( * ) as total_matches from matches where year = 'ఏ సంవత్సరం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఏ సంవత్సరంలో అత్యధిక మ్యాచ్‌లు జరిగాయి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఎక్కువ సార్లు గెలిచిన విజేత పేరు మరియు ర్యాంక్ పాయింట్‌లను కనుగొనండి.", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select matches.winner_name  , matches.winner_rank_points from matches join players on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id order by matches.winner_rank_points desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఎక్కువ సార్లు గెలిచిన విజేత పేరు మరియు ర్యాంక్ పాయింట్‌లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక మ్యాచ్‌లు గెలిచిన విజేత పేరు ఏమిటి మరియు ఈ ఆటగాడికి ఎన్ని ర్యాంక్ పాయింట్లు ఉన్నాయి?", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select matches.winner_name  , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id order by rankings.ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక మ్యాచ్‌లు గెలిచిన విజేత పేరు ఏమిటి మరియు ఈ ఆటగాడికి ఎన్ని ర్యాంక్ పాయింట్లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక ర్యాంక్ పాయింట్లు సాధించిన మరియు ఆస్ట్రేలియన్ ఓపెన్ టోర్నీలో పాల్గొన్న విజేత పేరును కనుగొనండి.", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక ర్యాంక్ పాయింట్లు సాధించిన మరియు ఆస్ట్రేలియన్ ఓపెన్ టోర్నీలో పాల్గొన్న విజేత పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఆస్ట్రేలియన్ ఓపెన్ టోర్నమెంట్‌లో పాల్గొన్న అత్యధిక ర్యాంక్ పాయింట్లతో విజేత పేరు ఏమిటి?", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select matches.winner_name from matches join rankings on matches.winner_id = rankings.player_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఆస్ట్రేలియన్ ఓపెన్ టోర్నమెంట్‌లో పాల్గొన్న అత్యధిక ర్యాంక్ పాయింట్లతో విజేత పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "మ్యాచ్‌లో అత్యధిక నిమిషాలతో ఆడిన ఓడిపోయిన మరియు విజేత పేర్లను కనుగొనండి.", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select matches.winner_name from matches where matches.minutes > 120", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### మ్యాచ్‌లో అత్యధిక నిమిషాలతో ఆడిన ఓడిపోయిన మరియు విజేత పేర్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "సుదీర్ఘ మ్యాచ్‌లో ఆడిన విజేత మరియు ఓడిపోయిన వారి పేర్లు ఏమిటి?", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select matches.winner_name  , matches.loser_name from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### సుదీర్ఘ మ్యాచ్‌లో ఆడిన విజేత మరియు ఓడిపోయిన వారి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి క్రీడాకారుడు మరియు వారి మొదటి పేరు యొక్క సగటు ర్యాంకింగ్‌ను కనుగొనండి.", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , rankings.ranking from players join rankings on players.player_id = rankings.player_id order by rankings.ranking asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి క్రీడాకారుడు మరియు వారి మొదటి పేరు యొక్క సగటు ర్యాంకింగ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఆటగాళ్లందరి మొదటి పేర్లు మరియు వారి సగటు ర్యాంకింగ్‌లు ఏమిటి?", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , rankings.ranking from players join rankings on players.player_id = rankings.player_id order by rankings.ranking asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఆటగాళ్లందరి మొదటి పేర్లు మరియు వారి సగటు ర్యాంకింగ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి క్రీడాకారుడు మరియు వారి మొదటి పేరు కోసం మొత్తం ర్యాంకింగ్ పాయింట్లను కనుగొనండి.", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , sum ( rankings.ranking_points ) as total_ranking_points from players join rankings on players.player_id = rankings.player_id group by players.player_id order by total_ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి క్రీడాకారుడు మరియు వారి మొదటి పేరు కోసం మొత్తం ర్యాంకింగ్ పాయింట్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఆటగాళ్లందరి మొదటి పేర్లు మరియు వారి మొత్తం ర్యాంకింగ్ పాయింట్లు ఏమిటి?", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , sum ( rankings.ranking_points ) as total_ranking_points from players join rankings on players.player_id = rankings.player_id group by players.first_name  , players.last_name order by total_ranking_points desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఆటగాళ్లందరి మొదటి పేర్లు మరియు వారి మొత్తం ర్యాంకింగ్ పాయింట్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి దేశం కోసం ఆటగాళ్ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select players.country_code  , count ( players.player_id ) as total_players from players group by players.country_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి దేశం కోసం ఆటగాళ్ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ఒక్కో దేశం నుంచి ఎంత మంది ఆటగాళ్లు ఉన్నారు?", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select count ( distinct players.player_id ) as total_players from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ఒక్కో దేశం నుంచి ఎంత మంది ఆటగాళ్లు ఉన్నారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక సంఖ్యలో ఆటగాళ్లు ఉన్న దేశం యొక్క కోడ్‌ను కనుగొనండి.", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక సంఖ్యలో ఆటగాళ్లు ఉన్న దేశం యొక్క కోడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అత్యధిక ఆటగాళ్లు ఉన్న దేశం యొక్క కోడ్ ఏమిటి?", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.country_code from players group by players.country_code order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అత్యధిక ఆటగాళ్లు ఉన్న దేశం యొక్క కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "50 కంటే ఎక్కువ మంది ఆటగాళ్లను కలిగి ఉన్న దేశాల కోడ్‌లను కనుగొనండి.", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.country_code from players group by players.country_code having count ( players.player_id ) > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 50 కంటే ఎక్కువ మంది ఆటగాళ్లను కలిగి ఉన్న దేశాల కోడ్‌లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "50 కంటే ఎక్కువ మంది ఆటగాళ్లు ఉన్న దేశాల కోడ్‌లు ఏమిటి?", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.country_code from players group by players.country_code having count ( players.player_id ) > 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### 50 కంటే ఎక్కువ మంది ఆటగాళ్లు ఉన్న దేశాల కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి ర్యాంకింగ్ తేదీ కోసం మొత్తం పర్యటనల సంఖ్యను కనుగొనండి.", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select count ( distinct ranking_date ) as total_tours from rankings", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి ర్యాంకింగ్ తేదీ కోసం మొత్తం పర్యటనల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి ర్యాంకింగ్ తేదీకి మొత్తం ఎన్ని పర్యటనలు ఉన్నాయి?", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select count ( distinct ranking_date ) from rankings", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి ర్యాంకింగ్ తేదీకి మొత్తం ఎన్ని పర్యటనలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి సంవత్సరం జరిగిన మ్యాచ్‌ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( matches.match_num ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి సంవత్సరం జరిగిన మ్యాచ్‌ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి సంవత్సరం ఎన్ని మ్యాచ్‌లు ఆడారు?", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( matches.match_num ) as total_matches from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి సంవత్సరం ఎన్ని మ్యాచ్‌లు ఆడారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో 3 యువ విజేతల పేరు మరియు ర్యాంక్‌ను కనుగొనండి.", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , matches.winner_rank from players join matches on matches.winner_id = players.player_id where matches.best_of = 3 order by matches.winner_rank asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో 3 యువ విజేతల పేరు మరియు ర్యాంక్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో ముగ్గురు యువ విజేతల పేర్లు మరియు ర్యాంక్‌లు ఏమిటి?", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select matches.winner_name  , matches.winner_rank from matches where matches.best_of = 3 and matches.winner_age <= 25", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో ముగ్గురు యువ విజేతల పేర్లు మరియు ర్యాంక్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "WTA ఛాంపియన్‌షిప్‌లలో ఎంత మంది విభిన్న విజేతలు పాల్గొన్నారు మరియు ఎడమచేతి వాటం కలిగి ఉన్నారు?", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select count ( distinct winner_id ) as unique_winners  , count ( distinct loser_id ) as unique_losers from matches where tourney_name = 'WTA ఛాంపియన్‌షిప్‌'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### WTA ఛాంపియన్‌షిప్‌లలో ఎంత మంది విభిన్న విజేతలు పాల్గొన్నారు మరియు ఎడమచేతి వాటం కలిగి ఉన్నారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "WTA ఛాంపియన్‌షిప్‌లలో పాల్గొన్న ఎడమచేతి వాటం విజేతల సంఖ్యను కనుగొనండి.", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select count ( * ) from matches where winner_name = 'Edamame Vatam'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### WTA ఛాంపియన్‌షిప్‌లలో పాల్గొన్న ఎడమచేతి వాటం విజేతల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో అత్యధిక ర్యాంక్ పాయింట్లను పొందిన విజేత యొక్క మొదటి పేరు, దేశం కోడ్ మరియు పుట్టిన తేదీని కనుగొనండి.", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code  , players.birth_date from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where rankings.ranking_points = ( select max ( ranking_points ) from rankings )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో అత్యధిక ర్యాంక్ పాయింట్లను పొందిన విజేత యొక్క మొదటి పేరు, దేశం కోడ్ మరియు పుట్టిన తేదీని కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "అన్ని మ్యాచ్‌లలో అత్యధిక విజేత ర్యాంక్ పాయింట్‌లను కలిగి ఉన్న ఆటగాడి మొదటి పేరు, దేశం కోడ్ మరియు పుట్టిన తేదీ ఏమిటి?", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.country_code  , players.birth_date from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where rankings.ranking_points = ( select max ( ranking_points ) from rankings )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### అన్ని మ్యాచ్‌లలో అత్యధిక విజేత ర్యాంక్ పాయింట్‌లను కలిగి ఉన్న ఆటగాడి మొదటి పేరు, దేశం కోడ్ మరియు పుట్టిన తేదీ ఏమిటి? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి చేతి రకం కోసం ఆటగాళ్ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి చేతి రకం కోసం ఆటగాళ్ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ప్రతి చేతి రకానికి ఎంత మంది ఆటగాళ్లు ఉన్నారు?", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select count ( distinct players.player_id ) as num_players from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ప్రతి చేతి రకానికి ఎంత మంది ఆటగాళ్లు ఉన్నారు? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "battle_death", "question": "ఎన్ని ఓడలు &#39;క్యాప్చర్&#39; అయ్యాయి?", "query": "select count ( * ) from ship where disposition_of_ship = 'Captured'", "predicted_sql": "select count ( * ) from battle where battle.result = 'captured'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ఎన్ని ఓడలు &#39;క్యాప్చర్&#39; అయ్యాయి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "పేర్ల కోసం అవరోహణ ఆల్ఫాటిక్ క్రమంలో ఆర్డర్ చేసిన పేరు మరియు టోనేజ్‌ను జాబితా చేయండి.", "query": "select name , tonnage from ship order by name desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### పేర్ల కోసం అవరోహణ ఆల్ఫాటిక్ క్రమంలో ఆర్డర్ చేసిన పేరు మరియు టోనేజ్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ప్రతి యుద్ధం పేరు, తేదీ మరియు ఫలితాన్ని జాబితా చేయండి.", "query": "select name , date from battle", "predicted_sql": "select battle.name  , battle.date  , battle.result from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ప్రతి యుద్ధం పేరు, తేదీ మరియు ఫలితాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ప్రతిసారి సంభవించే గరిష్ట మరియు కనిష్ట మరణాల సంఖ్య ఎంత?", "query": "select max ( killed ) , min ( killed ) from death", "predicted_sql": "select min ( death.killed ) as min_deaths  , max ( death.killed ) as max_deaths from death", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ప్రతిసారి సంభవించే గరిష్ట మరియు కనిష్ట మరణాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ప్రతిసారి సంభవించే గాయాల సగటు సంఖ్య ఎంత?", "query": "select avg ( injured ) from death", "predicted_sql": "select count ( * ) from death", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ప్రతిసారి సంభవించే గాయాల సగటు సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "టన్నేజీ &#39;t&#39; ఉన్న ఓడ వల్ల సంభవించే మరణం మరియు గాయం పరిస్థితులు ఏమిటి?", "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'", "predicted_sql": "select death.note  , death.killed  , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### టన్నేజీ &#39;t&#39; ఉన్న ఓడ వల్ల సంభవించే మరణం మరియు గాయం పరిస్థితులు ఏమిటి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "బల్గేరియన్ కమాండర్ &#39;బోరిల్&#39; కానప్పుడు యుద్ధాల పేరు మరియు ఫలితాలు ఏమిటి", "query": "select name , result from battle where bulgarian_commander != 'Boril'", "predicted_sql": "select battle.name  , battle.result from battle where battle.bulgarian_commander = 'బోరిల్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### బల్గేరియన్ కమాండర్ &#39;బోరిల్&#39; కానప్పుడు యుద్ధాల పేరు మరియు ఫలితాలు ఏమిటి \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ఏదైనా &#39;బ్రిగ్&#39; రకం నౌకలను కోల్పోయిన యుద్ధాల యొక్క విభిన్న IDలు మరియు పేర్లు ఏమిటి?", "query": "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'", "predicted_sql": "select ship.id  , ship.name from ship where ship.ship_type = 'బ్రిగ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ఏదైనా &#39;బ్రిగ్&#39; రకం నౌకలను కోల్పోయిన యుద్ధాల యొక్క విభిన్న IDలు మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "మొత్తం 10 మంది కంటే ఎక్కువ మందిని చంపడానికి దారితీసిన యుద్ధాల ఐడిలు మరియు పేర్లు ఏమిటి.", "query": "select battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id group by battle.id having sum ( death.killed ) > 10", "predicted_sql": "select battle.id  , battle.name from battle order by battle.id desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### మొత్తం 10 మంది కంటే ఎక్కువ మందిని చంపడానికి దారితీసిన యుద్ధాల ఐడిలు మరియు పేర్లు ఏమిటి. \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "మొత్తం గాయాలకు కారణమైన షిప్ ఐడి మరియు పేరు ఏమిటి?", "query": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### మొత్తం గాయాలకు కారణమైన షిప్ ఐడి మరియు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "బల్గేరియన్ కమాండర్ &#39;కలోయన్&#39; మరియు లాటిన్ కమాండర్ &#39;బాల్డ్విన్ I&#39; మధ్య ఉన్న విభిన్నమైన యుద్ధ పేర్లు ఏమిటి?", "query": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'", "predicted_sql": "select battle.name from battle where battle.bulgarian_commander = 'కలోయన్' and battle.latin_commander = 'బాల్డ్విన్ I'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### బల్గేరియన్ కమాండర్ &#39;కలోయన్&#39; మరియు లాటిన్ కమాండర్ &#39;బాల్డ్విన్ I&#39; మధ్య ఉన్న విభిన్నమైన యుద్ధ పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "పోరాటాలకు ఎన్ని విభిన్న ఫలితాలు ఉన్నాయి?", "query": "select count ( distinct result ) from battle", "predicted_sql": "select battle.result from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### పోరాటాలకు ఎన్ని విభిన్న ఫలితాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "టన్నుల &#39;225&#39;తో ఏ ఓడను ఎన్ని యుద్ధాలు కోల్పోలేదు?", "query": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )", "predicted_sql": "select battle.name from battle join ship on ship.lost_in_battle = battle.id where ship.tonnage = 225", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### టన్నుల &#39;225&#39;తో ఏ ఓడను ఎన్ని యుద్ధాలు కోల్పోలేదు? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "&#39;లెటిస్&#39; అనే ఓడ మరియు &#39;HMS అటలాంటా&#39; అనే ఓడను కోల్పోయిన యుద్ధం పేరు మరియు తేదీని జాబితా చేయండి", "query": "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta'", "predicted_sql": "select battle.name  , battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = 'లెటిస్' and ship.name = 'HMS అటలాంటా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### &#39;లెటిస్&#39; అనే ఓడ మరియు &#39;HMS అటలాంటా&#39; అనే ఓడను కోల్పోయిన యుద్ధం పేరు మరియు తేదీని జాబితా చేయండి \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "&#39;ఇంగ్లీష్ ఛానల్&#39;లో ఓడలు ఏవీ కోల్పోని యుద్ధాల పేర్లు, ఫలితాలు మరియు బల్గేరియన్ కమాండర్‌లను చూపండి.", "query": "select name , result , bulgarian_commander from battle except select battle.name , battle.result , battle.bulgarian_commander from battle join ship on battle.id = ship.lost_in_battle where ship.location = 'English Channel'", "predicted_sql": "select battle.name  , battle.result  , battle.bulgarian_commander from battle where battle.latin_commander = 'ఇంగ్లీష్ ఛానల్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### &#39;ఇంగ్లీష్ ఛానల్&#39;లో ఓడలు ఏవీ కోల్పోని యుద్ధాల పేర్లు, ఫలితాలు మరియు బల్గేరియన్ కమాండర్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "&#39;తూర్పు&#39; అనే సబ్‌స్ట్రింగ్ ఉన్న డెత్ ఈవెంట్‌ల నోట్స్ ఏమిటి?", "query": "select note from death where note like '%East%'", "predicted_sql": "select death.note from death where death.note like '%తూర్పు%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### &#39;తూర్పు&#39; అనే సబ్‌స్ట్రింగ్ ఉన్న డెత్ ఈవెంట్‌ల నోట్స్ ఏమిటి? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "student_transcripts_tracking", "question": "లైన్ 1 మరియు లైన్ 2తో సహా అన్ని చిరునామాలు ఏమిటి?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### లైన్ 1 మరియు లైన్ 2తో సహా అన్ని చిరునామాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అన్ని చిరునామాలకు మొదటి మరియు రెండవ పంక్తి ఏమిటి?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అన్ని చిరునామాలకు మొదటి మరియు రెండవ పంక్తి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "మొత్తం ఎన్ని కోర్సులు జాబితా చేయబడ్డాయి?", "query": "select count ( * ) from courses", "predicted_sql": "select count ( course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### మొత్తం ఎన్ని కోర్సులు జాబితా చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని కోర్సులు ఉన్నాయి?", "query": "select count ( * ) from courses", "predicted_sql": "select count ( courses.course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని కోర్సులు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "గణిత కోర్సు ఎలా వివరించబడింది?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "select courses.course_name  , courses.course_description  , courses.other_details from courses where courses.course_name = 'గణిత'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### గణిత కోర్సు ఎలా వివరించబడింది? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అన్ని గణిత కోర్సులకు వివరణలు ఏమిటి?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "select courses.course_id  , courses.course_name  , courses.course_description  , courses.other_details from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అన్ని గణిత కోర్సులకు వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "పోర్ట్ చెల్సియా నగరంలో చిరునామా యొక్క జిప్ కోడ్ ఏమిటి?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = 'పోర్ట్ చెల్సియా నగరం' and addresses.line_1 = 'చిరునామా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### పోర్ట్ చెల్సియా నగరంలో చిరునామా యొక్క జిప్ కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "పోర్ట్ చెల్సియా కోసం జిప్ కోడ్ ఏమిటి?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select addresses.zip_postcode from addresses where addresses.city = 'Chelsea'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### పోర్ట్ చెల్సియా కోసం జిప్ కోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఏ విభాగం అత్యధిక డిగ్రీలను అందిస్తోంది? విభాగం పేరు మరియు ఐడిని జాబితా చేయండి.", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name  , count ( degree_programs.degree_program_id ) as total_degrees from departments join degree_programs on departments.department_id = degree_programs.department_id group by departments.department_name order by total_degrees desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఏ విభాగం అత్యధిక డిగ్రీలను అందిస్తోంది? విభాగం పేరు మరియు ఐడిని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యధిక డిగ్రీలు ఉన్న విభాగం పేరు మరియు ఐడి ఏమిటి?", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_id  , departments.department_name from degree_programs join departments on degree_programs.department_id = departments.department_id group by departments.department_id having count ( degree_programs.degree_program_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యధిక డిగ్రీలు ఉన్న విభాగం పేరు మరియు ఐడి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని విభాగాలు ఏ డిగ్రీని అందిస్తాయి?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "select count ( departments.department_id ) as total_departments from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని విభాగాలు ఏ డిగ్రీని అందిస్తాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని విభిన్న విభాగాలు డిగ్రీలు అందిస్తున్నాయి?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "select departments.department_name  , count ( degree_programs.degree_program_id ) as total_degrees from departments join degree_programs on departments.department_id = degree_programs.department_id group by departments.department_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని విభిన్న విభాగాలు డిగ్రీలు అందిస్తున్నాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని విభిన్న డిగ్రీ పేర్లు అందించబడ్డాయి?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select distinct degree_summary_name from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని విభిన్న డిగ్రీ పేర్లు అందించబడ్డాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని విభిన్న డిగ్రీలు అందించబడతాయి?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select count ( distinct degree_programs.degree_summary_name ) as num_degrees from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని విభిన్న డిగ్రీలు అందించబడతాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఇంజనీరింగ్ విభాగం ఎన్ని డిగ్రీలను అందిస్తోంది?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs where degree_programs.department_id = ( select departments.department_id from departments where departments.department_name = 'ఇంజనీరింగ్' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఇంజనీరింగ్ విభాగం ఎన్ని డిగ్రీలను అందిస్తోంది? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఇంజనీరింగ్ విభాగానికి ఎన్ని డిగ్రీలు ఉన్నాయి?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select count ( degree_programs.degree_program_id ) from degree_programs where degree_programs.department_id = ( select departments.department_id from departments where departments.department_name = 'ఇంజనీరింగ్' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఇంజనీరింగ్ విభాగానికి ఎన్ని డిగ్రీలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అన్ని విభాగాల పేర్లు మరియు వివరణలు ఏమిటి?", "query": "select section_name , section_description from sections", "predicted_sql": "select departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అన్ని విభాగాల పేర్లు మరియు వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అన్ని విభాగాలకు పేర్లు మరియు వివరణలు ఏమిటి?", "query": "select section_name , section_description from sections", "predicted_sql": "select departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అన్ని విభాగాలకు పేర్లు మరియు వివరణలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "గరిష్టంగా 2 విభాగాలను కలిగి ఉన్న కోర్సుల పేర్లు మరియు ఐడి ఏమిటి?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### గరిష్టంగా 2 విభాగాలను కలిగి ఉన్న కోర్సుల పేర్లు మరియు ఐడి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "2 విభాగాల కంటే తక్కువ ఉన్న ప్రతి కోర్సు యొక్క పేర్లు మరియు IDలు ఏమిటి?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_id  , courses.course_name from courses group by courses.course_id  , courses.course_name having count ( * ) < 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### 2 విభాగాల కంటే తక్కువ ఉన్న ప్రతి కోర్సు యొక్క పేర్లు మరియు IDలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "రివర్స్డ్ లెక్సికోగ్రాఫికల్ క్రమంలో సెక్షన్_పేరును జాబితా చేయండి.", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select sections.section_name from sections order by sections.section_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### రివర్స్డ్ లెక్సికోగ్రాఫికల్ క్రమంలో సెక్షన్_పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "రివర్స్ ఆల్ఫాబెటికల్ ఆర్డర్‌లో ఉన్న విభాగాల పేర్లు ఏమిటి?", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select departments.department_name from departments order by departments.department_name desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### రివర్స్ ఆల్ఫాబెటికల్ ఆర్డర్‌లో ఉన్న విభాగాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న సెమిస్టర్ ఏది? పేరు మరియు ఐడి రెండింటినీ చూపించు.", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select semesters.semester_name  , semesters.semester_id from semesters join student_enrolment on student_enrolment.semester_id = semesters.semester_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న సెమిస్టర్ ఏది? పేరు మరియు ఐడి రెండింటినీ చూపించు. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ప్రతి సెమిస్టర్‌కి, ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న వారి పేరు మరియు ఐడి ఏమిటి?", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.last_name from students join student_enrolment on student_enrolment.student_id = students.student_id group by students.student_id having count ( student_enrolment.student_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ప్రతి సెమిస్టర్‌కి, ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న వారి పేరు మరియు ఐడి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "కంప్యూటర్‌కు సబ్‌స్ట్రింగ్ పేరు ఉన్న విభాగం యొక్క వివరణ ఏమిటి?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "select departments.department_id  , departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### కంప్యూటర్‌కు సబ్‌స్ట్రింగ్ పేరు ఉన్న విభాగం యొక్క వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "కంప్యూటర్ అనే పదాన్ని కలిగి ఉన్న వ్యక్తి యొక్క విభాగం వివరణ ఏమిటి?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "select departments.department_description from departments where departments.department_name = 'కంప్యూటర్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### కంప్యూటర్ అనే పదాన్ని కలిగి ఉన్న వ్యక్తి యొక్క విభాగం వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఒక సెమిస్టర్‌లో 2 డిగ్రీ ప్రోగ్రామ్‌లలో ఎవరు నమోదు చేసుకున్నారు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరు మరియు ఐడిని జాబితా చేయండి.", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఒక సెమిస్టర్‌లో 2 డిగ్రీ ప్రోగ్రామ్‌లలో ఎవరు నమోదు చేసుకున్నారు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరు మరియు ఐడిని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఒక సెమిస్టర్‌లో 2 డిగ్రీ ప్రోగ్రామ్‌లలో చేరిన విద్యార్థులందరి ఐడీలతో పాటు మొదటి, మధ్య మరియు చివరి పేర్లు ఏమిటి?", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on student_enrolment.student_id = students.student_id join semesters on student_enrolment.semester_id = semesters.semester_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where semesters.semester_name = 'ఒక సెమిస్టర్' and degree_programs.degree_summary_name in ( 'మొదటి డిగ్రీ ప్రోగ్రామ్'  , 'మధ్య డిగ్రీ ప్రోగ్రామ్' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఒక సెమిస్టర్‌లో 2 డిగ్రీ ప్రోగ్రామ్‌లలో చేరిన విద్యార్థులందరి ఐడీలతో పాటు మొదటి, మధ్య మరియు చివరి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "బ్యాచిలర్ డిగ్రీ ప్రోగ్రామ్‌లో ఎవరు నమోదు చేసుకున్నారు? మొదటి పేరు, మధ్య పేరు, చివరి పేరు జాబితా చేయండి.", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'బ్యాచిలర్ డిగ్రీ ప్రోగ్రామ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### బ్యాచిలర్ డిగ్రీ ప్రోగ్రామ్‌లో ఎవరు నమోదు చేసుకున్నారు? మొదటి పేరు, మధ్య పేరు, చివరి పేరు జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "బ్యాచిలర్స్ ప్రోగ్రామ్‌లో నమోదు చేసుకున్న ప్రతి ఒక్కరికీ మొదటి, మధ్య మరియు చివరి పేర్లు ఏమిటి?", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'బ్యాచిలర్స్ ప్రోగ్రామ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### బ్యాచిలర్స్ ప్రోగ్రామ్‌లో నమోదు చేసుకున్న ప్రతి ఒక్కరికీ మొదటి, మధ్య మరియు చివరి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్ రకాన్ని కనుగొనండి?", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name having count ( student_enrolment.student_id ) > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్ రకాన్ని కనుగొనండి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న డిగ్రీ సారాంశం పేరు ఏమిటి?", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న డిగ్రీ సారాంశం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్‌ను కనుగొనండి. id మరియు సారాంశం రెండింటినీ జాబితా చేయండి.", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_program_id  , degree_programs.degree_summary_name  , count ( students.student_id ) as total_students from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id join students on student_enrolment.student_id = students.student_id group by degree_programs.degree_program_id  , degree_programs.degree_summary_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యధిక సంఖ్యలో విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్‌ను కనుగొనండి. id మరియు సారాంశం రెండింటినీ జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్ ఐడి మరియు డిగ్రీ సారాంశం ఏమిటి?", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_program_id  , degree_programs.degree_summary_name  , degree_programs.degree_summary_description from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న ప్రోగ్రామ్ ఐడి మరియు డిగ్రీ సారాంశం ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఏ విద్యార్థి ఏ ప్రోగ్రామ్‌లో ఎక్కువ సార్లు నమోదు చేసుకున్నాడు? ఐడి, మొదటి పేరు, మధ్య పేరు, చివరి పేరు, నమోదుల సంఖ్య మరియు విద్యార్థి ఐడిని జాబితా చేయండి.", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name  , count ( student_enrolment.student_id ) as enrolment_count from students join student_enrolment on student_enrolment.student_id = students.student_id group by students.student_id  , students.first_name  , students.middle_name  , students.last_name order by enrolment_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఏ విద్యార్థి ఏ ప్రోగ్రామ్‌లో ఎక్కువ సార్లు నమోదు చేసుకున్నాడు? ఐడి, మొదటి పేరు, మధ్య పేరు, చివరి పేరు, నమోదుల సంఖ్య మరియు విద్యార్థి ఐడిని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఏదైనా ప్రోగ్రామ్‌లో అత్యధికంగా నమోదు చేసుకున్న విద్యార్థికి మొదటి, మధ్య మరియు చివరి పేరు, id మరియు నమోదుల సంఖ్యతో పాటుగా ఏమిటి?", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఏదైనా ప్రోగ్రామ్‌లో అత్యధికంగా నమోదు చేసుకున్న విద్యార్థికి మొదటి, మధ్య మరియు చివరి పేరు, id మరియు నమోదుల సంఖ్యతో పాటుగా ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఏ సెమిస్టర్లలో విద్యార్థి నమోదు చేయబడలేదు? సెమిస్టర్ పేరును జాబితా చేయండి.", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select semesters.semester_name from semesters left join student_enrolment on semesters.semester_id = student_enrolment.semester_id where student_enrolment.student_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఏ సెమిస్టర్లలో విద్యార్థి నమోదు చేయబడలేదు? సెమిస్టర్ పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "విద్యార్థులు నమోదు చేసుకోని సెమిస్టర్ పేరు ఏమిటి?", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select semesters.semester_name from semesters", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### విద్యార్థులు నమోదు చేసుకోని సెమిస్టర్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "విద్యార్థులు ఎప్పుడైనా నమోదు చేసుకున్న కోర్సుల అన్ని కోర్సుల పేర్లు ఏమిటి?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### విద్యార్థులు ఎప్పుడైనా నమోదు చేసుకున్న కోర్సుల అన్ని కోర్సుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "కొంతమంది విద్యార్థులు నమోదు చేసుకున్న అన్ని కోర్సుల పేర్లు ఏమిటి?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### కొంతమంది విద్యార్థులు నమోదు చేసుకున్న అన్ని కోర్సుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యధిక సంఖ్యలో నమోదు చేసుకున్న కోర్సు పేరు ఏమిటి?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యధిక సంఖ్యలో నమోదు చేసుకున్న కోర్సు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న కోర్సు పేరు ఏమిటి?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from student_enrolment_courses join courses on student_enrolment_courses.course_id = courses.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎక్కువ మంది విద్యార్థులు నమోదు చేసుకున్న కోర్సు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ప్రస్తుతం నార్త్ కరోలినా రాష్ట్రంలో నివసిస్తున్న కానీ ఏ డిగ్రీ ప్రోగ్రామ్‌లోనూ నమోదు చేసుకోని విద్యార్థుల చివరి పేరును కనుగొనండి.", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ప్రస్తుతం నార్త్ కరోలినా రాష్ట్రంలో నివసిస్తున్న కానీ ఏ డిగ్రీ ప్రోగ్రామ్‌లోనూ నమోదు చేసుకోని విద్యార్థుల చివరి పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "నార్త్ కరోలినాలో నివసిస్తున్న, కానీ ఏ డిగ్రీ ప్రోగ్రామ్‌లలో నమోదు చేసుకోని విద్యార్థుల చివరి పేరు ఏమిటి?", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select degree_programs.degree_summary_name from students join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where students.first_name = 'నార్త్ కరోలినా' and students.last_name = 'నివసిస్తున్న'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### నార్త్ కరోలినాలో నివసిస్తున్న, కానీ ఏ డిగ్రీ ప్రోగ్రామ్‌లలో నమోదు చేసుకోని విద్యార్థుల చివరి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "కనీసం 2 కోర్సు ఫలితాలతో ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు ఐడిని చూపండి.", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.transcript_id from transcripts join transcript_contents on transcript_contents.transcript_id = transcripts.transcript_id join student_enrolment_courses on student_enrolment_courses.student_course_id = transcript_contents.student_course_id where student_enrolment_courses.course_id in ( select course_id from courses limit 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### కనీసం 2 కోర్సు ఫలితాలతో ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు ఐడిని చూపండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "కనీసం 2 కోర్సులు జాబితా చేయబడిన ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు ఐడి ఏమిటి?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.transcript_id from transcripts join transcript_contents on transcript_contents.transcript_id = transcripts.transcript_id join student_enrolment_courses on student_enrolment_courses.student_course_id = transcript_contents.student_course_id where student_enrolment_courses.course_id in ( select course_id from courses limit 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### కనీసం 2 కోర్సులు జాబితా చేయబడిన ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు ఐడి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "మొదటి పేరు తిమ్మోతి మరియు చివరి పేరు వార్డ్ ఉన్న వ్యక్తి ఫోన్ నంబర్ ఏమిటి?", "query": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'", "predicted_sql": "select students.first_name  , students.last_name  , students.cell_mobile_number from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### మొదటి పేరు తిమ్మోతి మరియు చివరి పేరు వార్డ్ ఉన్న వ్యక్తి ఫోన్ నంబర్ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "తిమ్మి వార్డ్ అనే విద్యార్థి మొబైల్ ఫోన్ నంబర్ ఏమిటి?", "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'", "predicted_sql": "select students.cell_mobile_number from students where students.first_name = 'తిమ్మి' and students.last_name = 'వార్డ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### తిమ్మి వార్డ్ అనే విద్యార్థి మొబైల్ ఫోన్ నంబర్ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "నమోదు చేసుకున్న మొదటి విద్యార్థి ఎవరు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరును జాబితా చేయండి.", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students order by students.student_id asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### నమోదు చేసుకున్న మొదటి విద్యార్థి ఎవరు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "నమోదు చేసుకున్న మొదటి విద్యార్థి యొక్క మొదటి, మధ్య మరియు చివరి పేరు ఏమిటి?", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### నమోదు చేసుకున్న మొదటి విద్యార్థి యొక్క మొదటి, మధ్య మరియు చివరి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "పాఠశాలలో తొలి గ్రాడ్యుయేట్ ఎవరు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరును జాబితా చేయండి.", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'గ్రాడ్యుయేట్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### పాఠశాలలో తొలి గ్రాడ్యుయేట్ ఎవరు? మొదటి పేరు, మధ్య పేరు మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ప్రారంభ పాఠశాల గ్రాడ్యుయేట్ యొక్క మొదటి, మధ్య మరియు చివరి పేరు ఏమిటి?", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ప్రారంభ పాఠశాల గ్రాడ్యుయేట్ యొక్క మొదటి, మధ్య మరియు చివరి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎవరి శాశ్వత చిరునామా అతని లేదా ఆమె ప్రస్తుత చిరునామాకి భిన్నంగా ఉంటుంది? అతని లేదా ఆమె మొదటి పేరును జాబితా చేయండి.", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "select students.first_name from students where students.student_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎవరి శాశ్వత చిరునామా అతని లేదా ఆమె ప్రస్తుత చిరునామాకి భిన్నంగా ఉంటుంది? అతని లేదా ఆమె మొదటి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "శాశ్వత చిరునామా అతని లేదా ఆమె ప్రస్తుత చిరునామాకు భిన్నంగా ఉన్న విద్యార్థి మొదటి పేరు ఏమిటి?", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "select students.first_name from students where students.student_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### శాశ్వత చిరునామా అతని లేదా ఆమె ప్రస్తుత చిరునామాకు భిన్నంగా ఉన్న విద్యార్థి మొదటి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ప్రస్తుతం అత్యధిక సంఖ్యలో విద్యార్థులను కలిగి ఉన్న చిరునామా ఏది? చిరునామా ఐడి మరియు అన్ని పంక్తులను జాబితా చేయండి.", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ప్రస్తుతం అత్యధిక సంఖ్యలో విద్యార్థులను కలిగి ఉన్న చిరునామా ఏది? చిరునామా ఐడి మరియు అన్ని పంక్తులను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎక్కువ మంది విద్యార్థులు ఉన్న చిరునామా యొక్క ఐడి, లైన్ 1 మరియు లైన్ 2 ఏమిటి?", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , addresses.line_1  , addresses.line_2 from students join addresses on students.permanent_address_id = addresses.address_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎక్కువ మంది విద్యార్థులు ఉన్న చిరునామా యొక్క ఐడి, లైన్ 1 మరియు లైన్ 2 ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "సగటున, ట్రాన్స్క్రిప్ట్స్ ఎప్పుడు ముద్రించబడ్డాయి?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### సగటున, ట్రాన్స్క్రిప్ట్స్ ఎప్పుడు ముద్రించబడ్డాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "సగటు ట్రాన్స్క్రిప్ట్ తేదీ ఎంత?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### సగటు ట్రాన్స్క్రిప్ట్ తేదీ ఎంత? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "మొదటి ట్రాన్స్క్రిప్ట్ ఎప్పుడు విడుదల చేయబడింది? తేదీ మరియు వివరాలను జాబితా చేయండి.", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts order by transcripts.transcript_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### మొదటి ట్రాన్స్క్రిప్ట్ ఎప్పుడు విడుదల చేయబడింది? తేదీ మరియు వివరాలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ట్రాన్స్క్రిప్ట్ విడుదల యొక్క ప్రారంభ తేదీ ఏమిటి మరియు మీరు నాకు ఏ వివరాలను తెలియజేయగలరు?", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ట్రాన్స్క్రిప్ట్ విడుదల యొక్క ప్రారంభ తేదీ ఏమిటి మరియు మీరు నాకు ఏ వివరాలను తెలియజేయగలరు? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని ట్రాన్‌స్క్రిప్ట్‌లు విడుదల చేయబడ్డాయి?", "query": "select count ( * ) from transcripts", "predicted_sql": "select count ( transcripts.transcript_id ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని ట్రాన్‌స్క్రిప్ట్‌లు విడుదల చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ఎన్ని లిప్యంతరీకరణలు జాబితా చేయబడ్డాయి?", "query": "select count ( * ) from transcripts", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ఎన్ని లిప్యంతరీకరణలు జాబితా చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "చివరి ట్రాన్స్క్రిప్ట్ విడుదల తేదీ ఏమిటి?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts order by transcripts.transcript_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### చివరి ట్రాన్స్క్రిప్ట్ విడుదల తేదీ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "చివరి ట్రాన్స్క్రిప్ట్ ఎప్పుడు విడుదల చేయబడింది?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts order by transcripts.transcript_date desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### చివరి ట్రాన్స్క్రిప్ట్ ఎప్పుడు విడుదల చేయబడింది? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "వివిధ ట్రాన్‌స్క్రిప్ట్‌లలో కోర్సు నమోదు ఫలితం గరిష్టంగా ఎన్ని సార్లు చూపవచ్చు? కోర్సు నమోదు ఐడిని కూడా చూపండి.", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "select transcripts.transcript_id  , count ( student_enrolment_courses.course_id ) as course_count from transcripts join transcript_contents on transcript_contents.transcript_id = transcripts.transcript_id join student_enrolment_courses on student_enrolment_courses.student_course_id = transcript_contents.student_course_id group by transcripts.transcript_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### వివిధ ట్రాన్‌స్క్రిప్ట్‌లలో కోర్సు నమోదు ఫలితం గరిష్టంగా ఎన్ని సార్లు చూపవచ్చు? కోర్సు నమోదు ఐడిని కూడా చూపండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "వివిధ ట్రాన్‌స్క్రిప్ట్‌లలో ఒక కోర్సు ఎన్నిసార్లు చూపబడుతుంది మరియు ఆ కోర్సు నమోదు ఐడి ఎంత?", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "select transcripts.transcript_id  , count ( distinct student_enrolment_courses.course_id ) as course_count from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id join student_enrolment_courses on transcript_contents.student_course_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### వివిధ ట్రాన్‌స్క్రిప్ట్‌లలో ఒక కోర్సు ఎన్నిసార్లు చూపబడుతుంది మరియు ఆ కోర్సు నమోదు ఐడి ఎంత? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "తక్కువ సంఖ్యలో ఫలితాలను చూపే ట్రాన్స్క్రిప్ట్ తేదీని చూపండి, ఐడిని కూడా జాబితా చేయండి.", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.transcript_id from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### తక్కువ సంఖ్యలో ఫలితాలను చూపే ట్రాన్స్క్రిప్ట్ తేదీని చూపండి, ఐడిని కూడా జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అత్యల్ప ఫలితాలతో ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు id ఏమిటి?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select transcripts.transcript_id  , transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అత్యల్ప ఫలితాలతో ట్రాన్స్క్రిప్ట్ యొక్క తేదీ మరియు id ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "మాస్టర్ విద్యార్థులు మరియు బ్యాచిలర్ విద్యార్థులు ఇద్దరూ నమోదు చేసుకున్నప్పుడు సెమిస్టర్‌ను కనుగొనండి.", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### మాస్టర్ విద్యార్థులు మరియు బ్యాచిలర్ విద్యార్థులు ఇద్దరూ నమోదు చేసుకున్నప్పుడు సెమిస్టర్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "మాస్టర్స్ మరియు బ్యాచిలర్స్ విద్యార్థులను నమోదు చేసుకున్న సెమిస్టర్ ఐడి ఏమిటి?", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "select semesters.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### మాస్టర్స్ మరియు బ్యాచిలర్స్ విద్యార్థులను నమోదు చేసుకున్న సెమిస్టర్ ఐడి ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "విద్యార్థులు ప్రస్తుతం ఎన్ని విభిన్న చిరునామాల్లో నివసిస్తున్నారు?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### విద్యార్థులు ప్రస్తుతం ఎన్ని విభిన్న చిరునామాల్లో నివసిస్తున్నారు? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అక్కడ నివసిస్తున్న విద్యార్థులను కలిగి ఉన్న విభిన్న చిరునామాలు ఏమిటి?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అక్కడ నివసిస్తున్న విద్యార్థులను కలిగి ఉన్న విభిన్న చిరునామాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "అన్ని విద్యార్థి వివరాలను రివర్స్డ్ లెక్సికోగ్రాఫికల్ క్రమంలో జాబితా చేయండి.", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "select students.student_id  , students.current_address_id  , students.permanent_address_id  , students.first_name  , students.middle_name  , students.last_name  , students.cell_mobile_number  , students.email_address  , students.ssn  , students.date_first_registered  , students.date_left  , students.other_student_details from students order by students.student_id desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### అన్ని విద్యార్థి వివరాలను రివర్స్డ్ లెక్సికోగ్రాఫికల్ క్రమంలో జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "రివర్స్ ఆల్ఫాబెటికల్ ఆర్డర్‌లో విద్యార్థుల గురించి మీరు నాకు ఏ ఇతర వివరాలను చెప్పగలరు?", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### రివర్స్ ఆల్ఫాబెటికల్ ఆర్డర్‌లో విద్యార్థుల గురించి మీరు నాకు ఏ ఇతర వివరాలను చెప్పగలరు? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "h విభాగాన్ని వివరించండి.", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "select departments.department_id  , departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### h విభాగాన్ని వివరించండి. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "h పేరుతో ఉన్న విభాగానికి వివరణ ఏమిటి?", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "select departments.department_description from departments where departments.department_name = 'h'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### h పేరుతో ఉన్న విభాగానికి వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "హైతీ దేశంలో శాశ్వతంగా నివసిస్తున్న విద్యార్థుల మొదటి పేరును కనుగొనండి లేదా సెల్ ఫోన్ నంబర్ 09700166582 .", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'Haiti'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### హైతీ దేశంలో శాశ్వతంగా నివసిస్తున్న విద్యార్థుల మొదటి పేరును కనుగొనండి లేదా సెల్ ఫోన్ నంబర్ 09700166582 . \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "హైతీలో శాశ్వతంగా నివసిస్తున్న లేదా సెల్ ఫోన్ నంబర్ 09700166582 కలిగి ఉన్న విద్యార్థుల మొదటి పేర్లు ఏమిటి?", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name from students where students.cell_mobile_number = '09700166582' limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### హైతీలో శాశ్వతంగా నివసిస్తున్న లేదా సెల్ ఫోన్ నంబర్ 09700166582 కలిగి ఉన్న విద్యార్థుల మొదటి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "tvshow", "question": "అన్ని కార్టూన్‌ల శీర్షికను అక్షర క్రమంలో జాబితా చేయండి.", "query": "select title from cartoon order by title asc", "predicted_sql": "select cartoon.title from cartoon order by cartoon.title asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### అన్ని కార్టూన్‌ల శీర్షికను అక్షర క్రమంలో జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "కార్టూన్‌ల శీర్షికలు అక్షర క్రమంలో ఏవి క్రమబద్ధీకరించబడ్డాయి?", "query": "select title from cartoon order by title asc", "predicted_sql": "select cartoon.title from cartoon order by cartoon.title asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### కార్టూన్‌ల శీర్షికలు అక్షర క్రమంలో ఏవి క్రమబద్ధీకరించబడ్డాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;బెన్ జోన్స్&quot; దర్శకత్వం వహించిన అన్ని కార్టూన్‌లను జాబితా చేయండి.", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'బెన్ జోన్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;బెన్ జోన్స్&quot; దర్శకత్వం వహించిన అన్ని కార్టూన్‌లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన అన్ని కార్టూన్ల పేర్లు ఏమిటి?", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన అన్ని కార్టూన్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;జోసెఫ్ కుహర్&quot; ఎన్ని కార్టూన్లు రాశారు?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'జోసెఫ్ కుహర్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;జోసెఫ్ కుహర్&quot; ఎన్ని కార్టూన్లు రాశారు? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "జోసెఫ్ కుహ్ర్ రాసిన కార్టూన్ల సంఖ్య ఎంత?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select count ( cartoon.id ) from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### జోసెఫ్ కుహ్ర్ రాసిన కార్టూన్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "అన్ని కార్టూన్ శీర్షికలను మరియు వాటి డైరెక్టర్లను వారి ప్రసార తేదీని బట్టి జాబితా చేయండి", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "select cartoon.title  , cartoon.directed_by  , cartoon.original_air_date from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### అన్ని కార్టూన్ శీర్షికలను మరియు వాటి డైరెక్టర్లను వారి ప్రసార తేదీని బట్టి జాబితా చేయండి \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ప్రసార తేదీ ద్వారా ఆర్డర్ చేయబడిన అన్ని కార్టూన్‌ల పేరు మరియు డైరెక్టర్లు ఏమిటి?", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "select cartoon.title  , cartoon.directed_by from cartoon order by cartoon.original_air_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ప్రసార తేదీ ద్వారా ఆర్డర్ చేయబడిన అన్ని కార్టూన్‌ల పేరు మరియు డైరెక్టర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;బెన్ జోన్స్&quot; లేదా &quot;బ్రాండన్ వియెట్టి&quot; దర్శకత్వం వహించిన అన్ని కార్టూన్ల శీర్షికను జాబితా చేయండి.", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'బెన్ జోన్స్' or cartoon.directed_by = 'బ్రాండన్ వియెట్టి'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;బెన్ జోన్స్&quot; లేదా &quot;బ్రాండన్ వియెట్టి&quot; దర్శకత్వం వహించిన అన్ని కార్టూన్ల శీర్షికను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ లేదా బ్రాండన్ వియెట్టి దర్శకత్వం వహించిన అన్ని కార్టూన్‌ల శీర్షికలు ఏమిటి?", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ లేదా బ్రాండన్ వియెట్టి దర్శకత్వం వహించిన అన్ని కార్టూన్‌ల శీర్షికలు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఏ దేశంలో ఎక్కువ టీవీ ఛానెల్‌లు ఉన్నాయి? ఇది కలిగి ఉన్న దేశం మరియు టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి.", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఏ దేశంలో ఎక్కువ టీవీ ఛానెల్‌లు ఉన్నాయి? ఇది కలిగి ఉన్న దేశం మరియు టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "అత్యధిక సంఖ్యలో టీవీ ఛానెల్‌లను కలిగి ఉన్న దేశం ఏది మరియు దానిలో ఎన్ని ఉన్నాయి?", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country  , count ( tv_channel.id ) as total_channels from tv_channel group by tv_channel.country order by total_channels desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### అత్యధిక సంఖ్యలో టీవీ ఛానెల్‌లను కలిగి ఉన్న దేశం ఏది మరియు దానిలో ఎన్ని ఉన్నాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "TV ఛానెల్ పట్టికలో వివిధ సిరీస్ పేర్లు మరియు కంటెంట్‌ల సంఖ్యను జాబితా చేయండి.", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.content from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### TV ఛానెల్ పట్టికలో వివిధ సిరీస్ పేర్లు మరియు కంటెంట్‌ల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "TV ఛానెల్ పట్టికలో ఎన్ని విభిన్న సిరీస్‌లు మరియు కంటెంట్‌లు జాబితా చేయబడ్డాయి?", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select tv_channel.series_name  , tv_channel.content from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### TV ఛానెల్ పట్టికలో ఎన్ని విభిన్న సిరీస్‌లు మరియు కంటెంట్‌లు జాబితా చేయబడ్డాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; సీరియల్ పేరుతో TV ఛానెల్ యొక్క కంటెంట్ ఏమిటి?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; సీరియల్ పేరుతో TV ఛానెల్ యొక్క కంటెంట్ ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "స్కై రేడియో సిరీస్ కంటెంట్ ఏమిటి?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.content from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### స్కై రేడియో సిరీస్ కంటెంట్ ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; అనే సీరియల్ పేరుతో TV ఛానెల్ యొక్క ప్యాకేజీ ఎంపిక ఏమిటి?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; అనే సీరియల్ పేరుతో TV ఛానెల్ యొక్క ప్యాకేజీ ఎంపిక ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "స్కై రేడియో అనే సిరీస్ పేర్లతో టీవీ ఛానెల్‌ల ప్యాకేజీ ఎంపికలు ఏమిటి?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### స్కై రేడియో అనే సిరీస్ పేర్లతో టీవీ ఛానెల్‌ల ప్యాకేజీ ఎంపికలు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఎన్ని టీవీ ఛానెల్‌లు ఇంగ్లీష్ భాషను ఉపయోగిస్తున్నాయి?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.language = 'English'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఎన్ని టీవీ ఛానెల్‌లు ఇంగ్లీష్ భాషను ఉపయోగిస్తున్నాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఎన్ని టీవీ ఛానెల్‌లు ఆంగ్ల భాషను ఉపయోగిస్తున్నాయి?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.language = 'English'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఎన్ని టీవీ ఛానెల్‌లు ఆంగ్ల భాషను ఉపయోగిస్తున్నాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "తక్కువ సంఖ్యలో టీవీ ఛానెల్ ఉపయోగించిన భాషను జాబితా చేయండి. జాబితా భాష మరియు TV ఛానెల్ సంఖ్య.", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , count ( tv_channel.language ) as channel_count from tv_channel group by tv_channel.language order by channel_count asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### తక్కువ సంఖ్యలో టీవీ ఛానెల్ ఉపయోగించిన భాషను జాబితా చేయండి. జాబితా భాష మరియు TV ఛానెల్ సంఖ్య. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "అతి తక్కువ సంఖ్యలో టీవీ ఛానెల్‌లు ఏ భాషలను ఉపయోగిస్తున్నాయి మరియు ఎన్ని ఛానెల్‌లు ఉపయోగిస్తున్నాయి?", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , count ( tv_channel.id ) as channel_count from tv_channel group by tv_channel.language order by channel_count asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### అతి తక్కువ సంఖ్యలో టీవీ ఛానెల్‌లు ఏ భాషలను ఉపయోగిస్తున్నాయి మరియు ఎన్ని ఛానెల్‌లు ఉపయోగిస్తున్నాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ప్రతి భాష మరియు దానిని ఉపయోగించే టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి.", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ప్రతి భాష మరియు దానిని ఉపయోగించే టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ప్రతి భాష కోసం, దాన్ని ఉపయోగించే టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి.", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.id from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ప్రతి భాష కోసం, దాన్ని ఉపయోగించే టీవీ ఛానెల్‌ల సంఖ్యను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్!&quot; అనే కార్టూన్‌ను చూపించే టీవీ ఛానెల్ ఏది? TV ఛానెల్ యొక్క సిరీస్ పేరును జాబితా చేయండి.", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select tv_channel.series_name from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = 'ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్!'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్!&quot; అనే కార్టూన్‌ను చూపించే టీవీ ఛానెల్ ఏది? TV ఛానెల్ యొక్క సిరీస్ పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్&quot; అనే కార్టూన్‌ను చూపించే టీవీ ఛానెల్ సిరీస్ పేరు ఏమిటి?", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select tv_channel.series_name from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.title = 'ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ది రైజ్ ఆఫ్ ది బ్లూ బీటిల్&quot; అనే కార్టూన్‌ను చూపించే టీవీ ఛానెల్ సిరీస్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో చూపబడే అన్ని కార్టూన్‌ల శీర్షికను జాబితా చేయండి.", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'స్కై రేడియో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో చూపబడే అన్ని కార్టూన్‌ల శీర్షికను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో ఉన్న అన్ని కార్టూల్‌ల శీర్షిక ఏమిటి?", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'స్కై రేడియో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో ఉన్న అన్ని కార్టూల్‌ల శీర్షిక ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "రేటింగ్ ద్వారా క్రమబద్ధీకరించబడిన అన్ని టీవీ సిరీస్‌ల ఎపిసోడ్‌ను జాబితా చేయండి.", "query": "select episode from tv_series order by rating asc", "predicted_sql": "select tv_series.episode from tv_series order by tv_series.rating desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### రేటింగ్ ద్వారా క్రమబద్ధీకరించబడిన అన్ని టీవీ సిరీస్‌ల ఎపిసోడ్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "రేటింగ్‌ల ద్వారా ఆర్డర్ చేయబడిన అన్ని ఎపిసోడ్‌లు ఏమిటి?", "query": "select episode from tv_series order by rating asc", "predicted_sql": "select tv_series.episode from tv_series order by tv_series.rating desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### రేటింగ్‌ల ద్వారా ఆర్డర్ చేయబడిన అన్ని ఎపిసోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టాప్ 3 అత్యధిక రేటింగ్ ఉన్న టీవీ సిరీస్‌లను జాబితా చేయండి. TV సిరీస్ యొక్క ఎపిసోడ్ మరియు రేటింగ్‌ను జాబితా చేయండి.", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టాప్ 3 అత్యధిక రేటింగ్ ఉన్న టీవీ సిరీస్‌లను జాబితా చేయండి. TV సిరీస్ యొక్క ఎపిసోడ్ మరియు రేటింగ్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "TV సిరీస్ పట్టికలో అత్యధికంగా రేటింగ్ పొందిన 3 ఎపిసోడ్‌లు ఏమిటి మరియు ఆ రేటింగ్‌లు ఏమిటి?", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_series.episode  , tv_series.rating from tv_series order by tv_series.rating desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### TV సిరీస్ పట్టికలో అత్యధికంగా రేటింగ్ పొందిన 3 ఎపిసోడ్‌లు ఏమిటి మరియు ఆ రేటింగ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "TV సిరీస్‌లో కనీస మరియు గరిష్ట వాటా ఎంత?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select max ( tv_series.viewers_m ) from tv_series", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### TV సిరీస్‌లో కనీస మరియు గరిష్ట వాటా ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టీవీ సిరీస్‌లో గరిష్ట మరియు కనిష్ట వాటా ఎంత?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select min ( tv_series.rating ) as min_rating  , max ( tv_series.rating ) as max_rating from tv_series", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టీవీ సిరీస్‌లో గరిష్ట మరియు కనిష్ట వాటా ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ ప్రసార తేదీ ఎంత?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ ప్రసార తేదీ ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్ ఎప్పుడు ప్రసారం చేయబడింది?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్ ఎప్పుడు ప్రసారం చేయబడింది? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ వీక్లీ ర్యాంక్ ఎంత?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_series.weekly_rank from tv_series where tv_series.episode = 'ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ వీక్లీ ర్యాంక్ ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌కి వారంవారీ ర్యాంక్ ఎంత?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_series.weekly_rank from tv_series where tv_series.episode = 'ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌కి వారంవారీ ర్యాంక్ ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ టీవీ ఛానెల్ ఏమిటి? TV ఛానెల్ యొక్క సిరీస్ పేరును జాబితా చేయండి.", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_channel.series_name from tv_channel join tv_series on tv_series.channel = tv_channel.id where tv_series.episode = 'ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్‌టైమ్&quot; ఎపిసోడ్‌తో టీవీ సిరీస్ టీవీ ఛానెల్ ఏమిటి? TV ఛానెల్ యొక్క సిరీస్ పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్ ఉన్న సిరీస్ పేరు ఏమిటి?", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ఎ లవ్ ఆఫ్ ఎ లైఫ్ టైమ్&quot; ఎపిసోడ్ ఉన్న సిరీస్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో చూపబడే అన్ని టీవీ సిరీస్‌ల ఎపిసోడ్‌ను జాబితా చేయండి.", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = 'స్కై రేడియో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; అనే సిరీస్ పేరుతో TV ఛానెల్‌లో చూపబడే అన్ని టీవీ సిరీస్‌ల ఎపిసోడ్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;స్కై రేడియో&quot; అనే టీవీ సిరీస్‌కి సంబంధించిన ఎపిసోడ్ ఏమిటి?", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = 'స్కై రేడియో'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;స్కై రేడియో&quot; అనే టీవీ సిరీస్‌కి సంబంధించిన ఎపిసోడ్ ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "జాబితా చేయబడిన ప్రతి దర్శకులు దర్శకత్వం వహించిన కార్టూన్‌ల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "select count ( cartoon.id ) from cartoon where cartoon.directed_by = 'దర్శకుడు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### జాబితా చేయబడిన ప్రతి దర్శకులు దర్శకత్వం వహించిన కార్టూన్‌ల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఒక్కో దర్శకుడు ఎన్ని కార్టూన్లు సృష్టించాడు?", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "select count ( distinct cartoon.id ) from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఒక్కో దర్శకుడు ఎన్ని కార్టూన్లు సృష్టించాడు? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఇటీవల ప్రసారం చేయబడిన కార్టూన్ యొక్క ప్రొడక్షన్ కోడ్ మరియు ఛానెల్‌ని కనుగొనండి.", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select cartoon.production_code  , cartoon.channel from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఇటీవల ప్రసారం చేయబడిన కార్టూన్ యొక్క ప్రొడక్షన్ కోడ్ మరియు ఛానెల్‌ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఇటీవలి కార్టూన్ యొక్క ప్రొడక్షన్ కోడ్ మరియు ఛానెల్ ఏమిటి?", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select cartoon.production_code  , cartoon.channel from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఇటీవలి కార్టూన్ యొక్క ప్రొడక్షన్ కోడ్ మరియు ఛానెల్ ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "హై డెఫినిషన్ టీవీని కలిగి ఉన్న టీవీ ఛానెల్ యొక్క ప్యాకేజీ ఎంపిక మరియు సిరీస్ పేరును కనుగొనండి.", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "select tv_channel.package_option  , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### హై డెఫినిషన్ టీవీని కలిగి ఉన్న టీవీ ఛానెల్ యొక్క ప్యాకేజీ ఎంపిక మరియు సిరీస్ పేరును కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "హై డెఫినిషన్ టీవీకి మద్దతిచ్చే టీవీ ఛానెల్ కోసం ప్యాకేజీ ఎంపికలు మరియు సిరీస్ పేరు ఏమిటి?", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "select tv_channel.package_option  , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### హై డెఫినిషన్ టీవీకి మద్దతిచ్చే టీవీ ఛానెల్ కోసం ప్యాకేజీ ఎంపికలు మరియు సిరీస్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టాడ్ కేసీ రాసిన కొన్ని కార్టూన్‌లను ఏ దేశాల టీవీ ఛానెల్‌లు ప్లే చేస్తున్నాయి?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టాడ్ కేసీ రాసిన కొన్ని కార్టూన్‌లను ఏ దేశాల టీవీ ఛానెల్‌లు ప్లే చేస్తున్నాయి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టాడ్ కేసీ రాసిన టీవీలో కార్టూన్లు ఉన్న దేశాలు ఏవి?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టాడ్ కేసీ రాసిన టీవీలో కార్టూన్లు ఉన్న దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టాడ్ కేసీ రాసిన కార్టూన్‌లను ఏ దేశాల టీవీ ఛానెల్‌లు ప్లే చేయడం లేదు?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టాడ్ కేసీ రాసిన కార్టూన్‌లను ఏ దేశాల టీవీ ఛానెల్‌లు ప్లే చేయడం లేదు? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "టాడ్ కేసీ రాసిన కార్టూన్లు ఆడని దేశాలు ఏవి?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### టాడ్ కేసీ రాసిన కార్టూన్లు ఆడని దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ మరియు మైఖేల్ చాంగ్ దర్శకత్వం వహించిన కొన్ని కార్టూన్‌లను ప్లే చేస్తున్న టీవీ ఛానెల్ యొక్క సిరీస్ పేరు మరియు దేశాన్ని కనుగొనాలా?", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.series_name  , tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' and cartoon.written_by = 'Michael Chang'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ మరియు మైఖేల్ చాంగ్ దర్శకత్వం వహించిన కొన్ని కార్టూన్‌లను ప్లే చేస్తున్న టీవీ ఛానెల్ యొక్క సిరీస్ పేరు మరియు దేశాన్ని కనుగొనాలా? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లు మరియు మైఖేల్ చాంగ్ దర్శకత్వం వహించిన కార్టూన్‌లను ప్లే చేస్తున్న అన్ని టీవీ ఛానెల్‌ల సిరీస్ పేరు మరియు దేశం ఏమిటి?", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.series_name  , tv_channel.country from tv_channel inner join tv_series on tv_series.channel = tv_channel.id inner join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Michael Chang'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లు మరియు మైఖేల్ చాంగ్ దర్శకత్వం వహించిన కార్టూన్‌లను ప్లే చేస్తున్న అన్ని టీవీ ఛానెల్‌ల సిరీస్ పేరు మరియు దేశం ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఇంగ్లీష్ ఉపయోగించని టీవీ ఛానెల్‌ల పిక్సెల్ కారక నిష్పత్తి మరియు దేశాన్ని కనుగొనండి.", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.country from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఇంగ్లీష్ ఉపయోగించని టీవీ ఛానెల్‌ల పిక్సెల్ కారక నిష్పత్తి మరియు దేశాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ఇంగ్లీష్ ఉపయోగించని అన్ని టీవీ ఛానెల్‌లకు పిక్సెల్ కారక నిష్పత్తి మరియు మూలం దేశం ఎంత?", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.country from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ఇంగ్లీష్ ఉపయోగించని అన్ని టీవీ ఛానెల్‌లకు పిక్సెల్ కారక నిష్పత్తి మరియు మూలం దేశం ఎంత? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "రెండు కంటే ఎక్కువ టీవీ ఛానెల్‌లు ఉన్న దేశాల నుండి టీవీ ఛానెల్‌ల ఐడిని కనుగొనండి.", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id from tv_channel group by tv_channel.country having count ( tv_channel.id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### రెండు కంటే ఎక్కువ టీవీ ఛానెల్‌లు ఉన్న దేశాల నుండి టీవీ ఛానెల్‌ల ఐడిని కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "2 కంటే ఎక్కువ టీవీ ఛానెల్‌లను కలిగి ఉన్న అన్ని టీవీ ఛానెల్‌ల ఐడీలు ఏమిటి?", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### 2 కంటే ఎక్కువ టీవీ ఛానెల్‌లను కలిగి ఉన్న అన్ని టీవీ ఛానెల్‌ల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన ఏ కార్టూన్‌ను ప్లే చేయని టీవీ ఛానెల్‌ల ఐడిని కనుగొనండి.", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title  , cartoon.channel from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by  != 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన ఏ కార్టూన్‌ను ప్లే చేయని టీవీ ఛానెల్‌ల ఐడిని కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లు లేని టీవీ ఛానెల్‌ల ఐడీలు ఏమిటి?", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select tv_channel.id from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by <> 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లు లేని టీవీ ఛానెల్‌ల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్ లేని టీవీ ఛానెల్ యొక్క ప్యాకేజీ ఎంపికను కనుగొనండి.", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "select tv_channel.package_option from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్ లేని టీవీ ఛానెల్ యొక్క ప్యాకేజీ ఎంపికను కనుగొనండి. \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లను ప్లే చేయని అన్ని టీవీ ఛానెల్‌ల ప్యాకేజీ ఎంపికలు ఏమిటి?", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "select tv_channel.package_option from tv_channel left join cartoon on cartoon.channel = tv_channel.id where cartoon.directed_by <> 'Ben Jones'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### బెన్ జోన్స్ దర్శకత్వం వహించిన కార్టూన్‌లను ప్లే చేయని అన్ని టీవీ ఛానెల్‌ల ప్యాకేజీ ఎంపికలు ఏమిటి? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవాళ్లు ఎంతమంది?", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( distinct poker_player.poker_player_id ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవాళ్లు ఎంతమంది? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పోకర్ ప్లేయర్ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( poker_player.poker_player_id ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పోకర్ ప్లేయర్ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవారి ఆదాయాలను అవరోహణ క్రమంలో జాబితా చేయండి.", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవారి ఆదాయాలను అవరోహణ క్రమంలో జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవారి సంపాదన, విలువ ప్రకారం అవరోహణ ఆర్డర్‌లు ఏమిటి?", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవారి సంపాదన, విలువ ప్రకారం అవరోహణ ఆర్డర్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పోకర్ ప్లేయర్‌ల యొక్క చివరి పట్టికలు మరియు ఉత్తమ ముగింపులను జాబితా చేయండి.", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పోకర్ ప్లేయర్‌ల యొక్క చివరి పట్టికలు మరియు ఉత్తమ ముగింపులను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అన్ని పోకర్ ప్లేయర్‌ల కోసం తయారు చేయబడిన చివరి పట్టికలు మరియు ఉత్తమ ముగింపులు ఏమిటి?", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అన్ని పోకర్ ప్లేయర్‌ల కోసం తయారు చేయబడిన చివరి పట్టికలు మరియు ఉత్తమ ముగింపులు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవారి సగటు సంపాదన ఎంత?", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవారి సగటు సంపాదన ఎంత? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అన్ని పోకర్ ప్లేయర్‌లలో సగటు ఆదాయాన్ని తిరిగి ఇవ్వండి.", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select sum ( poker_player.earnings ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అన్ని పోకర్ ప్లేయర్‌లలో సగటు ఆదాయాన్ని తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అత్యధిక సంపాదన కలిగిన పోకర్ ప్లేయర్ యొక్క డబ్బు ర్యాంక్ ఎంత?", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select max ( poker_player.money_rank ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అత్యధిక సంపాదన కలిగిన పోకర్ ప్లేయర్ యొక్క డబ్బు ర్యాంక్ ఎంత? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అత్యధిక సంపాదనతో ఆటగాడి డబ్బు ర్యాంక్‌ను తిరిగి ఇవ్వండి.", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అత్యధిక సంపాదనతో ఆటగాడి డబ్బు ర్యాంక్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "200000 కంటే తక్కువ సంపాదనతో పోకర్ ప్లేయర్‌లలో తయారు చేయబడిన తుది పట్టికల గరిష్ట సంఖ్య ఎంత?", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select count ( * ) from poker_player where earnings < 200000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 200000 కంటే తక్కువ సంపాదనతో పోకర్ ప్లేయర్‌లలో తయారు చేయబడిన తుది పట్టికల గరిష్ట సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "200000 కంటే తక్కువ సంపాదన ఉన్న పోకర్ ప్లేయర్‌లందరిలో రూపొందించిన గరిష్ట తుది పట్టికలను తిరిగి ఇవ్వండి.", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.earnings < 200000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 200000 కంటే తక్కువ సంపాదన ఉన్న పోకర్ ప్లేయర్‌లందరిలో రూపొందించిన గరిష్ట తుది పట్టికలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవారి పేర్లు ఏమిటి?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవారి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అన్ని పోకర్ ప్లేయర్ల పేర్లను తిరిగి ఇవ్వండి.", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అన్ని పోకర్ ప్లేయర్ల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "300000 కంటే ఎక్కువ సంపాదన ఉన్న పేకాట ఆడేవారి పేర్లు ఏమిటి?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 300000 కంటే ఎక్కువ సంపాదన ఉన్న పేకాట ఆడేవారి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "300000 కంటే ఎక్కువ సంపాదన ఉన్న పేకాట ఆడేవారి పేర్లను ఇవ్వండి.", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 300000 కంటే ఎక్కువ సంపాదన ఉన్న పేకాట ఆడేవారి పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఆరోహణ క్రమంలో తయారు చేయబడిన చివరి పట్టికల ద్వారా ఆర్డర్ చేయబడిన పోకర్ ఆటగాళ్ల పేర్లను జాబితా చేయండి.", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player order by poker_player.final_table_made asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఆరోహణ క్రమంలో తయారు చేయబడిన చివరి పట్టికల ద్వారా ఆర్డర్ చేయబడిన పోకర్ ఆటగాళ్ల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడేవారి పేర్లు ఏమిటి, వారు తయారు చేసిన చివరి పట్టికల సంఖ్యను బట్టి ఆరోహణను ఆర్డర్ చేస్తారు?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.best_finish desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడేవారి పేర్లు ఏమిటి, వారు తయారు చేసిన చివరి పట్టికల సంఖ్యను బట్టి ఆరోహణను ఆర్డర్ చేస్తారు? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అత్యల్ప సంపాదన కలిగిన పేకాట ఆడేవారి పుట్టిన తేదీ ఏది?", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select people.birth_date from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అత్యల్ప సంపాదన కలిగిన పేకాట ఆడేవారి పుట్టిన తేదీ ఏది? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అతి తక్కువ సంపాదనతో పోకర్ ప్లేయర్ పుట్టిన తేదీని తిరిగి ఇవ్వండి.", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అతి తక్కువ సంపాదనతో పోకర్ ప్లేయర్ పుట్టిన తేదీని తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఎత్తైన పోకర్ ప్లేయర్ డబ్బు ర్యాంక్ ఎంత?", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select max ( money_rank ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఎత్తైన పోకర్ ప్లేయర్ డబ్బు ర్యాంక్ ఎంత? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అత్యధిక ఎత్తుతో పోకర్ ప్లేయర్ యొక్క డబ్బు ర్యాంక్‌ను తిరిగి ఇవ్వండి.", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.money_rank from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అత్యధిక ఎత్తుతో పోకర్ ప్లేయర్ యొక్క డబ్బు ర్యాంక్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "200 కంటే ఎక్కువ ఎత్తు ఉన్న పేకాట ఆడేవారి సగటు సంపాదన ఎంత?", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id where people.height > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 200 కంటే ఎక్కువ ఎత్తు ఉన్న పేకాట ఆడేవారి సగటు సంపాదన ఎంత? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "200 కంటే ఎక్కువ ఎత్తు ఉన్న పేకాట ఆడేవారి సగటు ఆదాయాలను ఇవ్వండి.", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id where people.height > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### 200 కంటే ఎక్కువ ఎత్తు ఉన్న పేకాట ఆడేవారి సగటు ఆదాయాలను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఆదాయాల అవరోహణ క్రమంలో పేకాట ఆడేవారి పేర్లు ఏమిటి?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఆదాయాల అవరోహణ క్రమంలో పేకాట ఆడేవారి పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పోకర్ ప్లేయర్‌ల పేర్లను వారి ఆదాయాల అవరోహణ ఆధారంగా క్రమబద్ధీకరించండి.", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పోకర్ ప్లేయర్‌ల పేర్లను వారి ఆదాయాల అవరోహణ ఆధారంగా క్రమబద్ధీకరించండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ప్రజల యొక్క విభిన్న జాతీయతలు మరియు ప్రతి దేశం నుండి సంబంధిత వ్యక్తుల సంఖ్య ఏమిటి?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select count ( distinct people.nationality ) as total_nationalities from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ప్రజల యొక్క విభిన్న జాతీయతలు మరియు ప్రతి దేశం నుండి సంబంధిత వ్యక్తుల సంఖ్య ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఒక్కో జాతీయతలో ఎంత మంది ఉన్నారు?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select count ( distinct nationality ) from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఒక్కో జాతీయతలో ఎంత మంది ఉన్నారు? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ప్రజలలో అత్యంత సాధారణ జాతీయత ఏమిటి?", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select people.nationality from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ప్రజలలో అత్యంత సాధారణ జాతీయత ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ప్రజలందరికీ అత్యంత సాధారణమైన జాతీయతను ఇవ్వండి.", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select people.nationality from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ప్రజలందరికీ అత్యంత సాధారణమైన జాతీయతను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "కనీసం ఇద్దరు వ్యక్తులు పంచుకునే జాతీయతలు ఏమిటి?", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.nationality from poker_player join people on poker_player.people_id = people.people_id limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### కనీసం ఇద్దరు వ్యక్తులు పంచుకునే జాతీయతలు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఇద్దరు లేదా అంతకంటే ఎక్కువ మంది వ్యక్తులు ఉన్న జాతీయతలను తిరిగి ఇవ్వండి.", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.nationality from poker_player join people on poker_player.people_id = people.people_id group by people.nationality having count ( * ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఇద్దరు లేదా అంతకంటే ఎక్కువ మంది వ్యక్తులు ఉన్న జాతీయతలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేరు యొక్క ఆరోహణ అక్షర క్రమంలో వ్యక్తుల పేర్లు మరియు పుట్టిన తేదీలను జాబితా చేయండి.", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by people.name asc  , people.birth_date asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేరు యొక్క ఆరోహణ అక్షర క్రమంలో వ్యక్తుల పేర్లు మరియు పుట్టిన తేదీలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "అక్షర క్రమంలో వారి పేర్లతో ఆర్డర్ చేయబడిన వ్యక్తుల పేర్లు మరియు పుట్టిన తేదీలు ఏమిటి?", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by people.name asc  , people.birth_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### అక్షర క్రమంలో వారి పేర్లతో ఆర్డర్ చేయబడిన వ్యక్తుల పేర్లు మరియు పుట్టిన తేదీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "&quot;రష్యా&quot; జాతీయత లేని వ్యక్తుల పేర్లను చూపండి.", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where people.nationality  != 'రష్యా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### &quot;రష్యా&quot; జాతీయత లేని వ్యక్తుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "రష్యా నుండి రాని వ్యక్తుల పేర్లు ఏమిటి?", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from people where people.nationality = 'రష్యా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### రష్యా నుండి రాని వ్యక్తుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడని వ్యక్తుల పేర్లను జాబితా చేయండి.", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడని వ్యక్తుల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "పేకాట ఆడని వ్యక్తుల పేర్లు ఏమిటి?", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### పేకాట ఆడని వ్యక్తుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ఎన్ని విభిన్న జాతీయతలు ఉన్నాయి?", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select distinct nationality from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ఎన్ని విభిన్న జాతీయతలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "వివిధ జాతీయుల సంఖ్యను లెక్కించండి.", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select count ( distinct people.nationality ) from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### వివిధ జాతీయుల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "voter_1", "question": "ఎన్ని రాష్ట్రాలు ఉన్నాయి?", "query": "select count ( * ) from area_code_state", "predicted_sql": "select count ( distinct state ) from area_code_state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ఎన్ని రాష్ట్రాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "పోటీదారు పేరు అవరోహణ ద్వారా ఆర్డర్ చేయబడిన పోటీదారు సంఖ్యలు మరియు పేర్లను జాబితా చేయండి.", "query": "select contestant_number , contestant_name from contestants order by contestant_name desc", "predicted_sql": "select contestants.contestant_name  , contestants.contestant_number from contestants order by contestants.contestant_number asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### పోటీదారు పేరు అవరోహణ ద్వారా ఆర్డర్ చేయబడిన పోటీదారు సంఖ్యలు మరియు పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ఓటు ఐడిలు, ఫోన్ నంబర్లు మరియు అన్ని ఓట్ల రాష్ట్రాలను జాబితా చేయండి.", "query": "select vote_id , phone_number , state from votes", "predicted_sql": "select votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from votes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ఓటు ఐడిలు, ఫోన్ నంబర్లు మరియు అన్ని ఓట్ల రాష్ట్రాలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ఏరియా కోడ్‌ల గరిష్ట మరియు కనిష్ట విలువలు ఏమిటి?", "query": "select max ( area_code ) , min ( area_code ) from area_code_state", "predicted_sql": "select min ( area_code_state.area_code ) as min_area_code  , max ( area_code_state.area_code ) as max_area_code from area_code_state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ఏరియా కోడ్‌ల గరిష్ట మరియు కనిష్ట విలువలు ఏమిటి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "రాష్ట్ర &#39;CA&#39; నుండి సృష్టించబడిన ఓట్ల చివరి తేదీ ఏది?", "query": "select max ( created ) from votes where state = 'CA'", "predicted_sql": "select max ( created ) from votes where state = 'CA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### రాష్ట్ర &#39;CA&#39; నుండి సృష్టించబడిన ఓట్ల చివరి తేదీ ఏది? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "&#39;జెస్సీ అలోవే&#39; లేని పోటీదారుల పేర్లు ఏమిటి", "query": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'", "predicted_sql": "select contestants.contestant_name from contestants left join votes on contestants.contestant_number = votes.contestant_number where votes.contestant_number is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### &#39;జెస్సీ అలోవే&#39; లేని పోటీదారుల పేర్లు ఏమిటి \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ప్రత్యేక రాష్ట్రాలు ఏమిటి మరియు అన్ని ఓట్ల సమయాన్ని ఏర్పరుస్తాయి?", "query": "select distinct state , created from votes", "predicted_sql": "select area_code_state.state  , count ( votes.created ) as total_votes from area_code_state join votes on votes.state = area_code_state.state group by area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ప్రత్యేక రాష్ట్రాలు ఏమిటి మరియు అన్ని ఓట్ల సమయాన్ని ఏర్పరుస్తాయి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "కనీసం రెండు ఓట్లను కలిగి ఉన్న పోటీదారుల సంఖ్యలు మరియు పేర్లు ఏమిటి?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### కనీసం రెండు ఓట్లను కలిగి ఉన్న పోటీదారుల సంఖ్యలు మరియు పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ఓటు వేసిన పోటీదారులందరిలో, కనీసం ఓట్లు పొందిన పోటీదారుడి సంఖ్య మరియు పేరు ఏమిటి?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants join votes on votes.contestant_number = contestants.contestant_number where votes.created is not null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ఓటు వేసిన పోటీదారులందరిలో, కనీసం ఓట్లు పొందిన పోటీదారుడి సంఖ్య మరియు పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "రాష్ట్రం &#39;NY&#39; లేదా &#39;CA&#39; నుండి వచ్చిన ఓట్ల సంఖ్య ఎంత?", "query": "select count ( * ) from votes where state = 'NY' or state = 'CA'", "predicted_sql": "select count ( votes.vote_id ) from votes join area_code_state on votes.state = area_code_state.state where area_code_state.state = 'NY' or area_code_state.state = 'CA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### రాష్ట్రం &#39;NY&#39; లేదా &#39;CA&#39; నుండి వచ్చిన ఓట్ల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ఎంత మంది పోటీదారులు ఓటు వేయలేదు?", "query": "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )", "predicted_sql": "select count ( distinct contestants.contestant_number ) from contestants left join votes on contestants.contestant_number = votes.contestant_number where votes.contestant_number is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ఎంత మంది పోటీదారులు ఓటు వేయలేదు? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "అత్యధిక ఓటర్లు ఓటు వేసిన ఏరియా కోడ్ ఏది?", "query": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1", "predicted_sql": "select area_code_state.area_code from area_code_state join votes on votes.state = area_code_state.state group by area_code_state.area_code order by count ( votes.vote_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### అత్యధిక ఓటర్లు ఓటు వేసిన ఏరియా కోడ్ ఏది? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "&#39;తబాతా గెహ్లింగ్&#39; అనే పోటీదారునికి వచ్చిన ఓట్ల సృష్టి తేదీలు, రాష్ట్రాలు మరియు ఫోన్ నంబర్‌లు ఏమిటి?", "query": "select votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling'", "predicted_sql": "select votes.created  , votes.state  , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'తబాతా గెహ్లింగ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### &#39;తబాతా గెహ్లింగ్&#39; అనే పోటీదారునికి వచ్చిన ఓట్ల సృష్టి తేదీలు, రాష్ట్రాలు మరియు ఫోన్ నంబర్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "పోటీదారు &#39;తబాతా గెహ్లింగ్&#39; మరియు పోటీదారు &#39;కెల్లీ క్లాస్&#39; రెండింటికీ ఓటర్లు ఓటు వేసిన ప్రాంత కోడ్‌లను జాబితా చేయండి.", "query": "select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Tabatha Gehling' intersect select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Kelly Clauss'", "predicted_sql": "select area_code_state.area_code  , area_code_state.state from area_code_state join contestants on votes.contestant_number = contestants.contestant_number join votes on votes.state = area_code_state.state where contestants.contestant_name = 'తబాతా గెహ్లింగ్' or contestants.contestant_name = 'కెల్లీ క్లాస్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### పోటీదారు &#39;తబాతా గెహ్లింగ్&#39; మరియు పోటీదారు &#39;కెల్లీ క్లాస్&#39; రెండింటికీ ఓటర్లు ఓటు వేసిన ప్రాంత కోడ్‌లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "&#39;అల్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న పోటీదారుల పేర్లను తిరిగి ఇవ్వండి.", "query": "select contestant_name from contestants where contestant_name like '%al%'", "predicted_sql": "select contestants.contestant_name from contestants where contestants.contestant_name like '%అల్%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### &#39;అల్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న పోటీదారుల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "world_1", "question": "1950 తర్వాత స్వతంత్రం పొందిన అన్ని దేశాల పేర్లు ఏమిటి?", "query": "select name from country where indepyear > 1950", "predicted_sql": "select country.name from country where country.indepyear > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 1950 తర్వాత స్వతంత్రం పొందిన అన్ని దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "1950 తర్వాత స్థాపించబడిన దేశాల పేర్లను ఇవ్వండి.", "query": "select name from country where indepyear > 1950", "predicted_sql": "select country.name from country where country.indepyear > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 1950 తర్వాత స్థాపించబడిన దేశాల పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఎన్ని దేశాలు రిపబ్లిక్‌ను తమ ప్రభుత్వ రూపంగా కలిగి ఉన్నాయి?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "select count ( distinct country.name ) from country where country.governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఎన్ని దేశాలు రిపబ్లిక్‌ను తమ ప్రభుత్వ రూపంగా కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "రిపబ్లిక్‌లుగా ఉన్న ప్రభుత్వాలు ఎన్ని దేశాల్లో ఉన్నాయి?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "select count ( distinct country.governmentform ) from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### రిపబ్లిక్‌లుగా ఉన్న ప్రభుత్వాలు ఎన్ని దేశాల్లో ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "కరేబియన్ ప్రాంతంలోని దేశాల మొత్తం ఉపరితల వైశాల్యం ఎంత?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select sum ( surfacearea ) from country where continent = 'Caribbean'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### కరేబియన్ ప్రాంతంలోని దేశాల మొత్తం ఉపరితల వైశాల్యం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "కరీబియన్‌లోని కౌంటైర్‌లు కలిసి ఎంత ఉపరితల వైశాల్యాన్ని కలిగి ఉన్నాయి?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select count ( distinct country.continent ) from country where country.continent = 'Caribbean'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### కరీబియన్‌లోని కౌంటైర్‌లు కలిసి ఎంత ఉపరితల వైశాల్యాన్ని కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అంగుయిలా ఏ ఖండంలో ఉంది?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select country.continent from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అంగుయిలా ఏ ఖండంలో ఉంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అంగుయిలా చెందిన ఖండం పేరు ఏమిటి?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select name from sqlite_sequence", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అంగుయిలా చెందిన ఖండం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "కాబూల్ నగరం ఏ ప్రాంతంలో ఉంది?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select city.district from city where city.name = 'కాబూల్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### కాబూల్ నగరం ఏ ప్రాంతంలో ఉంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "కాబూల్ ఏ ప్రాంతంలో ఉంది?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select country.name from country where country.capital = ( select city.id from city where city.name = 'Kabul' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### కాబూల్ ఏ ప్రాంతంలో ఉంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అరుబాలో ఏ భాష అత్యంత ప్రజాదరణ పొందింది?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అరుబాలో ఏ భాష అత్యంత ప్రజాదరణ పొందింది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అరుబాలో ఏ భాష ఎక్కువగా మాట్లాడతారు?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అరుబాలో ఏ భాష ఎక్కువగా మాట్లాడతారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "బ్రెజిల్‌లో జనాభా మరియు జీవన కాలపు అంచనాలు ఏమిటి?", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select country.population  , country.lifeexpectancy from country where country.name = 'Brazil'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### బ్రెజిల్‌లో జనాభా మరియు జీవన కాలపు అంచనాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "నాకు బ్రెజిల్ జనాభా మరియు ఆయుర్దాయం ఇవ్వండి.", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select country.population  , country.lifeexpectancy from country where country.name = 'Brazil'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### నాకు బ్రెజిల్ జనాభా మరియు ఆయుర్దాయం ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అంగోలా ప్రాంతం మరియు జనాభా ఎంత?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select country.name  , country.population from country where country.name = 'అంగోలా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అంగోలా ప్రాంతం మరియు జనాభా ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అంగోలా ఏ ప్రాంతానికి చెందినది మరియు దాని జనాభా ఎంత?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select country.name  , country.population from country where country.code = 'AGO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అంగోలా ఏ ప్రాంతానికి చెందినది మరియు దాని జనాభా ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "మధ్య ఆఫ్రికా ప్రాంతంలోని దేశాల సగటు ఆయుర్దాయం ఎంత?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select country.lifeexpectancy from country where country.continent = 'Africa' and country.region = 'Central Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### మధ్య ఆఫ్రికా ప్రాంతంలోని దేశాల సగటు ఆయుర్దాయం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "మధ్య ఆఫ్రికాలో ప్రజల సగటు ఆయుర్దాయం ఎంతకాలం ఉంటుంది?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select country.lifeexpectancy from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### మధ్య ఆఫ్రికాలో ప్రజల సగటు ఆయుర్దాయం ఎంతకాలం ఉంటుంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో అతి తక్కువ ఆయుర్దాయం ఉన్న దేశం పేరు ఏమిటి?", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.lifeexpectancy = ( select min ( country.lifeexpectancy ) from country where country.continent = 'Asia' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో అతి తక్కువ ఆయుర్దాయం ఉన్న దేశం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో అత్యల్ప ఆయుర్దాయం ఉన్న దేశం పేరు చెప్పండి.", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.lifeexpectancy = ( select min ( country.lifeexpectancy ) from country where country.continent = 'Asia' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో అత్యల్ప ఆయుర్దాయం ఉన్న దేశం పేరు చెప్పండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో మొత్తం జనాభా మరియు గరిష్ట GNP ఎంత?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select sum ( country.population ) as total_population  , max ( country.gnp ) as max_gnp from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో మొత్తం జనాభా మరియు గరిష్ట GNP ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో ఎంత మంది ప్రజలు నివసిస్తున్నారు మరియు వారిలో అతిపెద్ద GNP ఏది?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select count ( * ) as population_count  , max ( country.gnp ) as max_gnp from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో ఎంత మంది ప్రజలు నివసిస్తున్నారు మరియు వారిలో అతిపెద్ద GNP ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "రిపబ్లిక్‌లుగా ఉన్న ఆఫ్రికన్ దేశాలలో సగటు ఆయుర్దాయం ఎంత?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select country.name  , country.lifeexpectancy from country where country.continent = 'Africa' and country.governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### రిపబ్లిక్‌లుగా ఉన్న ఆఫ్రికన్ దేశాలలో సగటు ఆయుర్దాయం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "రిపబ్లిక్‌లుగా ఉన్న ఆఫ్రికాలోని దేశాల సగటు ఆయుర్దాయం చెప్పండి?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select country.name  , country.lifeexpectancy from country where country.continent = 'Africa' and country.governmentform like '%Republic%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### రిపబ్లిక్‌లుగా ఉన్న ఆఫ్రికాలోని దేశాల సగటు ఆయుర్దాయం చెప్పండి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియా మరియు యూరప్ ఖండాల మొత్తం ఉపరితల వైశాల్యం ఎంత?", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select continent  , sum ( surfacearea ) as total_surfacearea from country where continent = 'Asia' or continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియా మరియు యూరప్ ఖండాల మొత్తం ఉపరితల వైశాల్యం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియా లేదా ఐరోపాలోని దేశాలు కవర్ చేసిన మొత్తం ఉపరితల వైశాల్యాన్ని ఇవ్వండి.", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select country.name  , country.continent  , country.surfacearea from country where country.continent = 'Asia' or country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియా లేదా ఐరోపాలోని దేశాలు కవర్ చేసిన మొత్తం ఉపరితల వైశాల్యాన్ని ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "గెల్డర్‌ల్యాండ్ జిల్లాలో ఎంత మంది ప్రజలు నివసిస్తున్నారు?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "select count ( * ) from city where city.district = 'గెల్డర్‌ల్యాండ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### గెల్డర్‌ల్యాండ్ జిల్లాలో ఎంత మంది ప్రజలు నివసిస్తున్నారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "గెల్డర్‌ల్యాండ్ జిల్లా మొత్తం జనాభా ఎంత?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "select sum ( city.population ) from city where city.district = 'గెల్డర్‌ల్యాండ్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### గెల్డర్‌ల్యాండ్ జిల్లా మొత్తం జనాభా ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "US భూభాగంలో ప్రభుత్వం ఉన్న అన్ని దేశాలలో సగటు GNP మరియు మొత్తం జనాభా ఎంత?", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select sum ( country.gnp ) as total_gnp  , sum ( country.population ) as total_population from country where country.governmentform = 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 ( US ) | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### US భూభాగంలో ప్రభుత్వం ఉన్న అన్ని దేశాలలో సగటు GNP మరియు మొత్తం జనాభా ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "US భూభాగంగా పరిగణించబడే దేశాల సగటు GNP మరియు మొత్తం జనాభాను ఇవ్వండి.", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select country.name  , country.gnp  , country.population from country where country.continent = 'North America' and country.gnp > 1000000000 and country.population > 50000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 ( US ) | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### US భూభాగంగా పరిగణించబడే దేశాల సగటు GNP మరియు మొత్తం జనాభాను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రపంచంలో ఎన్ని ప్రత్యేక భాషలు మాట్లాడుతున్నారు?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రపంచంలో ఎన్ని ప్రత్యేక భాషలు మాట్లాడుతున్నారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రపంచవ్యాప్తంగా ఉపయోగించే విభిన్న భాషల సంఖ్య ఎంత?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రపంచవ్యాప్తంగా ఉపయోగించే విభిన్న భాషల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్రికాలో ఎన్ని రకాల ప్రభుత్వాలు ఉన్నాయి?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select count ( distinct governmentform ) from country where continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్రికాలో ఎన్ని రకాల ప్రభుత్వాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్రికాలో ఎన్ని రకాల ప్రభుత్వాలు ఉన్నాయి?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select count ( distinct governmentform ) from country where continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్రికాలో ఎన్ని రకాల ప్రభుత్వాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అరుబాలో ఉపయోగించిన మొత్తం భాషల సంఖ్య ఎంత?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) as total_languages from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అరుబాలో ఉపయోగించిన మొత్తం భాషల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అరుబాలో ఎన్ని భాషలు మాట్లాడతారు?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అరుబాలో ఎన్ని భాషలు మాట్లాడతారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్ఘనిస్తాన్‌లో ఎన్ని అధికారిక భాషలు ఉన్నాయి?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select count ( * ) from countrylanguage where isofficial = 'T' and countrycode = 'AFG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్ఘనిస్తాన్‌లో ఎన్ని అధికారిక భాషలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్ఘనిస్తాన్‌లో ఎన్ని అధికారిక భాషలు మాట్లాడతారు?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select count ( * ) from countrylanguage where isofficial = 'T' and countrycode = 'AFG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్ఘనిస్తాన్‌లో ఎన్ని అధికారిక భాషలు మాట్లాడతారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక భాషలు మాట్లాడే దేశం పేరు ఏమిటి?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by country.name having count ( countrylanguage.language ) = ( select max ( language_count ) from ( select count ( countrylanguage.language ) as language_count from countrylanguage group by countrylanguage.countrycode ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక భాషలు మాట్లాడే దేశం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక భాషలను ఉపయోగించే దేశం పేరును పేర్కొనండి.", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' group by country.name having count ( countrylanguage.language ) > 5 order by count ( countrylanguage.language ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక భాషలను ఉపయోగించే దేశం పేరును పేర్కొనండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యంత వైవిధ్యమైన భాషలను కలిగి ఉన్న ఖండం ఏది?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.countrycode having count ( distinct countrylanguage.language ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యంత వైవిధ్యమైన భాషలను కలిగి ఉన్న ఖండం ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక భాషలు మాట్లాడే ఖండం ఏది?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language having count ( * ) > 5 order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక భాషలు మాట్లాడే ఖండం ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఎన్ని దేశాలు ఇంగ్లీష్ మరియు డచ్ రెండూ మాట్లాడతాయి?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "select count ( distinct country.code ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language in ( 'English'  , 'Dutch' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఎన్ని దేశాలు ఇంగ్లీష్ మరియు డచ్ రెండూ మాట్లాడతాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మరియు డచ్ ఉపయోగించే దేశాల సంఖ్య ఎంత?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మరియు డచ్ ఉపయోగించే దేశాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండింటినీ మాట్లాడే దేశాల పేర్లు ఏమిటి?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "select country.name from country where country.continent = 'Europe' or country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండింటినీ మాట్లాడే దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండు మాట్లాడే దేశాల పేర్లను ఇవ్వండి.", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండు మాట్లాడే దేశాల పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండూ అధికారిక భాషలుగా ఉన్న దేశాల పేర్లు ఏమిటి?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' and countrylanguage.language in ( 'English'  , 'French' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మరియు ఫ్రెంచ్ రెండూ అధికారిక భాషలుగా ఉన్న దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మరియు ఫ్రెంచ్ అధికారిక భాషలుగా ఉన్న దేశాల పేర్లను ఇవ్వండి.", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' and ( countrylanguage.language = 'English' or countrylanguage.language = 'French' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మరియు ఫ్రెంచ్ అధికారిక భాషలుగా ఉన్న దేశాల పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "చైనీస్ మాట్లాడే విభిన్న ఖండాల సంఖ్య ఎంత?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "select count ( distinct country.continent ) as num_continents from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### చైనీస్ మాట్లాడే విభిన్న ఖండాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఎన్ని ఖండాలు చైనీస్ మాట్లాడతాయి?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఎన్ని ఖండాలు చైనీస్ మాట్లాడతాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ లేదా డచ్ ఉపయోగించే ప్రాంతాలు ఏమిటి?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ లేదా డచ్ ఉపయోగించే ప్రాంతాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఏ ప్రాంతాలు డచ్ లేదా ఇంగ్లీష్ మాట్లాడతాయి?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఏ ప్రాంతాలు డచ్ లేదా ఇంగ్లీష్ మాట్లాడతాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ లేదా డచ్ అధికారిక భాషగా ఉన్న దేశాలు ఏమిటి?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'english' and isofficial = 't' union select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'dutch' and isofficial = 't'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T' and ( countrylanguage.language = 'English' or countrylanguage.language = 'Dutch' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ లేదా డచ్ అధికారిక భాషగా ఉన్న దేశాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఏ దేశాలు ఇంగ్లీష్ లేదా డచ్ అధికారిక భాషగా ఉన్నాయి?", "query": "select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and isofficial = 'T' union select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' and isofficial = 'T'", "predicted_sql": "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఏ దేశాలు ఇంగ్లీష్ లేదా డచ్ అధికారిక భాషగా ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియా ఖండంలో అత్యంత ప్రజాదరణ పొందిన భాష ఏది?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' order by country.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియా ఖండంలో అత్యంత ప్రజాదరణ పొందిన భాష ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక సంఖ్యలో ఆసియా దేశాలు ఉపయోగించే భాష ఏది?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language having count ( * ) > 5 order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక సంఖ్యలో ఆసియా దేశాలు ఉపయోగించే భాష ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "గణతంత్ర ప్రభుత్వాలలో ఒక దేశం మాత్రమే మాట్లాడే భాషలు ఏవి?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.percentage = 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### గణతంత్ర ప్రభుత్వాలలో ఒక దేశం మాత్రమే మాట్లాడే భాషలు ఏవి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "గణతంత్ర ప్రభుత్వం ఉన్న ఒకే దేశం మాత్రమే ఏ భాషలను ఉపయోగిస్తుంది?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.percentage = 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### గణతంత్ర ప్రభుత్వం ఉన్న ఒకే దేశం మాత్రమే ఏ భాషలను ఉపయోగిస్తుంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆంగ్లం ఉపయోగించే అత్యధిక జనాభా కలిగిన నగరాన్ని కనుగొనండి.", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "select city.name from city join country on city.countrycode = country.code order by city.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆంగ్లం ఉపయోగించే అత్యధిక జనాభా కలిగిన నగరాన్ని కనుగొనండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మాట్లాడే అత్యధిక జనాభా కలిగిన నగరం ఏది?", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "select city.name from city order by city.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మాట్లాడే అత్యధిక జనాభా కలిగిన నగరం ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అతిపెద్ద విస్తీర్ణం కలిగిన ఆసియా దేశం పేరు, జనాభా మరియు ఆశించిన జీవితకాలాన్ని కనుగొనండి?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country where country.continent = 'Asia' order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అతిపెద్ద విస్తీర్ణం కలిగిన ఆసియా దేశం పేరు, జనాభా మరియు ఆశించిన జీవితకాలాన్ని కనుగొనండి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "భూమి ఆధారంగా అతిపెద్ద ఆసియా దేశం పేరు, జనాభా మరియు ఆయుర్దాయం ఏమిటి?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country where country.continent = 'Asia' order by country.population desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### భూమి ఆధారంగా అతిపెద్ద ఆసియా దేశం పేరు, జనాభా మరియు ఆయుర్దాయం ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆంగ్లం అధికారిక భాషగా లేని దేశాల్లో సగటు ఆయుర్దాయం ఎంత?", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆంగ్లం అధికారిక భాషగా లేని దేశాల్లో సగటు ఆయుర్దాయం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ అధికారిక భాష కాని దేశాల సగటు ఆయుర్దాయం ఇవ్వండి.", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "select country.name  , countrylanguage.language  , country.lifeexpectancy from country join countrylanguage on countrylanguage.countrycode = country.code where countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ అధికారిక భాష కాని దేశాల సగటు ఆయుర్దాయం ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీషు ఉపయోగించని దేశాల్లో నివసిస్తున్న ప్రజల మొత్తం సంఖ్య ఎంత?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీషు ఉపయోగించని దేశాల్లో నివసిస్తున్న ప్రజల మొత్తం సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీషు రాని దేశాల్లో ఎంత మంది నివసిస్తున్నారు?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీషు రాని దేశాల్లో ఎంత మంది నివసిస్తున్నారు? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "బీట్రిక్స్ దేశాధినేతగా ఉన్న దేశంలో మాట్లాడే అధికారిక భాష ఏది?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.headofstate = 'బీట్రిక్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### బీట్రిక్స్ దేశాధినేతగా ఉన్న దేశంలో మాట్లాడే అధికారిక భాష ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "దేశంలో ఉపయోగించే అధికారిక భాష ఏది దేశాధిపతి బీట్రిక్స్.", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.isofficial = 'T' ) and countrylanguage.countrycode = ( select country.code from country where country.headofstate = 'Beatriz' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### దేశంలో ఉపయోగించే అధికారిక భాష ఏది దేశాధిపతి బీట్రిక్స్. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "1930కి ముందు స్థాపించబడిన దేశాల్లో మాట్లాడే ఏకైక అధికారిక భాషల సంఖ్య ఎంత?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 1930కి ముందు స్థాపించబడిన దేశాల్లో మాట్లాడే ఏకైక అధికారిక భాషల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "1930కి ముందు ఏర్పాటైన దేశాలలో, వివిధ అధికారిక భాషల మొత్తం సంఖ్య ఎంత?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' and countrylanguage.countrycode in ( select country.code from country where country.indepyear < 1930 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 1930కి ముందు ఏర్పాటైన దేశాలలో, వివిధ అధికారిక భాషల మొత్తం సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఐరోపాలోని ఏ దేశం కంటే ఎక్కువ ఉపరితల వైశాల్యం ఉన్న దేశాలు ఏమిటి?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select country.name from country where country.surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఐరోపాలోని ఏ దేశం కంటే ఎక్కువ ఉపరితల వైశాల్యం ఉన్న దేశాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఐరోపాలోని ఏ దేశం కంటే ఎక్కువ విస్తీర్ణం ఉన్న దేశాలు ఏవి?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select country.name from country where country.continent = 'Europe' order by country.surfacearea desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఐరోపాలోని ఏ దేశం కంటే ఎక్కువ విస్తీర్ణం ఉన్న దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలోని ఏ దేశం కంటే తక్కువ జనాభా ఉన్న ఆఫ్రికన్ దేశాలు ఏమిటి?", "query": "select name from country where continent = 'Africa' and population < ( select max ( population ) from country where continent = 'Asia' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' order by country.population asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలోని ఏ దేశం కంటే తక్కువ జనాభా ఉన్న ఆఫ్రికన్ దేశాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఏ ఆఫ్రికన్ దేశాలు ఆసియాలోని ఏ దేశం కంటే తక్కువ జనాభాను కలిగి ఉన్నాయి?", "query": "select name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' and country.population < ( select min ( country.population ) from country where country.continent = 'Asia' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఏ ఆఫ్రికన్ దేశాలు ఆసియాలోని ఏ దేశం కంటే తక్కువ జనాభాను కలిగి ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్రికాలోని ఏ దేశం కంటే ఎక్కువ జనాభా ఉన్న ఆసియా దేశాలు ఏవి?", "query": "select name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' order by country.population desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్రికాలోని ఏ దేశం కంటే ఎక్కువ జనాభా ఉన్న ఆసియా దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆఫ్రికాలోని ఏ దేశం కంటే ఎక్కువ జనాభా ఉన్న ఆసియా దేశాలు ఏవి?", "query": "select name from country where continent = 'Asia' and population > ( select min ( population ) from country where continent = 'Africa' )", "predicted_sql": "select country.name from country where country.continent = 'Africa' order by country.population desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆఫ్రికాలోని ఏ దేశం కంటే ఎక్కువ జనాభా ఉన్న ఆసియా దేశాలు ఏవి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీషు మాట్లాడని దేశాలకు దేశ కోడ్‌లు ఏమిటి?", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select country.code from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీషు మాట్లాడని దేశాలకు దేశ కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ మాట్లాడని దేశాల కోసం దేశం కోడ్‌లను తిరిగి ఇవ్వండి.", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select country.code from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ మాట్లాడని దేశాల కోసం దేశం కోడ్‌లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రజలు ఇంగ్లీష్ కాకుండా ఇతర భాషలను ఉపయోగించే దేశాల దేశ కోడ్‌లు ఏమిటి?", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "select country.code from country join countrylanguage on countrylanguage.countrycode = country.code where countrylanguage.language <> 'English'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రజలు ఇంగ్లీష్ కాకుండా ఇతర భాషలను ఉపయోగించే దేశాల దేశ కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రజలు ఆంగ్లం కాని భాషలను మాట్లాడే దేశాల కోసం దేశానికి కోడ్‌లను ఇవ్వండి.", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రజలు ఆంగ్లం కాని భాషలను మాట్లాడే దేశాల కోసం దేశానికి కోడ్‌లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీషు మాట్లాడని మరియు ప్రభుత్వ రూపాలు రిపబ్లిక్ లేని దేశాల కోడ్‌లు ఏమిటి?", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select country.code from country where country.governmentform  != 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీషు మాట్లాడని మరియు ప్రభుత్వ రూపాలు రిపబ్లిక్ లేని దేశాల కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రభుత్వాల కోసం ఇంగ్లీషు మాట్లాడని మరియు రిపబ్లిక్‌లు లేని దేశాల కోడ్‌లను తిరిగి ఇవ్వండి.", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select country.code from country where country.governmentform <> 'Republic'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రభుత్వాల కోసం ఇంగ్లీషు మాట్లాడని మరియు రిపబ్లిక్‌లు లేని దేశాల కోడ్‌లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఇంగ్లీష్ అధికారిక భాష కాని యూరోపియన్ దేశాలలో ఏ నగరాలు ఉన్నాయి?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Europe' and countrylanguage.isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఇంగ్లీష్ అధికారిక భాష కాని యూరోపియన్ దేశాలలో ఏ నగరాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఐరోపాలో ఆంగ్లం అధికారిక భాష కాని నగరాల పేర్లు ఏమిటి?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' and country.continent = 'Europe'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఐరోపాలో ఆంగ్లం అధికారిక భాష కాని నగరాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "చైనీస్ అధికారిక భాషగా ఉన్న ఆసియా దేశాలలో ఏ ప్రత్యేక నగరాలు ఉన్నాయి?", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 't' and countrylanguage.language = 'chinese' and country.continent = 'asia'", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Asia' and countrylanguage.isofficial = 'T' and countrylanguage.language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### చైనీస్ అధికారిక భాషగా ఉన్న ఆసియా దేశాలలో ఏ ప్రత్యేక నగరాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో ఉన్న మరియు చైనీస్ అధికారిక భాష అయిన నగరాల యొక్క విభిన్న పేర్లను తిరిగి ఇవ్వండి.", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'Chinese' and country.continent = 'Asia'", "predicted_sql": "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Asia' and countrylanguage.isofficial = 'T' and countrylanguage.language = 'Chinese'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో ఉన్న మరియు చైనీస్ అధికారిక భాష అయిన నగరాల యొక్క విభిన్న పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అతి తక్కువ జనాభా ఉన్న దేశం పేరు, స్వాతంత్ర్య సంవత్సరం మరియు ఉపరితల వైశాల్యం ఏమిటి?", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select country.name  , country.population  , country.indepyear  , country.surfacearea from country order by country.population asc  , country.indepyear desc  , country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అతి తక్కువ జనాభా ఉన్న దేశం పేరు, స్వాతంత్ర్య సంవత్సరం మరియు ఉపరితల వైశాల్యం ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యల్ప జనాభా ఉన్న దేశం పేరు, స్వాతంత్ర్యం వచ్చిన సంవత్సరం మరియు ఉపరితల వైశాల్యం ఇవ్వండి.", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select country.name  , country.indepyear  , country.surfacearea from country where country.population < 1000000 order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యల్ప జనాభా ఉన్న దేశం పేరు, స్వాతంత్ర్యం వచ్చిన సంవత్సరం మరియు ఉపరితల వైశాల్యం ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక విస్తీర్ణం కలిగిన దేశం యొక్క జనాభా, పేరు మరియు నాయకుడు ఏమిటి?", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.headofstate from country order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక విస్తీర్ణం కలిగిన దేశం యొక్క జనాభా, పేరు మరియు నాయకుడు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అతిపెద్ద విస్తీర్ణం ఉన్న దేశానికి పేరు, జనాభా మరియు దేశాధినేతను ఇవ్వండి.", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.headofstate from country order by country.surfacearea desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అతిపెద్ద విస్తీర్ణం ఉన్న దేశానికి పేరు, జనాభా మరియు దేశాధినేతను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "కనీసం 3 భాషలు మాట్లాడే ప్రతి దేశం కోసం దేశం పేరు మరియు మాట్లాడే భాషల సంఖ్యలను తిరిగి ఇవ్వండి.", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select country.name  , count ( distinct countrylanguage.language ) as language_count from country join countrylanguage on countrylanguage.countrycode = country.code group by country.name having count ( distinct countrylanguage.language ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### కనీసం 3 భాషలు మాట్లాడే ప్రతి దేశం కోసం దేశం పేరు మరియు మాట్లాడే భాషల సంఖ్యలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "2 కంటే ఎక్కువ భాషలు మాట్లాడే దేశాల పేర్లు ఏమిటి, అలాగే అవి ఎన్ని భాషలు మాట్లాడతాయి?", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select country.name  , count ( distinct countrylanguage.language ) as num_languages from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having num_languages > 2 order by num_languages desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 2 కంటే ఎక్కువ భాషలు మాట్లాడే దేశాల పేర్లు ఏమిటి, అలాగే అవి ఎన్ని భాషలు మాట్లాడతాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "నగరాల సగటు జనాభా కంటే ఎక్కువ జనాభా ఉన్న ప్రతి జిల్లాలో నగరాల సంఖ్యను కనుగొనండి?", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select city.district  , sum ( city.population ) as total_population from city group by city.district order by total_population desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### నగరాల సగటు జనాభా కంటే ఎక్కువ జనాభా ఉన్న ప్రతి జిల్లాలో నగరాల సంఖ్యను కనుగొనండి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రతి జిల్లాలో ఎన్ని నగరాల్లో అన్ని నగరాల్లో సగటు జనాభా కంటే ఎక్కువ జనాభా ఉంది?", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select city.district  , sum ( city.population ) as total_population from city group by city.district order by total_population desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రతి జిల్లాలో ఎన్ని నగరాల్లో అన్ని నగరాల్లో సగటు జనాభా కంటే ఎక్కువ జనాభా ఉంది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "సగటు ఆయుర్దాయం 72 కంటే ఎక్కువ ఉన్న ప్రతి ప్రభుత్వ ఫారమ్‌కు ప్రభుత్వ ఫారమ్ పేరు మరియు మొత్తం జనాభాను కనుగొనండి.", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select country.governmentform  , country.headofstate  , country.population from country where country.lifeexpectancy > 72", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### సగటు ఆయుర్దాయం 72 కంటే ఎక్కువ ఉన్న ప్రతి ప్రభుత్వ ఫారమ్‌కు ప్రభుత్వ ఫారమ్ పేరు మరియు మొత్తం జనాభాను కనుగొనండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "వివిధ ప్రభుత్వ ఫారమ్‌లు ఏమిటి మరియు సగటు ఆయుర్దాయం 72 కంటే ఎక్కువ ఉన్న ప్రభుత్వ ఫారమ్‌ల యొక్క మొత్తం జనాభా ఎంత?", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select sum ( country.population ) from country where country.lifeexpectancy > 72", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### వివిధ ప్రభుత్వ ఫారమ్‌లు ఏమిటి మరియు సగటు ఆయుర్దాయం 72 కంటే ఎక్కువ ఉన్న ప్రభుత్వ ఫారమ్‌ల యొక్క మొత్తం జనాభా ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "సగటు ఆయుర్దాయం 72 కంటే తక్కువగా ఉన్న ప్రతి ఖండానికి సగటు ఆయుర్దాయం మరియు మొత్తం జనాభాను కనుగొనాలా?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select country.name  , country.lifeexpectancy  , country.population from country where country.lifeexpectancy < 72 and country.population < ( select avg ( country.population ) from country )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### సగటు ఆయుర్దాయం 72 కంటే తక్కువగా ఉన్న ప్రతి ఖండానికి సగటు ఆయుర్దాయం మరియు మొత్తం జనాభాను కనుగొనాలా? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "సగటు ఆయుర్దాయం 72 కంటే తక్కువ ఉన్న ఖండాల కోసం వివిధ ఖండాలు మరియు ప్రతిదానికి అనుగుణంగా ఉన్న మొత్తం జనాభా మరియు సగటు ఆయుర్దాయం ఏమిటి?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### సగటు ఆయుర్దాయం 72 కంటే తక్కువ ఉన్న ఖండాల కోసం వివిధ ఖండాలు మరియు ప్రతిదానికి అనుగుణంగా ఉన్న మొత్తం జనాభా మరియు సగటు ఆయుర్దాయం ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "మొదటి 5 అతిపెద్ద ప్రాంతం ఉన్న దేశాల పేర్లు మరియు ప్రాంతాలు ఏమిటి?", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select country.name  , country.region from country order by country.surfacearea desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### మొదటి 5 అతిపెద్ద ప్రాంతం ఉన్న దేశాల పేర్లు మరియు ప్రాంతాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "5 అతిపెద్ద దేశాల పేర్లు మరియు ఉపరితల ప్రాంతాలను తిరిగి ఇవ్వండి.", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select country.name  , country.region from country order by country.population desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 5 అతిపెద్ద దేశాల పేర్లు మరియు ఉపరితల ప్రాంతాలను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "మొదటి 3 అతిపెద్ద జనాభా కలిగిన దేశాల పేర్లు ఏమిటి?", "query": "select name from country order by population desc limit 3", "predicted_sql": "select country.name from country order by country.population desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### మొదటి 3 అతిపెద్ద జనాభా కలిగిన దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక జనాభా కలిగిన 3 దేశాల పేర్లను తిరిగి ఇవ్వండి.", "query": "select name from country order by population desc limit 3", "predicted_sql": "select country.name from country order by country.population desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక జనాభా కలిగిన 3 దేశాల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "3 అత్యల్ప జనాభా కలిగిన దేశాల పేర్లు ఏమిటి?", "query": "select name from country order by population asc limit 3", "predicted_sql": "select country.name from country where country.population < 1000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 3 అత్యల్ప జనాభా కలిగిన దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "తక్కువ మంది వ్యక్తులు ఉన్న 3 దేశాల పేర్లను తిరిగి ఇవ్వండి.", "query": "select name from country order by population asc limit 3", "predicted_sql": "select country.name from country order by country.population asc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### తక్కువ మంది వ్యక్తులు ఉన్న 3 దేశాల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలో ఎన్ని దేశాలు ఉన్నాయి?", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select count ( distinct country.name ) from country where country.continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలో ఎన్ని దేశాలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఆసియాలోని దేశాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select count ( * ) from country where continent = 'Asia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఆసియాలోని దేశాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఐరోపా ఖండంలో 80000 జనాభా ఉన్న దేశాల పేర్లు ఏమిటి?", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select country.name from country where country.continent = 'Europe' and country.population > 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఐరోపా ఖండంలో 80000 జనాభా ఉన్న దేశాల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఐరోపాలో ఉన్న మరియు 80000 జనాభాకు సమానమైన దేశాల పేర్లను ఇవ్వండి.", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select country.name from country where country.continent = 'Europe' and country.population = 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఐరోపాలో ఉన్న మరియు 80000 జనాభాకు సమానమైన దేశాల పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ఉత్తర అమెరికా ఖండంలో 3000 కంటే ఎక్కువ విస్తీర్ణం ఉన్న దేశాల మొత్తం జనాభా మరియు సగటు వైశాల్యం ఎంత?", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select sum ( country.population ) as total_population  , sum ( country.surfacearea ) as total_surfacearea from country where country.continent = 'North America' and country.surfacearea > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ఉత్తర అమెరికా ఖండంలో 3000 కంటే ఎక్కువ విస్తీర్ణం ఉన్న దేశాల మొత్తం జనాభా మరియు సగటు వైశాల్యం ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "3000 కంటే ఎక్కువ ఉపరితల వైశాల్యం ఉన్న ఉత్తర అమెరికాలోని దేశాలకు అనుగుణంగా మొత్తం జనాభా మరియు సగటు ఉపరితల వైశాల్యాన్ని ఇవ్వండి.", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select country.name  , country.population  , country.surfacearea from country where country.continent = 'North America' order by country.population desc  , country.surfacearea desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 3000 కంటే ఎక్కువ ఉపరితల వైశాల్యం ఉన్న ఉత్తర అమెరికాలోని దేశాలకు అనుగుణంగా మొత్తం జనాభా మరియు సగటు ఉపరితల వైశాల్యాన్ని ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "160000 మరియు 900000 మధ్య జనాభా ఉన్న నగరాలు ఏమిటి?", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 160000 మరియు 900000 మధ్య జనాభా ఉన్న నగరాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "160000 మరియు 900000 మధ్య జనాభా ఉన్న నగరాల పేర్లను తిరిగి ఇవ్వండి.", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 160000 మరియు 900000 మధ్య జనాభా ఉన్న నగరాల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక సంఖ్యలో దేశాలు మాట్లాడే భాష ఏది?", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.language having count ( distinct countrylanguage.countrycode ) = ( select max ( language_count ) from ( select count ( distinct countrylanguage.countrycode ) as language_count from countrylanguage group by countrylanguage.language ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక సంఖ్యలో దేశాలు మాట్లాడే భాష ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "చాలా దేశాల్లో మాట్లాడే భాష ఇవ్వండి.", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select city.name  , countrylanguage.language from city join countrylanguage on city.countrycode = countrylanguage.countrycode", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### చాలా దేశాల్లో మాట్లాడే భాష ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ప్రతి దేశంలో అత్యధిక శాతం మంది ప్రజలు మాట్లాడే భాష ఏది?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select countrylanguage.language from countrylanguage group by countrylanguage.countrycode having count ( * ) = ( select max ( language_count ) from ( select count ( * ) as language_count from countrylanguage group by countrylanguage.countrycode ) as counts )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ప్రతి దేశంలో అత్యధిక శాతం మంది ప్రజలు మాట్లాడే భాష ఏది? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "వివిధ దేశాల దేశ కోడ్‌లు ఏమిటి మరియు ప్రతి ఒక్కటి అత్యధిక శాతం మంది ప్రజలు మాట్లాడే భాషలు ఏమిటి?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select country.code  , count ( distinct countrylanguage.language ) as language_count from country join countrylanguage on countrylanguage.countrycode = country.code group by country.code order by language_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### వివిధ దేశాల దేశ కోడ్‌లు ఏమిటి మరియు ప్రతి ఒక్కటి అత్యధిక శాతం మంది ప్రజలు మాట్లాడే భాషలు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక శాతం మంది ప్రజలు స్పానిష్ మాట్లాడే మొత్తం దేశాల సంఖ్య ఎంత?", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select count ( * ) from countrylanguage where language = 'Spanish' and isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక శాతం మంది ప్రజలు స్పానిష్ మాట్లాడే మొత్తం దేశాల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "స్పానిష్ ప్రధానంగా మాట్లాడే భాషగా ఉన్న దేశాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select count ( * ) from countrylanguage where language = 'Spanish' and isofficial = 'T'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### స్పానిష్ ప్రధానంగా మాట్లాడే భాషగా ఉన్న దేశాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "అత్యధిక శాతం మంది ప్రజలు స్పానిష్ మాట్లాడే దేశాల కోడ్‌లు ఏమిటి?", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### అత్యధిక శాతం మంది ప్రజలు స్పానిష్ మాట్లాడే దేశాల కోడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "స్పానిష్ ప్రధానంగా మాట్లాడే భాషగా ఉన్న దేశాల కోడ్‌లను తిరిగి ఇవ్వండి.", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### స్పానిష్ ప్రధానంగా మాట్లాడే భాషగా ఉన్న దేశాల కోడ్‌లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "orchestra", "question": "ఎంత మంది కండక్టర్లు ఉన్నారు?", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( conductor.conductor_id ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఎంత మంది కండక్టర్లు ఉన్నారు? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్ల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( conductor_id ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "వయస్సు యొక్క ఆరోహణ క్రమంలో కండక్టర్ల పేర్లను జాబితా చేయండి.", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor order by conductor.age asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### వయస్సు యొక్క ఆరోహణ క్రమంలో కండక్టర్ల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "వయస్సు ప్రకారం కండక్టర్ల పేర్లు ఏమిటి?", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor where conductor.age = 'వయస్సు'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### వయస్సు ప్రకారం కండక్టర్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "&quot;USA&quot; కాని జాతీయత కలిగిన కండక్టర్ల పేర్లు ఏమిటి?", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor where conductor.nationality = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### &quot;USA&quot; కాని జాతీయత కలిగిన కండక్టర్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "జాతీయత &quot;USA&quot; లేని కండక్టర్ల పేర్లను తిరిగి ఇవ్వండి.", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor where conductor.nationality = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### జాతీయత &quot;USA&quot; లేని కండక్టర్ల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఆర్కెస్ట్రాలు స్థాపించబడిన సంవత్సరాల అవరోహణ క్రమంలో ఏ రికార్డ్ కంపెనీలు ఉన్నాయి?", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select orchestra.record_company from orchestra order by orchestra.year_of_founded asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఆర్కెస్ట్రాలు స్థాపించబడిన సంవత్సరాల అవరోహణ క్రమంలో ఏ రికార్డ్ కంపెనీలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఆర్కెస్ట్రాల రికార్డ్ కంపెనీలను తిరిగి ఇవ్వండి, అవి స్థాపించబడిన సంవత్సరాలను బట్టి క్రమబద్ధీకరించబడతాయి.", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select record_company  , year_of_founded from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఆర్కెస్ట్రాల రికార్డ్ కంపెనీలను తిరిగి ఇవ్వండి, అవి స్థాపించబడిన సంవత్సరాలను బట్టి క్రమబద్ధీకరించబడతాయి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ప్రదర్శనల సగటు హాజరు ఎంత?", "query": "select avg ( attendance ) from show", "predicted_sql": "select count ( show.attendance ) from show", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ప్రదర్శనల సగటు హాజరు ఎంత? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అన్ని షోలలో సగటు హాజరును అందించండి.", "query": "select avg ( attendance ) from show", "predicted_sql": "select show.attendance from show", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అన్ని షోలలో సగటు హాజరును అందించండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "&quot;లైవ్ ఫైనల్&quot; రకం కాని ప్రదర్శనలలో గరిష్ట మరియు కనిష్ట వాటా ఎంత.", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### &quot;లైవ్ ఫైనల్&quot; రకం కాని ప్రదర్శనలలో గరిష్ట మరియు కనిష్ట వాటా ఎంత. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "&quot;లైవ్ ఫైనల్&quot; రకం లేని ప్రదర్శనల కోసం గరిష్ట మరియు కనిష్ట షేర్‌లను తిరిగి ఇవ్వండి.", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### &quot;లైవ్ ఫైనల్&quot; రకం లేని ప్రదర్శనల కోసం గరిష్ట మరియు కనిష్ట షేర్‌లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్లకు ఎన్ని విభిన్న జాతీయతలు ఉన్నాయి?", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select distinct conductor.nationality from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్లకు ఎన్ని విభిన్న జాతీయతలు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్ల వివిధ జాతీయతల సంఖ్యను లెక్కించండి.", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "select conductor.nationality  , count ( distinct conductor.nationality ) from conductor group by conductor.nationality", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్ల వివిధ జాతీయతల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "పని సంవత్సరాల అవరోహణ క్రమంలో కండక్టర్ల పేర్లను జాబితా చేయండి.", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor order by conductor.year_of_work desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### పని సంవత్సరాల అవరోహణ క్రమంలో కండక్టర్ల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్ల పేర్లు ఏవి, వారు పనిచేసిన సంవత్సరాల సంఖ్యను బట్టి క్రమబద్ధీకరించబడతాయి?", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name  , conductor.year_of_work from conductor order by conductor.year_of_work asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్ల పేర్లు ఏవి, వారు పనిచేసిన సంవత్సరాల సంఖ్యను బట్టి క్రమబద్ధీకరించబడతాయి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఎక్కువ సంవత్సరాలు పనిచేసిన కండక్టర్ పేరును జాబితా చేయండి.", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఎక్కువ సంవత్సరాలు పనిచేసిన కండక్టర్ పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అత్యధిక సంవత్సరాలు పనిచేసిన కండక్టర్ పేరు ఏమిటి?", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అత్యధిక సంవత్సరాలు పనిచేసిన కండక్టర్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్ల పేర్లు మరియు వారు నిర్వహించిన ఆర్కెస్ట్రాలను చూపించండి.", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్ల పేర్లు మరియు వారు నిర్వహించిన ఆర్కెస్ట్రాలను చూపించండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "కండక్టర్ల పేర్లు అలాగే వారు నిర్వహించిన కరెసాండింగ్ ఆర్కెస్ట్రాలు ఏమిటి?", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### కండక్టర్ల పేర్లు అలాగే వారు నిర్వహించిన కరెసాండింగ్ ఆర్కెస్ట్రాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఒకటి కంటే ఎక్కువ ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ల పేర్లను చూపండి.", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( orchestra.orchestra_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఒకటి కంటే ఎక్కువ ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఒకటి కంటే ఎక్కువ ఆర్కెస్ట్రాలో నిర్వహించిన కండక్టర్ల పేర్లు ఏమిటి?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( orchestra.orchestra_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఒకటి కంటే ఎక్కువ ఆర్కెస్ట్రాలో నిర్వహించిన కండక్టర్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరును చూపండి.", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( orchestra.orchestra_id ) > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరును చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అత్యధిక ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరు ఏమిటి?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( orchestra.orchestra_id ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అత్యధిక ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "దయచేసి 2008 తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరును చూపండి.", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### దయచేసి 2008 తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ పేరును చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "2008 సంవత్సరం తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ల పేర్లు ఏమిటి?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 2008 సంవత్సరం తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాలను నిర్వహించిన కండక్టర్ల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "దయచేసి వివిధ రికార్డ్ కంపెనీలను మరియు సంబంధిత ఆర్కెస్ట్రాల సంఖ్యను చూపండి.", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select record_company  , count ( distinct orchestra_id ) as number_of_orchestras from orchestra group by record_company", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### దయచేసి వివిధ రికార్డ్ కంపెనీలను మరియు సంబంధిత ఆర్కెస్ట్రాల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ప్రతి రికార్డ్ కంపెనీ ఎన్ని ఆర్కెస్ట్రాలను నిర్వహిస్తుంది?", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select record_company  , count ( distinct orchestra_id ) as total_orchestras from orchestra group by record_company", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ప్రతి రికార్డ్ కంపెనీ ఎన్ని ఆర్కెస్ట్రాలను నిర్వహిస్తుంది? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "దయచేసి గణన యొక్క ఆరోహణ క్రమంలో ఆర్కెస్ట్రాల రికార్డ్ ఫార్మాట్‌లను చూపండి.", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select orchestra.major_record_format from orchestra order by orchestra.orchestra_id asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### దయచేసి గణన యొక్క ఆరోహణ క్రమంలో ఆర్కెస్ట్రాల రికార్డ్ ఫార్మాట్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "వాటి ఫ్రీక్వెన్సీ ఆధారంగా క్రమబద్ధీకరించబడిన ఆర్కెస్ట్రాల యొక్క ప్రధాన రికార్డ్ ఫార్మాట్‌లు ఏమిటి?", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select orchestra.major_record_format from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### వాటి ఫ్రీక్వెన్సీ ఆధారంగా క్రమబద్ధీకరించబడిన ఆర్కెస్ట్రాల యొక్క ప్రధాన రికార్డ్ ఫార్మాట్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలు భాగస్వామ్యం చేసిన రికార్డ్ కంపెనీని జాబితా చేయండి.", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select orchestra.record_company from orchestra group by orchestra.record_company having count ( orchestra.orchestra_id ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలు భాగస్వామ్యం చేసిన రికార్డ్ కంపెనీని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలు ఉపయోగించిన రికార్డ్ కంపెనీ ఏది?", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select orchestra.record_company from orchestra group by orchestra.record_company having count ( orchestra.orchestra_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### అత్యధిక సంఖ్యలో ఆర్కెస్ట్రాలు ఉపయోగించిన రికార్డ్ కంపెనీ ఏది? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ప్రదర్శన లేని ఆర్కెస్ట్రాల పేర్లను జాబితా చేయండి.", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra left join performance on orchestra.orchestra_id = performance.orchestra_id where performance.performance_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ప్రదర్శన లేని ఆర్కెస్ట్రాల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఎలాంటి ప్రదర్శనలు లేని ఆర్కెస్ట్రాలు ఏవి?", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra left join performance on orchestra.orchestra_id = performance.orchestra_id where performance.performance_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఎలాంటి ప్రదర్శనలు లేని ఆర్కెస్ట్రాలు ఏవి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "2003కి ముందు మరియు 2003 తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాల ద్వారా భాగస్వామ్యం చేయబడిన రికార్డ్ కంపెనీలను చూపండి.", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select record_company from orchestra where orchestra.year_of_founded <= 2003", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 2003కి ముందు మరియు 2003 తర్వాత స్థాపించబడిన ఆర్కెస్ట్రాల ద్వారా భాగస్వామ్యం చేయబడిన రికార్డ్ కంపెనీలను చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "2003కి ముందు స్థాపించబడిన మరియు 2003 తర్వాత స్థాపించబడిన రెండు ఆర్కెస్ట్రాలు ఉపయోగించిన రికార్డ్ కంపెనీలు ఏమిటి?", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 or orchestra.year_of_founded > 2003", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### 2003కి ముందు స్థాపించబడిన మరియు 2003 తర్వాత స్థాపించబడిన రెండు ఆర్కెస్ట్రాలు ఉపయోగించిన రికార్డ్ కంపెనీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "&quot;CD&quot; లేదా &quot;DVD&quot; రికార్డ్ ఫార్మాట్ ఉన్న ఆర్కెస్ట్రాల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select orchestra.orchestra_id  , orchestra.orchestra  , orchestra.record_company  , orchestra.year_of_founded  , orchestra.major_record_format from orchestra where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### &quot;CD&quot; లేదా &quot;DVD&quot; రికార్డ్ ఫార్మాట్ ఉన్న ఆర్కెస్ట్రాల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "CD లేదా DVDని రికార్డ్ ఫార్మాట్‌గా కలిగి ఉన్న ఆర్కెస్ట్రాల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select orchestra.orchestra_id  , orchestra.orchestra  , orchestra.conductor_id  , orchestra.record_company  , orchestra.year_of_founded  , orchestra.major_record_format from orchestra where orchestra.major_record_format = 'CD' or orchestra.major_record_format = 'DVD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format ( CD ) | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### CD లేదా DVDని రికార్డ్ ఫార్మాట్‌గా కలిగి ఉన్న ఆర్కెస్ట్రాల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఒకటి కంటే ఎక్కువ ప్రదర్శనలు ఇచ్చిన ఆర్కెస్ట్రాలు స్థాపించబడిన సంవత్సరాలను చూపండి.", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select orchestra.orchestra  , orchestra.year_of_founded from orchestra group by orchestra.orchestra having count ( orchestra.orchestra_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఒకటి కంటే ఎక్కువ ప్రదర్శనలు ఇచ్చిన ఆర్కెస్ట్రాలు స్థాపించబడిన సంవత్సరాలను చూపండి. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ఒకే ప్రదర్శన కంటే ఎక్కువ ఆర్కెస్ట్రాలను స్థాపించిన సంవత్సరాలేమిటి?", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select max ( orchestra.year_of_founded ) from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ఒకే ప్రదర్శన కంటే ఎక్కువ ఆర్కెస్ట్రాలను స్థాపించిన సంవత్సరాలేమిటి? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "network_1", "question": "ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు?", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( distinct highschooler.id ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాలల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాలల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి హైస్కూలర్ పేర్లు మరియు గ్రేడ్‌లను చూపండి.", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి హైస్కూలర్ పేర్లు మరియు గ్రేడ్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి ఉన్నత పాఠశాలకు సంబంధించిన పేర్లు మరియు గ్రేడ్‌లు ఏమిటి?", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి ఉన్నత పాఠశాలకు సంబంధించిన పేర్లు మరియు గ్రేడ్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాల విద్యార్థుల అన్ని గ్రేడ్‌లను చూపండి.", "query": "select grade from highschooler", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాల విద్యార్థుల అన్ని గ్రేడ్‌లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి హైస్కూలర్ గ్రేడ్ ఎంత?", "query": "select grade from highschooler", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి హైస్కూలర్ గ్రేడ్ ఎంత? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్ ఏ గ్రేడ్‌లో ఉన్నాడు?", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler where highschooler.name = 'Kyle'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్ ఏ గ్రేడ్‌లో ఉన్నాడు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్ అనే ఉన్నత పాఠశాల విద్యార్థికి గ్రేడ్‌ను తిరిగి ఇవ్వండి.", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్ అనే ఉన్నత పాఠశాల విద్యార్థికి గ్రేడ్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "10వ తరగతిలోని అన్ని ఉన్నత పాఠశాలల పేర్లను చూపండి.", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 10వ తరగతిలోని అన్ని ఉన్నత పాఠశాలల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "10వ తరగతిలో ఉన్న అన్ని ఉన్నత పాఠశాలల పేర్లు ఏమిటి?", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 10వ తరగతిలో ఉన్న అన్ని ఉన్నత పాఠశాలల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్ అనే ఉన్నత పాఠశాల విద్యార్థి IDని చూపండి.", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.id from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్ అనే ఉన్నత పాఠశాల విద్యార్థి IDని చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్ ఐడి అంటే ఏమిటి?", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.id from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్ ఐడి అంటే ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "గ్రేడ్ 9 లేదా 10లో ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు?", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( distinct highschooler.id ) from highschooler where highschooler.grade = 9 or highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### గ్రేడ్ 9 లేదా 10లో ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "9 లేదా 10 తరగతులలో ఉన్నత పాఠశాలల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( * ) from highschooler where grade = 9 or grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 9 లేదా 10 తరగతులలో ఉన్నత పాఠశాలల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి గ్రేడ్ కోసం ఉన్నత పాఠశాలల సంఖ్యను చూపండి.", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select grade  , count ( * ) as num_highschools from highschooler group by grade", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి గ్రేడ్ కోసం ఉన్నత పాఠశాలల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి గ్రేడ్‌లో ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు?", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select grade  , count ( distinct highschooler.id ) as count from highschooler group by grade", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి గ్రేడ్‌లో ఎంత మంది ఉన్నత పాఠశాలలు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఏ గ్రేడ్‌లో ఎక్కువ మంది ఉన్నత పాఠశాలలు ఉన్నారు?", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.grade  , count ( highschooler.id ) as count from highschooler group by highschooler.grade order by count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఏ గ్రేడ్‌లో ఎక్కువ మంది ఉన్నత పాఠశాలలు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "అత్యధిక సంఖ్యలో ఉన్నత పాఠశాలలు ఉన్న గ్రేడ్‌ను తిరిగి ఇవ్వండి.", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### అత్యధిక సంఖ్యలో ఉన్నత పాఠశాలలు ఉన్న గ్రేడ్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కనీసం 4 మంది విద్యార్థులు ఉన్న అన్ని గ్రేడ్‌లను నాకు చూపించు.", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కనీసం 4 మంది విద్యార్థులు ఉన్న అన్ని గ్రేడ్‌లను నాకు చూపించు. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఏ గ్రేడ్‌లలో 4 లేదా అంతకంటే ఎక్కువ ఉన్నత పాఠశాలలు ఉన్నారు?", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.grade  , count ( highschooler.id ) as count from highschooler group by highschooler.grade having highschooler.grade >= 4 order by count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఏ గ్రేడ్‌లలో 4 లేదా అంతకంటే ఎక్కువ ఉన్నత పాఠశాలలు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి ఒక్కరికి సంబంధించిన విద్యార్థి IDలు మరియు స్నేహితుల సంఖ్యలను చూపండి.", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select highschooler.id  , count ( friend.friend_id ) as friend_count from highschooler left join friend on friend.student_id = highschooler.id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి ఒక్కరికి సంబంధించిన విద్యార్థి IDలు మరియు స్నేహితుల సంఖ్యలను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఒక్కో విద్యార్థికి ఎంతమంది స్నేహితులు ఉన్నారు?", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select count ( friend.friend_id ) from friend where friend.student_id = [student_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఒక్కో విద్యార్థికి ఎంతమంది స్నేహితులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాల విద్యార్థుల పేర్లు మరియు వారి సంబంధిత స్నేహితుల సంఖ్యను చూపండి.", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as friend_count from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాల విద్యార్థుల పేర్లు మరియు వారి సంబంధిత స్నేహితుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాలల పేర్లు ఏమిటి మరియు ప్రతి ఒక్కరికి ఎంతమంది స్నేహితులు ఉన్నారు?", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as num_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాలల పేర్లు ఏమిటి మరియు ప్రతి ఒక్కరికి ఎంతమంది స్నేహితులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "అత్యధిక సంఖ్యలో స్నేహితులు ఉన్న ఉన్నత పాఠశాల విద్యార్థి పేరు ఏమిటి?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### అత్యధిక సంఖ్యలో స్నేహితులు ఉన్న ఉన్నత పాఠశాల విద్యార్థి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "అత్యంత స్నేహితులతో ఉన్నత పాఠశాల విద్యార్థి పేరును తిరిగి ఇవ్వండి.", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### అత్యంత స్నేహితులతో ఉన్నత పాఠశాల విద్యార్థి పేరును తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కనీసం 3 మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లను చూపండి.", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id where friend.friend_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) >= 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కనీసం 3 మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "3 లేదా అంతకంటే ఎక్కువ మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) > 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 3 లేదా అంతకంటే ఎక్కువ మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాల విద్యార్థి కైల్ స్నేహితులందరి పేర్లను చూపించు.", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id where highschooler.grade = 'ఉన్నత పాఠశాల విద్యార్థి'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాల విద్యార్థి కైల్ స్నేహితులందరి పేర్లను చూపించు. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఉన్నత పాఠశాల విద్యార్థి కైల్ స్నేహితుల పేర్లను తిరిగి ఇవ్వండి.", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select friend.friend_id from friend join highschooler on friend.friend_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఉన్నత పాఠశాల విద్యార్థి కైల్ స్నేహితుల పేర్లను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "హైస్కూల్ విద్యార్థి కైల్‌కి ఎంతమంది స్నేహితులు ఉన్నారు?", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### హైస్కూల్ విద్యార్థి కైల్‌కి ఎంతమంది స్నేహితులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్‌కు ఉన్న స్నేహితుల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from friend", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్‌కు ఉన్న స్నేహితుల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని విద్యార్థులందరి ఐడీలను చూపండి.", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.id from highschooler left join friend on friend.student_id = highschooler.id where friend.friend_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని విద్యార్థులందరి ఐడీలను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని హైస్కూల్ విద్యార్థుల ఐడీలు ఏమిటి?", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select friend.student_id from friend left join highschooler on friend.student_id = highschooler.id where highschooler.id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని హైస్కూల్ విద్యార్థుల ఐడీలు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని ఉన్నత పాఠశాల విద్యార్థులందరి పేర్లను చూపండి.", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.id not in ( select friend.friend_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని ఉన్నత పాఠశాల విద్యార్థులందరి పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని విద్యార్థుల పేర్లు ఏమిటి?", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.id not in ( select friend.friend_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని విద్యార్థుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు ఉన్న మరియు మరొకరు ఇష్టపడే ఉన్నత పాఠశాల విద్యార్థుల ఐడిలను చూపండి.", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.id from friend join highschooler on friend.friend_id = highschooler.id join likes on likes.student_id = highschooler.id where likes.liked_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు ఉన్న మరియు మరొకరు ఇష్టపడే ఉన్నత పాఠశాల విద్యార్థుల ఐడిలను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఇద్దరు స్నేహితులు మరియు ఇష్టపడే విద్యార్థుల ఐడిలు ఏమిటి?", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఇద్దరు స్నేహితులు మరియు ఇష్టపడే విద్యార్థుల ఐడిలు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కొంతమంది స్నేహితులు మరియు మరొకరు ఇష్టపడిన విద్యార్థులందరి పేరును చూపండి.", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler join friend on friend.student_id = highschooler.id join likes on likes.student_id = highschooler.id where friend.friend_id = highschooler.id and likes.liked_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కొంతమంది స్నేహితులు మరియు మరొకరు ఇష్టపడిన విద్యార్థులందరి పేరును చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఇద్దరు స్నేహితులు మరియు ఇష్టపడే ఉన్నత పాఠశాలల పేర్లు ఏమిటి?", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name  , likes.liked_id from highschooler join friend on friend.student_id = highschooler.id join likes on likes.student_id = highschooler.id where friend.friend_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఇద్దరు స్నేహితులు మరియు ఇష్టపడే ఉన్నత పాఠశాలల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి విద్యార్థి ఐడి కోసం లైక్‌ల సంఖ్యను లెక్కించండి.", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select highschooler.id  , count ( likes.liked_id ) as like_count from highschooler left join likes on likes.student_id = highschooler.id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి విద్యార్థి ఐడి కోసం లైక్‌ల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ప్రతి విద్యార్థి ఐడికి ఎన్ని లైక్‌లు సరిపోతాయి?", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select highschooler.id  , count ( likes.liked_id ) as num_likes from highschooler left join likes on highschooler.id = likes.student_id group by highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ప్రతి విద్యార్థి ఐడికి ఎన్ని లైక్‌లు సరిపోతాయి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "లైక్‌లను కలిగి ఉన్న ఉన్నత పాఠశాలల పేర్లను మరియు ప్రతి ఒక్కరికి నచ్చిన సంఖ్యలను చూపండి.", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name  , count ( likes.liked_id ) from highschooler join likes on likes.student_id = highschooler.id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### లైక్‌లను కలిగి ఉన్న ఉన్నత పాఠశాలల పేర్లను మరియు ప్రతి ఒక్కరికి నచ్చిన సంఖ్యలను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఇష్టాలను కలిగి ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి మరియు ప్రతి ఒక్కరికి ఎన్ని లైక్‌లు ఉన్నాయి?", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name  , count ( likes.liked_id ) from highschooler left join likes on highschooler.id = likes.student_id group by highschooler.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఇష్టాలను కలిగి ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి మరియు ప్రతి ఒక్కరికి ఎన్ని లైక్‌లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "అత్యధిక సంఖ్యలో లైక్‌లను కలిగి ఉన్న హైస్కూలర్ పేరు ఏమిటి?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name having count ( likes.liked_id ) > 10 order by count ( likes.liked_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### అత్యధిక సంఖ్యలో లైక్‌లను కలిగి ఉన్న హైస్కూలర్ పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ఎక్కువ లైక్‌లు వచ్చిన విద్యార్థి పేరును ఇవ్వండి.", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler join likes on likes.student_id = highschooler.id group by highschooler.name order by count ( likes.liked_id ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ఎక్కువ లైక్‌లు వచ్చిన విద్యార్థి పేరును ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కనీసం 2 లైక్‌లు ఉన్న విద్యార్థుల పేర్లను చూపండి.", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler join likes on likes.student_id = highschooler.id group by highschooler.name having count ( likes.liked_id ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కనీసం 2 లైక్‌లు ఉన్న విద్యార్థుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "2 లేదా అంతకంటే ఎక్కువ లైక్‌లను కలిగి ఉన్న విద్యార్థుల పేర్లు ఏమిటి?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler join likes on likes.student_id = highschooler.id group by highschooler.name having count ( likes.liked_id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 2 లేదా అంతకంటే ఎక్కువ లైక్‌లను కలిగి ఉన్న విద్యార్థుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "5 కంటే ఎక్కువ గ్రేడ్ ఉన్న మరియు కనీసం 2 స్నేహితులు ఉన్న విద్యార్థుల పేర్లను చూపండి.", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 5 కంటే ఎక్కువ గ్రేడ్ ఉన్న మరియు కనీసం 2 స్నేహితులు ఉన్న విద్యార్థుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "5 కంటే ఎక్కువ గ్రేడ్ ఉన్న మరియు 2 లేదా అంతకంటే ఎక్కువ మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 5 కంటే ఎక్కువ గ్రేడ్ ఉన్న మరియు 2 లేదా అంతకంటే ఎక్కువ మంది స్నేహితులు ఉన్న ఉన్నత పాఠశాలల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్‌కి ఎన్ని లైక్‌లు ఉన్నాయి?", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from likes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్‌కి ఎన్ని లైక్‌లు ఉన్నాయి? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కైల్ అనే ఉన్నత పాఠశాల విద్యార్థికి ఉన్న లైక్‌ల సంఖ్యను తిరిగి ఇవ్వండి.", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( likes.liked_id ) from highschooler join likes on likes.student_id = highschooler.id where highschooler.grade = 'కైల్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కైల్ అనే ఉన్నత పాఠశాల విద్యార్థికి ఉన్న లైక్‌ల సంఖ్యను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "కొంతమంది స్నేహితులు ఉన్న విద్యార్థులందరి సగటు గ్రేడ్‌ను కనుగొనండి.", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler join friend on friend.student_id = highschooler.id where friend.friend_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### కొంతమంది స్నేహితులు ఉన్న విద్యార్థులందరి సగటు గ్రేడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు ఉన్న విద్యార్థుల సగటు గ్రేడ్ ఎంత?", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.grade from highschooler join friend on friend.friend_id = highschooler.id where friend.student_id = highschooler.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు ఉన్న విద్యార్థుల సగటు గ్రేడ్ ఎంత? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని విద్యార్థుల కనీస గ్రేడ్‌ను కనుగొనండి.", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler where highschooler.id not in ( select friend.friend_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని విద్యార్థుల కనీస గ్రేడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "స్నేహితులు లేని విద్యార్థుల అత్యల్ప గ్రేడ్ ఏది?", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.grade from highschooler where highschooler.id not in ( select friend.friend_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### స్నేహితులు లేని విద్యార్థుల అత్యల్ప గ్రేడ్ ఏది? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "dog_kennels", "question": "ఏ రాష్ట్రాల్లో యజమానులు మరియు నిపుణులు నివసిస్తున్నారు?", "query": "select state from owners intersect select state from professionals", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ రాష్ట్రాల్లో యజమానులు మరియు నిపుణులు నివసిస్తున్నారు? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "యజమానులు మరియు నిపుణులు ఇద్దరూ నివసించే రాష్ట్రాలను కనుగొనండి.", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select owners.state  , professionals.state from owners join professionals on owners.state = professionals.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### యజమానులు మరియు నిపుణులు ఇద్దరూ నివసించే రాష్ట్రాలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏదైనా చికిత్సల ద్వారా వెళ్ళిన కుక్కల సగటు వయస్సు ఎంత?", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select dogs.age from treatments join dogs on treatments.dog_id = dogs.dog_id where treatments.treatment_type_code = 'చికిత్స'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏదైనా చికిత్సల ద్వారా వెళ్ళిన కుక్కల సగటు వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చికిత్సల ద్వారా వెళ్ళిన కుక్కల సగటు వయస్సును కనుగొనండి.", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select dogs.name  , dogs.age from dogs join treatments on dogs.dog_id = treatments.dog_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code where treatment_types.treatment_type_description = 'చికిత్స'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చికిత్సల ద్వారా వెళ్ళిన కుక్కల సగటు వయస్సును కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఇండియానా రాష్ట్రంలో ఏ నిపుణులు నివసిస్తున్నారు లేదా 2 కంటే ఎక్కువ చికిత్సలు చేసారు? అతని లేదా ఆమె ID, ఇంటి పేరు మరియు సెల్ ఫోన్‌ను జాబితా చేయండి.", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select professionals.professional_id  , professionals.first_name  , professionals.last_name  , professionals.cell_number from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id  , professionals.first_name  , professionals.last_name  , professionals.cell_number having count ( treatments.treatment_id ) > 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఇండియానా రాష్ట్రంలో ఏ నిపుణులు నివసిస్తున్నారు లేదా 2 కంటే ఎక్కువ చికిత్సలు చేసారు? అతని లేదా ఆమె ID, ఇంటి పేరు మరియు సెల్ ఫోన్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఇండియానా రాష్ట్రంలో నివసిస్తున్న లేదా రెండు కంటే ఎక్కువ చికిత్సలు చేసిన నిపుణుల ID, ఇంటి పేరు మరియు సెల్ ఫోన్‌ను కనుగొనండి.", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select professionals.professional_id  , professionals.first_name  , professionals.cell_number from professionals where professionals.state = 'ఇండియా'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఇండియానా రాష్ట్రంలో నివసిస్తున్న లేదా రెండు కంటే ఎక్కువ చికిత్సలు చేసిన నిపుణుల ID, ఇంటి పేరు మరియు సెల్ ఫోన్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ కుక్కలు తమ యజమానికి చికిత్స కోసం 1000 కంటే ఎక్కువ ఖర్చు పెట్టలేదు? కుక్కల పేర్లను జాబితా చేయండి.", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id join charges on treatments.treatment_type_code = charges.charge_id where charges.charge_amount <= 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ కుక్కలు తమ యజమానికి చికిత్స కోసం 1000 కంటే ఎక్కువ ఖర్చు పెట్టలేదు? కుక్కల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "యజమాని చికిత్స కోసం 1000 కంటే ఎక్కువ ఖర్చు చేయని కుక్కల పేర్లు ఏమిటి?", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id join charges on treatments.treatment_type_code = charges.charge_id where charges.charge_amount > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### యజమాని చికిత్స కోసం 1000 కంటే ఎక్కువ ఖర్చు చేయని కుక్కల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "నిపుణులు లేదా యజమానుల కోసం ఏ మొదటి పేర్లు ఉపయోగించబడతాయి కానీ కుక్క పేర్లుగా ఉపయోగించబడవు?", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select first_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### నిపుణులు లేదా యజమానుల కోసం ఏ మొదటి పేర్లు ఉపయోగించబడతాయి కానీ కుక్క పేర్లుగా ఉపయోగించబడవు? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "నిపుణులు లేదా యజమానుల కోసం ఉపయోగించబడే మొదటి పేర్లను కనుగొనండి కానీ కుక్క పేర్లుగా ఉపయోగించబడవు.", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### నిపుణులు లేదా యజమానుల కోసం ఉపయోగించబడే మొదటి పేర్లను కనుగొనండి కానీ కుక్క పేర్లుగా ఉపయోగించబడవు. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కలకు చికిత్స చేయని నిపుణులు ఎవరు? ప్రొఫెషనల్ ఐడి, పాత్ర మరియు ఇమెయిల్‌ను జాబితా చేయండి.", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.email_address from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments inner join dogs on treatments.dog_id = dogs.dog_id where dogs.abandoned_yn = 'Y' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కలకు చికిత్స చేయని నిపుణులు ఎవరు? ప్రొఫెషనల్ ఐడి, పాత్ర మరియు ఇమెయిల్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కలకు ఎలాంటి చికిత్స చేయని నిపుణుల ఐడి, పాత్ర మరియు ఇమెయిల్‌ను నాకు అందించండి.", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "select professionals.professional_id  , professionals.role_code  , professionals.email_address from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments inner join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = 'కుక్కలకు ఎలాంటి చికిత్స చేయని నిపుణుల ఐడి' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కలకు ఎలాంటి చికిత్స చేయని నిపుణుల ఐడి, పాత్ర మరియు ఇమెయిల్‌ను నాకు అందించండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ యజమాని ఎక్కువ కుక్కలను కలిగి ఉన్నాడు? యజమాని ఐడి, మొదటి పేరు మరియు చివరి పేరును జాబితా చేయండి.", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name from owners join dogs on dogs.owner_id = owners.owner_id group by owners.owner_id having count ( dogs.dog_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ యజమాని ఎక్కువ కుక్కలను కలిగి ఉన్నాడు? యజమాని ఐడి, మొదటి పేరు మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎక్కువ కుక్కలను కలిగి ఉన్న యజమాని యజమాని ఐడి, మొదటి పేరు మరియు ఇంటి పేరును తిరిగి ఇవ్వండి.", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from dogs join owners on dogs.owner_id = owners.owner_id group by owners.owner_id having count ( dogs.dog_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎక్కువ కుక్కలను కలిగి ఉన్న యజమాని యజమాని ఐడి, మొదటి పేరు మరియు ఇంటి పేరును తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ నిపుణులు కనీసం రెండు చికిత్సలు చేసారు? ప్రొఫెషనల్ యొక్క ఐడి, పాత్ర మరియు మొదటి పేరును జాబితా చేయండి.", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select treatments.professional_id  , professionals.role_code  , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ నిపుణులు కనీసం రెండు చికిత్సలు చేసారు? ప్రొఫెషనల్ యొక్క ఐడి, పాత్ర మరియు మొదటి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "రెండు లేదా అంతకంటే ఎక్కువ చికిత్సలు చేసిన నిపుణుల ఐడి, పాత్ర మరియు మొదటి పేరు ఏమిటి?", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### రెండు లేదా అంతకంటే ఎక్కువ చికిత్సలు చేసిన నిపుణుల ఐడి, పాత్ర మరియు మొదటి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కలు ఎక్కువగా ఉన్న జాతి పేరు ఏమిటి?", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name having count ( dogs.dog_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కలు ఎక్కువగా ఉన్న జాతి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎక్కువ కుక్కలు ఏ జాతిని కలిగి ఉన్నాయి? నాకు జాతి పేరు ఇవ్వండి.", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from dogs join breeds on dogs.breed_code = breeds.breed_code group by breeds.breed_name having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎక్కువ కుక్కలు ఏ జాతిని కలిగి ఉన్నాయి? నాకు జాతి పేరు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ యజమాని తన కుక్కలకు ఎక్కువ చికిత్సల కోసం చెల్లించాడు? యజమాని ID మరియు చివరి పేరును జాబితా చేయండి.", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ యజమాని తన కుక్కలకు ఎక్కువ చికిత్సల కోసం చెల్లించాడు? యజమాని ID మరియు చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అతని లేదా ఆమె కుక్కల చికిత్సల కోసం అత్యధికంగా ఖర్చు చేసిన యజమాని యజమాని ఐడి మరియు ఇంటి పేరు చెప్పండి.", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అతని లేదా ఆమె కుక్కల చికిత్సల కోసం అత్యధికంగా ఖర్చు చేసిన యజమాని యజమాని ఐడి మరియు ఇంటి పేరు చెప్పండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "మొత్తంగా తక్కువ డబ్బు ఖర్చయ్యే చికిత్స రకం యొక్క వివరణ ఏమిటి?", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select treatment_types.treatment_type_description  , min ( treatments.cost_of_treatment ) as min_cost_of_treatment from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatment_types.treatment_type_description order by min_cost_of_treatment asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### మొత్తంగా తక్కువ డబ్బు ఖర్చయ్యే చికిత్స రకం యొక్క వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "మొత్తం ఖర్చు తక్కువగా ఉండే చికిత్స రకం గురించి నాకు వివరణ ఇవ్వండి.", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select treatment_types.treatment_type_description  , sum ( treatments.cost_of_treatment ) as total_cost from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by total_cost asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### మొత్తం ఖర్చు తక్కువగా ఉండే చికిత్స రకం గురించి నాకు వివరణ ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ యజమాని తమ కుక్కల కోసం మొత్తంగా ఎక్కువ మొత్తంలో డబ్బు చెల్లించారు? యజమాని ఐడి మరియు జిప్ కోడ్‌ను చూపండి.", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.zip_code  , sum ( treatments.cost_of_treatment ) as total_cost from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id group by owners.owner_id  , owners.zip_code order by total_cost desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ యజమాని తమ కుక్కల కోసం మొత్తంగా ఎక్కువ మొత్తంలో డబ్బు చెల్లించారు? యజమాని ఐడి మరియు జిప్ కోడ్‌ను చూపండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అతని లేదా ఆమె కుక్కల కోసం మొత్తం ఎక్కువ డబ్బు ఖర్చు చేసిన యజమాని యజమాని ఐడి మరియు జిప్ కోడ్‌ను కనుగొనండి.", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select owners.owner_id  , owners.zip_code from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id join professionals on treatments.professional_id = professionals.professional_id where dogs.abandoned_yn = 'Y' order by treatments.cost_of_treatment desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అతని లేదా ఆమె కుక్కల కోసం మొత్తం ఎక్కువ డబ్బు ఖర్చు చేసిన యజమాని యజమాని ఐడి మరియు జిప్ కోడ్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ నిపుణులు కనీసం రెండు రకాల చికిత్సలు చేసారు? ప్రొఫెషనల్ ఐడి మరియు సెల్ ఫోన్‌ను జాబితా చేయండి.", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select treatments.professional_id  , professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count ( distinct treatments.treatment_type_code ) >= 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ నిపుణులు కనీసం రెండు రకాల చికిత్సలు చేసారు? ప్రొఫెషనల్ ఐడి మరియు సెల్ ఫోన్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "రెండు లేదా అంతకంటే ఎక్కువ రకాల చికిత్సలను నిర్వహించే నిపుణుల ID మరియు సెల్ ఫోన్‌ను కనుగొనండి.", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select professionals.professional_id  , professionals.cell_number from professionals group by professionals.professional_id having count ( * ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### రెండు లేదా అంతకంటే ఎక్కువ రకాల చికిత్సలను నిర్వహించే నిపుణుల ID మరియు సెల్ ఫోన్‌ను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "సగటు కంటే తక్కువ ఖర్చుతో చికిత్స చేసిన నిపుణుల మొదటి పేరు మరియు చివరి పేరు ఏమిటి?", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select professionals.first_name  , professionals.last_name from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id order by sum ( treatments.cost_of_treatment ) asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### సగటు కంటే తక్కువ ఖర్చుతో చికిత్స చేసిన నిపుణుల మొదటి పేరు మరియు చివరి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ నిపుణులు సగటు కంటే తక్కువ ఖర్చుతో చికిత్సను నిర్వహించారు? నాకు సిద్ధాంతం యొక్క మొదటి పేర్లు మరియు చివరి పేర్లను ఇవ్వండి.", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select professionals.first_name  , professionals.last_name from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id having sum ( treatments.cost_of_treatment ) < ( select min ( total_cost ) from ( select professionals.professional_id  , sum ( treatments.cost_of_treatment ) as total_cost from professionals join treatments on treatments.professional_id = professionals.professional_id group by professionals.professional_id ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ నిపుణులు సగటు కంటే తక్కువ ఖర్చుతో చికిత్సను నిర్వహించారు? నాకు సిద్ధాంతం యొక్క మొదటి పేర్లు మరియు చివరి పేర్లను ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి చికిత్స యొక్క తేదీని, దానిని ఆపరేట్ చేసిన ప్రొఫెషనల్ మొదటి పేరుతో జాబితా చేయండి.", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select treatments.date_of_treatment  , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id order by treatments.date_of_treatment asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి చికిత్స యొక్క తేదీని, దానిని ఆపరేట్ చేసిన ప్రొఫెషనల్ మొదటి పేరుతో జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి చికిత్స యొక్క తేదీ మరియు ఆపరేటింగ్ ప్రొఫెషనల్ మొదటి పేరు ఏమిటి?", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select treatments.date_of_treatment  , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id order by treatments.date_of_treatment asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి చికిత్స యొక్క తేదీ మరియు ఆపరేటింగ్ ప్రొఫెషనల్ మొదటి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి చికిత్స ఖర్చు మరియు సంబంధిత చికిత్స రకం వివరణను జాబితా చేయండి.", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment  , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి చికిత్స ఖర్చు మరియు సంబంధిత చికిత్స రకం వివరణను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి చికిత్స ఖర్చు మరియు చికిత్స రకం వివరణ ఏమిటి?", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select treatments.cost_of_treatment  , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి చికిత్స ఖర్చు మరియు చికిత్స రకం వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి యజమాని మొదటి పేరు, చివరి పేరు మరియు ఆమె కుక్క కోసం అతని పరిమాణాన్ని జాబితా చేయండి.", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name  , dogs.weight from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి యజమాని మొదటి పేరు, చివరి పేరు మరియు ఆమె కుక్క కోసం అతని పరిమాణాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి యజమాని మొదటి పేరు, చివరి పేరు మరియు వారి కుక్క పరిమాణం ఏమిటి?", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name  , dogs.weight from owners join dogs on dogs.owner_id = owners.owner_id limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి యజమాని మొదటి పేరు, చివరి పేరు మరియు వారి కుక్క పరిమాణం ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "యజమాని మొదటి పేరు మరియు కుక్కల పేరు యొక్క జతలను జాబితా చేయండి.", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### యజమాని మొదటి పేరు మరియు కుక్కల పేరు యొక్క జతలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి యజమాని మొదటి పేరు మరియు వారి కుక్కల పేరు ఏమిటి?", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి యజమాని మొదటి పేరు మరియు వారి కుక్కల పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అరుదైన జాతికి చెందిన కుక్కల పేర్లు మరియు వాటికి చికిత్స చేసే తేదీలను జాబితా చేయండి.", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select dogs.name  , treatments.date_of_treatment from dogs join treatments on treatments.dog_id = dogs.dog_id join breeds on dogs.breed_code = breeds.breed_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అరుదైన జాతికి చెందిన కుక్కల పేర్లు మరియు వాటికి చికిత్స చేసే తేదీలను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఏ కుక్కలు అరుదైన జాతికి చెందినవి? వారి పేర్లు మరియు చికిత్స తేదీలను చూపండి.", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select breeds.breed_name  , dogs.name  , treatments.date_of_treatment from dogs join breeds on dogs.breed_code = breeds.breed_code join treatments on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఏ కుక్కలు అరుదైన జాతికి చెందినవి? వారి పేర్లు మరియు చికిత్స తేదీలను చూపండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "వర్జీనియాలో నివసించే వారు ఏ కుక్కలను కలిగి ఉన్నారు? యజమాని మొదటి పేరు మరియు కుక్క పేరును జాబితా చేయండి.", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where owners.state = 'Virginia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### వర్జీనియాలో నివసించే వారు ఏ కుక్కలను కలిగి ఉన్నారు? యజమాని మొదటి పేరు మరియు కుక్క పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "వర్జీనియాలో నివసిస్తున్న యజమానుల మొదటి పేర్లు మరియు వారు కలిగి ఉన్న కుక్కల పేర్లను కనుగొనండి.", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where owners.state = 'Virginia' limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### వర్జీనియాలో నివసిస్తున్న యజమానుల మొదటి పేర్లు మరియు వారు కలిగి ఉన్న కుక్కల పేర్లను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చికిత్స పొందిన కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీ ఏమిటి?", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select treatments.date_of_treatment  , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చికిత్స పొందిన కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చికిత్స పొందిన కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీని కనుగొనండి.", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_departed from dogs join treatments on treatments.dog_id = dogs.dog_id where treatments.date_of_treatment = '2021-01-01' and dogs.date_departed is not null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చికిత్స పొందిన కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీని కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చిన్న కుక్కను కలిగి ఉన్న యజమాని యొక్క చివరి పేరును జాబితా చేయండి.", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select owners.first_name from dogs join owners on dogs.owner_id = owners.owner_id where dogs.size_code = 'చిన్న' and dogs.date_departed is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చిన్న కుక్కను కలిగి ఉన్న యజమాని యొక్క చివరి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అతి చిన్న కుక్క ఎవరిది? అతని లేదా ఆమె ఇంటిపేరు నాకు ఇవ్వండి.", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select dogs.name from dogs order by dogs.weight asc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అతి చిన్న కుక్క ఎవరిది? అతని లేదా ఆమె ఇంటిపేరు నాకు ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "హవాయి రాష్ట్రంలో లేదా విస్కాన్సిన్ రాష్ట్రంలో నివసించే నిపుణుల ఇమెయిల్‌లను జాబితా చేయండి.", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "select professionals.email_address from professionals where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### హవాయి రాష్ట్రంలో లేదా విస్కాన్సిన్ రాష్ట్రంలో నివసించే నిపుణుల ఇమెయిల్‌లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "హవాయి రాష్ట్రంలో లేదా విస్కాన్సిన్ రాష్ట్రంలో నివసిస్తున్న నిపుణుల ఇమెయిల్‌లు ఏమిటి?", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "select professionals.email_address from professionals where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### హవాయి రాష్ట్రంలో లేదా విస్కాన్సిన్ రాష్ట్రంలో నివసిస్తున్న నిపుణుల ఇమెయిల్‌లు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అన్ని కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీ ఏమిటి?", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అన్ని కుక్కలు వచ్చే తేదీ మరియు బయలుదేరే తేదీ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అన్ని కుక్కల రాక తేదీ మరియు బయలుదేరే తేదీని జాబితా చేయండి.", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అన్ని కుక్కల రాక తేదీ మరియు బయలుదేరే తేదీని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎన్ని కుక్కలు ఏ చికిత్సల ద్వారా వెళ్ళాయి?", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select count ( distinct dogs.dog_id ) as total_treatments from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎన్ని కుక్కలు ఏ చికిత్సల ద్వారా వెళ్ళాయి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చికిత్స ద్వారా వెళ్ళిన కుక్కల సంఖ్యను లెక్కించండి.", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select count ( dogs.dog_id ) as total_dogs_treated from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చికిత్స ద్వారా వెళ్ళిన కుక్కల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎంత మంది నిపుణులు కుక్కలకు ఏదైనా చికిత్స చేశారు?", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select count ( distinct treatments.professional_id ) as num_professionals from treatments join professionals on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎంత మంది నిపుణులు కుక్కలకు ఏదైనా చికిత్స చేశారు? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కలకు చికిత్స చేసిన నిపుణుల సంఖ్యను కనుగొనండి.", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select count ( distinct professionals.professional_id ) as num_professionals from treatments join professionals on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కలకు చికిత్స చేసిన నిపుణుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "&#39;వెస్ట్&#39; అనే సబ్‌స్ట్రింగ్ ఉన్న నగరంలో ఏ నిపుణులు నివసిస్తున్నారు? అతని లేదా ఆమె పాత్ర, వీధి, నగరం మరియు రాష్ట్రాన్ని జాబితా చేయండి.", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code from professionals where professionals.city like '%వెస్ట్%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### &#39;వెస్ట్&#39; అనే సబ్‌స్ట్రింగ్ ఉన్న నగరంలో ఏ నిపుణులు నివసిస్తున్నారు? అతని లేదా ఆమె పాత్ర, వీధి, నగరం మరియు రాష్ట్రాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "&#39;వెస్ట్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న నగరంలో నివసిస్తున్న నిపుణుల పాత్ర, వీధి, నగరం మరియు స్థితిని కనుగొనండి.", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code from professionals where professionals.street like '%వెస్ట్%' and professionals.city = 'నగరం' and professionals.state = 'స్థితి'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### &#39;వెస్ట్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న నగరంలో నివసిస్తున్న నిపుణుల పాత్ర, వీధి, నగరం మరియు స్థితిని కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "&#39;నార్త్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న రాష్ట్రంలో ఏ యజమానులు నివసిస్తున్నారు? అతని మొదటి పేరు, చివరి పేరు మరియు ఇమెయిల్‌ను జాబితా చేయండి.", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.state = 'నార్త్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### &#39;నార్త్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న రాష్ట్రంలో ఏ యజమానులు నివసిస్తున్నారు? అతని మొదటి పేరు, చివరి పేరు మరియు ఇమెయిల్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "&#39;నార్త్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న రాష్ట్రంలో నివసిస్తున్న యజమానుల మొదటి పేరు, చివరి పేరు మరియు ఇమెయిల్‌ను తిరిగి ఇవ్వండి.", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.state = 'నార్త్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### &#39;నార్త్&#39; అనే సబ్‌స్ట్రింగ్‌ని కలిగి ఉన్న రాష్ట్రంలో నివసిస్తున్న యజమానుల మొదటి పేరు, చివరి పేరు మరియు ఇమెయిల్‌ను తిరిగి ఇవ్వండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎన్ని కుక్కల వయస్సు సగటు కంటే తక్కువ?", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select dogs.name  , dogs.age from dogs where dogs.age < ( select min ( age ) from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎన్ని కుక్కల వయస్సు సగటు కంటే తక్కువ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "సగటు కంటే తక్కువ వయస్సు గల కుక్కల సంఖ్యను లెక్కించండి.", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select count ( * ) from dogs where age < 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### సగటు కంటే తక్కువ వయస్సు గల కుక్కల సంఖ్యను లెక్కించండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఇటీవలి చికిత్సకు ఎంత ఖర్చవుతుంది?", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select treatments.professional_id  , sum ( treatments.cost_of_treatment ) as total_cost from treatments group by treatments.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఇటీవలి చికిత్సకు ఎంత ఖర్చవుతుంది? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఇటీవల నిర్వహించిన చికిత్స ఖర్చును నాకు చూపించు.", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select treatments.cost_of_treatment from treatments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఇటీవల నిర్వహించిన చికిత్స ఖర్చును నాకు చూపించు. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎన్ని కుక్కలు ఎటువంటి చికిత్స చేయించుకోలేదు?", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select count ( distinct dogs.dog_id ) as num_dogs_treated from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎన్ని కుక్కలు ఎటువంటి చికిత్స చేయించుకోలేదు? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "చికిత్స పొందని కుక్కల సంఖ్యను చెప్పండి.", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select count ( dogs.dog_id ) as number_of_treatments from dogs join treatments on dogs.dog_id = treatments.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### చికిత్స పొందని కుక్కల సంఖ్యను చెప్పండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "తాత్కాలికంగా కుక్కలు లేని యజమానుల సంఖ్య ఎంత?", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select count ( distinct owners.owner_id ) from dogs left join owners on dogs.owner_id = owners.owner_id where dogs.abandoned_yn = 'N'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### తాత్కాలికంగా కుక్కలు లేని యజమానుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఈ సమయంలో కుక్కలు లేని యజమానుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఈ సమయంలో కుక్కలు లేని యజమానుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఎంతమంది నిపుణులు కుక్కలకు ఎలాంటి చికిత్సను నిర్వహించలేదు?", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select professionals.first_name  , professionals.last_name  , dogs.name  , treatments.treatment_type_code  , treatments.date_of_treatment from professionals join treatments on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఎంతమంది నిపుణులు కుక్కలకు ఎలాంటి చికిత్సను నిర్వహించలేదు? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కలకు చికిత్స చేయని నిపుణుల సంఖ్యను కనుగొనండి.", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select count ( professionals.professional_id ) from professionals left join treatments on treatments.professional_id = professionals.professional_id where treatments.treatment_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కలకు చికిత్స చేయని నిపుణుల సంఖ్యను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "వదిలివేయబడిన కుక్కల పేరు, వయస్సు మరియు బరువును జాబితా చేయండి? 1 అంటే అవును, మరియు 0 అంటే కాదు.", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "select dogs.name  , dogs.age  , dogs.weight from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### వదిలివేయబడిన కుక్కల పేరు, వయస్సు మరియు బరువును జాబితా చేయండి? 1 అంటే అవును, మరియు 0 అంటే కాదు. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "వదిలివేయబడిన కుక్కల పేరు, వయస్సు మరియు బరువు ఎంత? పట్టికలలో 1 అంటే అవును మరియు 0 అంటే సంఖ్య అని గమనించండి.", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "select dogs.name  , dogs.age  , dogs.weight from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### వదిలివేయబడిన కుక్కల పేరు, వయస్సు మరియు బరువు ఎంత? పట్టికలలో 1 అంటే అవును మరియు 0 అంటే సంఖ్య అని గమనించండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అన్ని కుక్కల సగటు వయస్సు ఎంత?", "query": "select avg ( age ) from dogs", "predicted_sql": "select max ( age ) from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అన్ని కుక్కల సగటు వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అన్ని కుక్కల సగటు వయస్సును లెక్కించండి.", "query": "select avg ( age ) from dogs", "predicted_sql": "select dogs.name  , dogs.age from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అన్ని కుక్కల సగటు వయస్సును లెక్కించండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "పురాతన కుక్క వయస్సు ఎంత?", "query": "select max ( age ) from dogs", "predicted_sql": "select dogs.age from dogs where dogs.date_of_birth < '2000-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### పురాతన కుక్క వయస్సు ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "పెద్ద కుక్క వయస్సు చెప్పండి.", "query": "select max ( age ) from dogs", "predicted_sql": "select dogs.name  , dogs.age from dogs where dogs.age > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### పెద్ద కుక్క వయస్సు చెప్పండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ఒక్కో రకమైన ఛార్జీకి ఎంత ఖర్చవుతుంది? ఛార్జ్ రకం మరియు మొత్తం రెండింటినీ జాబితా చేయండి.", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charge_type  , sum ( charge_amount ) as total_charge_amount from charges group by charge_type", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ఒక్కో రకమైన ఛార్జీకి ఎంత ఖర్చవుతుంది? ఛార్జ్ రకం మరియు మొత్తం రెండింటినీ జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి ఛార్జ్ రకం మరియు దాని మొత్తాన్ని జాబితా చేయండి.", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charges.charge_type  , sum ( charges.charge_amount ) as total_charge_amount from charges group by charges.charge_type", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి ఛార్జ్ రకం మరియు దాని మొత్తాన్ని జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అత్యంత ఖరీదైన ఛార్జ్ రకం ధర ఎంత?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select max ( charges.charge_amount ) from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అత్యంత ఖరీదైన ఛార్జ్ రకం ధర ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "అత్యంత ఖరీదైన ఛార్జ్ రకం యొక్క ఛార్జ్ మొత్తం ఎంత?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select max ( charges.charge_amount ) from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### అత్యంత ఖరీదైన ఛార్జ్ రకం యొక్క ఛార్జ్ మొత్తం ఎంత? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "నిపుణులందరి ఇమెయిల్, సెల్ ఫోన్ మరియు హోమ్ ఫోన్‌ను జాబితా చేయండి.", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select professionals.email_address  , professionals.home_phone  , professionals.cell_number from professionals", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### నిపుణులందరి ఇమెయిల్, సెల్ ఫోన్ మరియు హోమ్ ఫోన్‌ను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి ప్రొఫెషనల్ యొక్క ఇమెయిల్, సెల్ ఫోన్ మరియు హోమ్ ఫోన్ ఏమిటి?", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select professionals.email_address  , professionals.cell_number  , professionals.home_phone from professionals", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి ప్రొఫెషనల్ యొక్క ఇమెయిల్, సెల్ ఫోన్ మరియు హోమ్ ఫోన్ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "సాధ్యమయ్యే అన్ని జాతుల రకం మరియు పరిమాణం రకం కలయికలు ఏమిటి?", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### సాధ్యమయ్యే అన్ని జాతుల రకం మరియు పరిమాణం రకం కలయికలు ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "కుక్కల కోసం ప్రత్యేకమైన జాతి రకం మరియు పరిమాణ రకం కలయికలను కనుగొనండి.", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### కుక్కల కోసం ప్రత్యేకమైన జాతి రకం మరియు పరిమాణ రకం కలయికలను కనుగొనండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "వారు చేసిన చికిత్స యొక్క వివరణతో పాటు నిపుణులందరి మొదటి పేరును జాబితా చేయండి.", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment  , professionals.first_name  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### వారు చేసిన చికిత్స యొక్క వివరణతో పాటు నిపుణులందరి మొదటి పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ప్రతి ప్రొఫెషనల్ యొక్క మొదటి పేరు మరియు వారు చేసిన చికిత్స యొక్క వివరణ ఏమిటి?", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ప్రతి ప్రొఫెషనల్ యొక్క మొదటి పేరు మరియు వారు చేసిన చికిత్స యొక్క వివరణ ఏమిటి? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "singer", "question": "ఎంతమంది గాయకులు ఉన్నారు?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఎంతమంది గాయకులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "గాయకుల సంఖ్య ఎంత?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### గాయకుల సంఖ్య ఎంత? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "నికర విలువ యొక్క ఆరోహణ క్రమంలో గాయకుల పేరును జాబితా చేయండి.", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### నికర విలువ యొక్క ఆరోహణ క్రమంలో గాయకుల పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ఆరోహణ నికర విలువ ద్వారా ఆర్డర్ చేసిన గాయకుల పేర్లు ఏమిటి?", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఆరోహణ నికర విలువ ద్వారా ఆర్డర్ చేసిన గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "గాయకుల పుట్టిన సంవత్సరం మరియు పౌరసత్వం ఏమిటి?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.birth_year  , singer.citizenship from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### గాయకుల పుట్టిన సంవత్సరం మరియు పౌరసత్వం ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "గాయకుల పుట్టిన సంవత్సరాలు మరియు పౌరసత్వం ఏమిటి?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select singer.birth_year  , singer.citizenship from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### గాయకుల పుట్టిన సంవత్సరాలు మరియు పౌరసత్వం ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "&quot;ఫ్రాన్స్&quot; పౌరసత్వం లేని గాయకుల పేరును జాబితా చేయండి.", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer where singer.citizenship  != 'ఫ్రాన్స్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### &quot;ఫ్రాన్స్&quot; పౌరసత్వం లేని గాయకుల పేరును జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ఫ్రెంచ్ పౌరులు కాని గాయకుల పేర్లు ఏమిటి?", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer where singer.citizenship = 'French'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఫ్రెంచ్ పౌరులు కాని గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "పుట్టిన సంవత్సరం 1948 లేదా 1949 అయిన గాయకుల పేరును చూపించాలా?", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### పుట్టిన సంవత్సరం 1948 లేదా 1949 అయిన గాయకుల పేరును చూపించాలా? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "పుట్టిన సంవత్సరాలు 1948 లేదా 1949 అయిన గాయకుల పేర్లు ఏమిటి?", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### పుట్టిన సంవత్సరాలు 1948 లేదా 1949 అయిన గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "అత్యధిక నికర విలువ కలిగిన గాయకుడి పేరు ఏమిటి?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer where singer.net_worth_millions = ( select max ( singer.net_worth_millions ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### అత్యధిక నికర విలువ కలిగిన గాయకుడి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "అత్యంత విలువైన గాయకుడి పేరు ఏమిటి?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer order by singer.net_worth_millions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### అత్యంత విలువైన గాయకుడి పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "గాయకుల విభిన్న పౌరసత్వం మరియు ప్రతి పౌరసత్వం యొక్క గాయకుల సంఖ్యను చూపండి.", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select count ( distinct singer.singer_id ) as total_singers  , count ( distinct singer.citizenship ) as total_citizenships from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### గాయకుల విభిన్న పౌరసత్వం మరియు ప్రతి పౌరసత్వం యొక్క గాయకుల సంఖ్యను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ప్రతి పౌరసత్వానికి, ఆ దేశం నుండి ఎంత మంది గాయకులు ఉన్నారు?", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select count ( singer.singer_id ) as total_singers from singer where singer.citizenship = 'పౌరసత్వం'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ప్రతి పౌరసత్వానికి, ఆ దేశం నుండి ఎంత మంది గాయకులు ఉన్నారు? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "దయచేసి గాయకుల అత్యంత సాధారణ పౌరసత్వాన్ని చూపండి.", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.name  , singer.birth_year  , singer.net_worth_millions  , singer.citizenship from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### దయచేసి గాయకుల అత్యంత సాధారణ పౌరసత్వాన్ని చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "అత్యంత సాధారణ గాయకుడు పౌరసత్వం ఏమిటి?", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.name  , singer.citizenship from singer where singer.net_worth_millions < 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### అత్యంత సాధారణ గాయకుడు పౌరసత్వం ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "వివిధ పౌరసత్వాలు మరియు ప్రతి పౌరసత్వం యొక్క గాయకుల గరిష్ట నికర విలువను చూపండి.", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select singer.name  , max ( singer.net_worth_millions ) as highest_net_worth from singer group by singer.citizenship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### వివిధ పౌరసత్వాలు మరియు ప్రతి పౌరసత్వం యొక్క గాయకుల గరిష్ట నికర విలువను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ప్రతి పౌరసత్వానికి, గరిష్ట నికర విలువ ఎంత?", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select min ( net_worth_millions ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ప్రతి పౌరసత్వానికి, గరిష్ట నికర విలువ ఎంత? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "పాటల శీర్షికలు మరియు గాయకుల పేర్లను చూపండి.", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select song.title  , singer.name from song join singer on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### పాటల శీర్షికలు మరియు గాయకుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "పాటల పేర్లు మరియు గాయకుల పేర్లు ఏమిటి?", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select song.title  , singer.name from song join singer on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### పాటల పేర్లు మరియు గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "300000 కంటే ఎక్కువ విక్రయాలు కలిగిన పాటలను కలిగి ఉన్న గాయకుల విభిన్న పేర్లను చూపండి.", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id where song.sales > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 300000 కంటే ఎక్కువ విక్రయాలు కలిగిన పాటలను కలిగి ఉన్న గాయకుల విభిన్న పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "300000 కంటే ఎక్కువ అమ్మకాలు ఉన్న గాయకుల పేర్లు ఏమిటి?", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select singer.name from singer group by singer.name having count ( * ) > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 300000 కంటే ఎక్కువ అమ్మకాలు ఉన్న గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ఒకటి కంటే ఎక్కువ పాటలను కలిగి ఉన్న గాయకుల పేర్లను చూపండి.", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id group by singer.name having count ( song.song_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఒకటి కంటే ఎక్కువ పాటలను కలిగి ఉన్న గాయకుల పేర్లను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ఒకటి కంటే ఎక్కువ పాటలను కలిగి ఉన్న గాయకుల పేర్లు ఏమిటి?", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id group by singer.name having count ( song.song_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఒకటి కంటే ఎక్కువ పాటలను కలిగి ఉన్న గాయకుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "గాయకుల పేర్లు మరియు వారి పాటల మొత్తం విక్రయాలను చూపండి.", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , sum ( song.sales ) as total_sales from singer join song on song.singer_id = singer.singer_id group by singer.name order by total_sales desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### గాయకుల పేర్లు మరియు వారి పాటల మొత్తం విక్రయాలను చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ప్రతి గాయకుడు పేరు, వారి పాటల మొత్తం అమ్మకాలు ఎంత?", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , sum ( song.sales ) as total_sales from singer join song on song.singer_id = singer.singer_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ప్రతి గాయకుడు పేరు, వారి పాటల మొత్తం అమ్మకాలు ఎంత? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "పాటలు లేని గాయకుల పేర్లను జాబితా చేయండి.", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer left join song on singer.singer_id = song.singer_id where song.singer_id is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### పాటలు లేని గాయకుల పేర్లను జాబితా చేయండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ఏ పాట లేని ప్రతి పాటకు పేరేంటి?", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select song.title  , singer.name from song join singer on song.singer_id = singer.singer_id where song.title is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ఏ పాట లేని ప్రతి పాటకు పేరేంటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "1945కి ముందు మరియు 1955 తర్వాత పుట్టిన సంవత్సరంతో గాయకులు పంచుకున్న పౌరసత్వాన్ని చూపండి.", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select singer.name  , singer.birth_year from singer where singer.birth_year < 1945 or singer.birth_year > 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 1945కి ముందు మరియు 1955 తర్వాత పుట్టిన సంవత్సరంతో గాయకులు పంచుకున్న పౌరసత్వాన్ని చూపండి. \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "1945కి ముందు మరియు 1955 తర్వాత పుట్టిన సంవత్సరం ఉన్న గాయకులు పంచుకునే పౌరసత్వాలు ఏమిటి?", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select singer.name  , singer.birth_year  , singer.citizenship from singer where singer.birth_year < 1945 or singer.birth_year > 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### 1945కి ముందు మరియు 1955 తర్వాత పుట్టిన సంవత్సరం ఉన్న గాయకులు పంచుకునే పౌరసత్వాలు ఏమిటి? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "real_estate_properties", "question": "మొత్తంగా ఎన్ని ఫీచర్లు అందుబాటులో ఉన్నాయి?", "query": "select count ( * ) from other_available_features", "predicted_sql": "select count ( distinct other_available_features.feature_id ) as total_available_features from other_available_features", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### మొత్తంగా ఎన్ని ఫీచర్లు అందుబాటులో ఉన్నాయి? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "ఫీచర్ ఎయిర్‌కాన్ యొక్క ఫీచర్ రకం పేరు ఏమిటి?", "query": "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'", "predicted_sql": "select ref_feature_types.feature_type_name from ref_feature_types join other_available_features on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'ఫీచర్ ఎయిర్‌కాన్'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### ఫీచర్ ఎయిర్‌కాన్ యొక్క ఫీచర్ రకం పేరు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "ఆ కోడ్‌కు సంబంధించిన ప్రాపర్టీల రకానికి సంబంధించిన వివరణలను చూపండి.", "query": "select ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code", "predicted_sql": "select ref_property_types.property_type_description from ref_property_types join properties on properties.property_type_code = ref_property_types.property_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### ఆ కోడ్‌కు సంబంధించిన ప్రాపర్టీల రకానికి సంబంధించిన వివరణలను చూపండి. \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "1 కంటే ఎక్కువ గదులు ఉన్న ఇళ్లు లేదా అపార్ట్‌మెంట్‌ల ఆస్తుల పేర్లు ఏమిటి?", "query": "select property_name from properties where property_type_code = 'House' union select property_name from properties where property_type_code = 'Apartment' and room_count > 1", "predicted_sql": "select properties.property_name from properties where properties.room_count > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### 1 కంటే ఎక్కువ గదులు ఉన్న ఇళ్లు లేదా అపార్ట్‌మెంట్‌ల ఆస్తుల పేర్లు ఏమిటి? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
