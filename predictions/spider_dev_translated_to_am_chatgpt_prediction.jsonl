{"db_id": "concert_singer", "question": "ስንት ዘፋኞች አሉን?", "query": "select count ( * ) from singer", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ስንት ዘፋኞች አሉን? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "አጠቃላይ የዘፋኞች ቁጥር ስንት ነው?", "query": "select count ( * ) from singer", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### አጠቃላይ የዘፋኞች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ስም፣ ሀገር፣ እድሜ ከትልቁ እስከ ታናሹ በእድሜ የታዘዙ ለሁሉም ዘፋኞች አሳይ።", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ስም፣ ሀገር፣ እድሜ ከትልቁ እስከ ታናሹ በእድሜ የታዘዙ ለሁሉም ዘፋኞች አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ዘፋኝ በእድሜ ቅደም ተከተል ውስጥ ስሞች ፣ አገሮች እና ዕድሜዎች ስንት ናቸው?", "query": "select name , country , age from singer order by age desc", "predicted_sql": "select count ( * ) from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ዘፋኝ በእድሜ ቅደም ተከተል ውስጥ ስሞች ፣ አገሮች እና ዕድሜዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከፈረንሳይ የመጡ የሁሉም ዘፋኞች አማካይ፣ ዝቅተኛ እና ከፍተኛ ዕድሜ ስንት ነው?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "select count ( * ) as total_count from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከፈረንሳይ የመጡ የሁሉም ዘፋኞች አማካይ፣ ዝቅተኛ እና ከፍተኛ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለሁሉም የፈረንሳይ ዘፋኞች አማካይ፣ ዝቅተኛ እና ከፍተኛው ዕድሜ ስንት ነው?", "query": "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለሁሉም የፈረንሳይ ዘፋኞች አማካይ፣ ዝቅተኛ እና ከፍተኛው ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በትልቁ ዘፋኝ የዘፈኑን ስም እና የተለቀቀበትን ዓመት አሳይ።", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "select singer.name  , singer.age from singer where singer.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በትልቁ ዘፋኝ የዘፈኑን ስም እና የተለቀቀበትን ዓመት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለታናሹ ዘፋኝ ዘፈኖች ሁሉ ስሞች እና የመልቀቂያ ዓመታት ምንድ ናቸው?", "query": "select song_name , song_release_year from singer order by age asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለታናሹ ዘፋኝ ዘፈኖች ሁሉ ስሞች እና የመልቀቂያ ዓመታት ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ዕድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች የመጡባቸው አገሮች የትኞቹ ናቸው?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select singer.name from singer where singer.age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ዕድሜያቸው ከ20 በላይ የሆኑ ዘፋኞች የመጡባቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ዕድሜያቸው ከ 20 በላይ የሆኑ ዘፋኞች ያላቸው የተለያዩ አገሮች የትኞቹ ናቸው?", "query": "select distinct country from singer where age > 20", "predicted_sql": "select singer.name from singer where singer.age > 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ዕድሜያቸው ከ 20 በላይ የሆኑ ዘፋኞች ያላቸው የተለያዩ አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ሁሉንም አገሮች እና በእያንዳንዱ ሀገር ውስጥ ያሉትን የዘፋኞች ብዛት አሳይ።", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select stadium.name  , count ( singer.singer_id ) as total_singers from stadium join concert on concert.stadium_id = stadium.stadium_id join singer_in_concert on singer_in_concert.concert_id = concert.concert_id join singer on singer.singer_id = singer_in_concert.singer_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ሁሉንም አገሮች እና በእያንዳንዱ ሀገር ውስጥ ያሉትን የዘፋኞች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከየአገሩ ስንት ዘፋኞች ናቸው?", "query": "select country , count ( * ) from singer group by country", "predicted_sql": "select count ( distinct singer.singer_id ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከየአገሩ ስንት ዘፋኞች ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ሁሉንም የዘፈኖች ስሞች ከአማካይ ዕድሜ በላይ ይዘርዝሩ።", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ሁሉንም የዘፈኖች ስሞች ከአማካይ ዕድሜ በላይ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከአማካይ በላይ የቆዩ ዘፋኞች ሁሉም የዘፈን ስሞች ምንድ ናቸው?", "query": "select song_name from singer where age > ( select avg ( age ) from singer )", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከአማካይ በላይ የቆዩ ዘፋኞች ሁሉም የዘፈን ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ 5000 እና 10000 መካከል አቅም ላላቸው ስታዲየሞች ሁሉ ቦታ እና ስም አሳይ።", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ 5000 እና 10000 መካከል አቅም ላላቸው ስታዲየሞች ሁሉ ቦታ እና ስም አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ 5000 እና 10000 መካከል አቅም ያላቸው የሁሉም ጣቢያዎች ቦታዎች እና ስሞች ምንድ ናቸው?", "query": "select location , name from stadium where capacity between 5000 and 10000", "predicted_sql": "select stadium.location  , stadium.name from stadium where stadium.capacity between 5000 and 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ 5000 እና 10000 መካከል አቅም ያላቸው የሁሉም ጣቢያዎች ቦታዎች እና ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም ስታዲየሞች ከፍተኛው አቅም እና አማካይ ምን ያህል ነው?", "query": "select max ( capacity ) , average from stadium", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም ስታዲየሞች ከፍተኛው አቅም እና አማካይ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም ስታዲየሞች አማካይ እና ከፍተኛ አቅም ምን ያህል ነው?", "query": "select avg ( capacity ) , max ( capacity ) from stadium", "predicted_sql": "select stadium.stadium_id  , stadium.location  , stadium.name  , stadium.capacity  , stadium.highest  , stadium.lowest  , stadium.average from stadium", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም ስታዲየሞች አማካይ እና ከፍተኛ አቅም ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከፍተኛ አማካይ ተመልካች ላለበት የስታዲየም ስም እና አቅም ስንት ነው?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "select stadium.name  , count ( distinct stadium.capacity ) as num_of_capacity_types from stadium group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከፍተኛ አማካይ ተመልካች ላለበት የስታዲየም ስም እና አቅም ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከፍተኛው አማካኝ ተመልካች ያለው ስታዲየም ስም እና አቅም ምን ይባላል?", "query": "select name , capacity from stadium order by average desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከፍተኛው አማካኝ ተመልካች ያለው ስታዲየም ስም እና አቅም ምን ይባላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ 2014 ወይም 2015 ስንት ኮንሰርቶች አሉ?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select count ( concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ 2014 ወይም 2015 ስንት ኮንሰርቶች አሉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ወይም 2015 ስንት ኮንሰርቶች ተከስተዋል?", "query": "select count ( * ) from concert where year = 2014 or year = 2015", "predicted_sql": "select concert.concert_name from concert where concert.year = 2014 or concert.year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ወይም 2015 ስንት ኮንሰርቶች ተከስተዋል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በእያንዳንዱ ስታዲየም የስታዲየም ስም እና የኮንሰርቶች ብዛት አሳይ።", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select stadium.name  , count ( concert.concert_id ) as num_concerts from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በእያንዳንዱ ስታዲየም የስታዲየም ስም እና የኮንሰርቶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ስታዲየም ስንት ኮንሰርቶች እዚያ ይጫወታሉ?", "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id", "predicted_sql": "select count ( * ) from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ስታዲየም ስንት ኮንሰርቶች እዚያ ይጫወታሉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እ.ኤ.አ. በ2014 ወይም ከዚያ በኋላ በአብዛኛዎቹ የኮንሰርቶች ብዛት የስታዲየም ስም እና አቅም ያሳዩ።", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year >= 2014 group by singer.name having count ( concert.concert_id ) > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እ.ኤ.አ. በ2014 ወይም ከዚያ በኋላ በአብዛኛዎቹ የኮንሰርቶች ብዛት የስታዲየም ስም እና አቅም ያሳዩ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ከ 2013 በኋላ ብዙ ኮንሰርቶች ያሉት የስታዲየም ስም እና አቅም ስንት ነው?", "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by stadium.stadium_id order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct concert.concert_name ) as total_concerts from concert where concert.year >= 2013", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ከ 2013 በኋላ ብዙ ኮንሰርቶች ያሉት የስታዲየም ስም እና አቅም ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ብዙ የኮንሰርቶች ብዛት ያለው የትኛው ዓመት ነው?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct singer.age ) as number_of_ages from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ብዙ የኮንሰርቶች ብዛት ያለው የትኛው ዓመት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ብዙ ኮንሰርቶች የበዙበት አመት ስንት ነው?", "query": "select year from concert group by year order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct concert.year ) as num_years from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ብዙ ኮንሰርቶች የበዙበት አመት ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ያለ ኮንሰርት የስታዲየም ስሞችን አሳይ።", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select concert.concert_name  , concert.theme  , stadium.name  , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ያለ ኮንሰርት የስታዲየም ስሞችን አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ያለ ኮንሰርት የስታዲየሞች ስም ማን ይባላል?", "query": "select name from stadium where stadium_id not in ( select stadium_id from concert )", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ያለ ኮንሰርት የስታዲየሞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እድሜው ከ40 በላይ የሆነ ዘፋኝ እና ከ30 በታች የሆነ ዘፋኝ የመጡበትን ሀገራት አሳይ።", "query": "select country from singer where age > 40 intersect select country from singer where age < 30", "predicted_sql": "select stadium.name from stadium where stadium.highest > 40 and stadium.lowest < 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እድሜው ከ40 በላይ የሆነ ዘፋኝ እና ከ30 በታች የሆነ ዘፋኝ የመጡበትን ሀገራት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 ኮንሰርት ካላቸው ስታዲየሞች በስተቀር ለሁሉም ስታዲየሞች ስም አሳይ።", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select concert_name from concert where year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 ኮንሰርት ካላቸው ስታዲየሞች በስተቀር ለሁሉም ስታዲየሞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እ.ኤ.አ. በ2014 ኮንሰርት ያልነበራቸው ስታዲየሞች በሙሉ ስም ማን ይባላሉ?", "query": "select name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እ.ኤ.አ. በ2014 ኮንሰርት ያልነበራቸው ስታዲየሞች በሙሉ ስም ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "የሁሉም ኮንሰርቶች ስም እና ጭብጥ እና በእያንዳንዱ ኮንሰርት ውስጥ የዘፋኞች ብዛት አሳይ።", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "select singer.name  , singer.age from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### የሁሉም ኮንሰርቶች ስም እና ጭብጥ እና በእያንዳንዱ ኮንሰርት ውስጥ የዘፋኞች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ኮንሰርት የዘፋኞች ስም፣ ጭብጥ እና ቁጥር ስንት ነው?", "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ኮንሰርት የዘፋኞች ስም፣ ጭብጥ እና ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ዘፋኝ የዘፋኞች ስም እና የኮንሰርቶች ብዛት ይዘርዝሩ።", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ዘፋኝ የዘፋኞች ስም እና የኮንሰርቶች ብዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ለእያንዳንዱ ሰው የዘፋኞች ስም እና የኮንሰርት ብዛት ስንት ነው?", "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.singer_id", "predicted_sql": "select singer.name  , count ( concert.concert_id ) as concert_count from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id group by singer.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ለእያንዳንዱ ሰው የዘፋኞች ስም እና የኮንሰርት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እ.ኤ.አ. በ2014 በኮንሰርቶች ውስጥ ያሉትን ሁሉንም የዘፋኞች ስም ይዘርዝሩ።", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እ.ኤ.አ. በ2014 በኮንሰርቶች ውስጥ ያሉትን ሁሉንም የዘፋኞች ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እ.ኤ.አ. በ 2014 በኮንሰርት ላይ የተጫወቱት ዘፋኞች ስም ማን ይባላል?", "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014", "predicted_sql": "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on concert.concert_id = singer_in_concert.concert_id where concert.year = 2014", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እ.ኤ.አ. በ 2014 በኮንሰርት ላይ የተጫወቱት ዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በስሙ &#39;ሄይ&#39; የሚል ዘፈን ያለው ዘፋኝ ስሙ እና ብሔር ማን ይባላል?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , singer.country from singer where singer.name = 'ሄይ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በስሙ &#39;ሄይ&#39; የሚል ዘፈን ያለው ዘፋኝ ስሙ እና ብሔር ማን ይባላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "ዘፋኝ ሁሉ በርዕሱ &#39;ሄይ&#39; የሚል ዘፈን ያለው ስም እና የትውልድ አገር ማን ይባላል?", "query": "select name , country from singer where song_name like '%Hey%'", "predicted_sql": "select singer.name  , singer.country from singer where singer.song_name = 'ሄይ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### ዘፋኝ ሁሉ በርዕሱ &#39;ሄይ&#39; የሚል ዘፈን ያለው ስም እና የትውልድ አገር ማን ይባላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በ2014 እና 2015 በሁለቱም ዓመታት ውስጥ አንዳንድ ኮንሰርቶች የተከናወኑትን የስታዲየሞችን ስም እና ቦታ ያግኙ።", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select concert.concert_name  , concert.year  , stadium.name  , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year in ( 2014  , 2015 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በ2014 እና 2015 በሁለቱም ዓመታት ውስጥ አንዳንድ ኮንሰርቶች የተከናወኑትን የስታዲየሞችን ስም እና ቦታ ያግኙ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "እ.ኤ.አ. በ2014 እና በ2015 የተከናወኑ ኮንሰርቶች የነበራቸው የስታዲየሞች ስም እና ቦታ ምን ይመስላል?", "query": "select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015", "predicted_sql": "select concert.concert_name  , concert.year  , stadium.name  , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 or concert.year = 2015", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### እ.ኤ.አ. በ2014 እና በ2015 የተከናወኑ ኮንሰርቶች የነበራቸው የስታዲየሞች ስም እና ቦታ ምን ይመስላል? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በስታዲየሙ ውስጥ ከፍተኛ አቅም ያላቸውን የኮንሰርቶች ብዛት ይፈልጉ።", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "select stadium.name  , count ( concert.concert_id ) as total_concerts from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በስታዲየሙ ውስጥ ከፍተኛ አቅም ያላቸውን የኮንሰርቶች ብዛት ይፈልጉ። \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "concert_singer", "question": "በስታዲየም ውስጥ ትልቅ አቅም ያለው ኮንሰርቶች ብዛት ስንት ነው?", "query": "select count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )", "predicted_sql": "select count ( * ) from concert", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | stadium : stadium.stadium_id , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.average | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.age , singer.is_male | concert : concert.concert_id , concert.concert_name , concert.theme , concert.stadium_id , concert.year | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id# \n ### በስታዲየም ውስጥ ትልቅ አቅም ያለው ኮንሰርቶች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["stadium.*", "stadium.stadium_id", "stadium.location", "stadium.name", "stadium.capacity", "stadium.highest", "stadium.lowest", "stadium.average", "singer.*", "singer.singer_id", "singer.name", "singer.country", "singer.song_name", "singer.song_release_year", "singer.age", "singer.is_male", "concert.*", "concert.concert_id", "concert.concert_name", "concert.theme", "concert.stadium_id", "concert.year", "singer_in_concert.*", "singer_in_concert.concert_id", "singer_in_concert.singer_id"]}
{"db_id": "pets_1", "question": "ክብደታቸው ከ 10 በላይ የሆኑ የቤት እንስሳትን ቁጥር ያግኙ.", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select student.stuid  , student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ክብደታቸው ከ 10 በላይ የሆኑ የቤት እንስሳትን ቁጥር ያግኙ. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከ 10 በላይ ክብደት ያላቸው የቤት እንስሳት ስንት ናቸው?", "query": "select count ( * ) from pets where weight > 10", "predicted_sql": "select count ( distinct pettype ) from pets limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከ 10 በላይ ክብደት ያላቸው የቤት እንስሳት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ትንሹን ውሻ ክብደት ያግኙ.", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , student.age  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ትንሹን ውሻ ክብደት ያግኙ. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ትንሹ ውሻ ምን ያህል ይመዝናል?", "query": "select weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname from student where student.city_code = 'ትንሹ ውሻ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ትንሹ ውሻ ምን ያህል ይመዝናል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳ ከፍተኛውን ክብደት ያግኙ. ከፍተኛውን ክብደት እና የቤት እንስሳ አይነት ይዘርዝሩ።", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype from pets where pets.pet_age > 5 and pets.weight > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳ ከፍተኛውን ክብደት ያግኙ. ከፍተኛውን ክብደት እና የቤት እንስሳ አይነት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳ ከፍተኛውን ክብደት እና አይነት ይዘርዝሩ።", "query": "select max ( weight ) , pettype from pets group by pettype", "predicted_sql": "select student.major from student where student.city_code = 'ክብደት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳ ከፍተኛውን ክብደት እና አይነት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ዕድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙ የቤት እንስሳትን ቁጥር ያግኙ።", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.city_code from student limit 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ዕድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙ የቤት እንስሳትን ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "እድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙት የቤት እንስሳት ስንት ናቸው?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid where student.age > 20", "predicted_sql": "select count ( distinct student.city_code ) as num_house_types from student limit 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### እድሜያቸው ከ20 በላይ በሆኑ ተማሪዎች የተያዙት የቤት እንስሳት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በሴት ተማሪዎች የሚነሱትን የውሻ የቤት እንስሳት ብዛት ያግኙ (ከወሲብ F ጋር)።", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select student.fname  , student.lname  , student.sex  , count ( has_pet.petid ) as pet_count from student inner join has_pet on student.stuid = has_pet.stuid inner join pets on has_pet.petid = pets.petid where student.sex = 'F' group by student.fname  , student.lname  , student.sex", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በሴት ተማሪዎች የሚነሱትን የውሻ የቤት እንስሳት ብዛት ያግኙ (ከወሲብ F ጋር)። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "በሴት ተማሪዎች ስንት የውሻ የቤት እንስሳት ያደጉ?", "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'", "predicted_sql": "select student.sex  , count ( distinct student.major ) as num_of_majors from student where student.sex = 'Female' group by student.sex", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### በሴት ተማሪዎች ስንት የውሻ የቤት እንስሳት ያደጉ? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የተለያዩ የቤት እንስሳትን ብዛት ይፈልጉ።", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select count ( * ) from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የተለያዩ የቤት እንስሳትን ብዛት ይፈልጉ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ምን ያህል የተለያዩ የቤት እንስሳ ዓይነቶች አሉ?", "query": "select count ( distinct pettype ) from pets", "predicted_sql": "select student.major from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ምን ያህል የተለያዩ የቤት እንስሳ ዓይነቶች አሉ? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት ወይም ውሻ የቤት እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም ያግኙ።", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student where student.age = 20", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት ወይም ውሻ የቤት እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት ወይም ውሻ እንደ የቤት እንስሳ ያለው እያንዳንዱ ተማሪ የመጀመሪያ ስም ማን ይባላል?", "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' or pets.pettype = 'dog'", "predicted_sql": "select student.fname from student where student.age = 25", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት ወይም ውሻ እንደ የቤት እንስሳ ያለው እያንዳንዱ ተማሪ የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ሁለቱም ድመት እና ውሻ የቤት እንስሳት ያላቸውን የመጀመሪያ ስም ያግኙ።", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname  , student.lname from student where student.age >= 18 and student.city_code = 'Addis Ababa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ሁለቱም ድመት እና ውሻ የቤት እንስሳት ያላቸውን የመጀመሪያ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመቶችም ሆኑ ውሾች እንደ የቤት እንስሳት ያሏቸው የተማሪዎቹ የመጀመሪያ ስም ማን ይባላል?", "query": "select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog'", "predicted_sql": "select student.fname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመቶችም ሆኑ ውሾች እንደ የቤት እንስሳት ያሏቸው የተማሪዎቹ የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት የቤት እንስሳ የሌላቸውን ተማሪዎች ዋና እና እድሜ ያግኙ።", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት የቤት እንስሳ የሌላቸውን ተማሪዎች ዋና እና እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት እንደ የቤት እንስሳ ያልሆነው ተማሪ ሁሉ ምን ዋና ትምህርት አለው እና እድሜያቸው ስንት ነው?", "query": "select major , age from student where stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.major  , student.age from student where student.major = 'የቤት እንስሳ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት እንደ የቤት እንስሳ ያልሆነው ተማሪ ሁሉ ምን ዋና ትምህርት አለው እና እድሜያቸው ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመት የቤት እንስሳ የሌላቸውን ተማሪዎች መታወቂያ ያግኙ።", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "select student.fname  , student.lname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመት የቤት እንስሳ የሌላቸውን ተማሪዎች መታወቂያ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ድመቶች እንደ የቤት እንስሳት የሌላቸው ተማሪዎች መታወቂያቸው ምንድን ነው?", "query": "select stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ድመቶች እንደ የቤት እንስሳት የሌላቸው ተማሪዎች መታወቂያቸው ምንድን ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻ ያላቸው ግን ድመት እንደ የቤት እንስሳ የሌላቸውን ተማሪዎች የመጀመሪያ ስም እና እድሜ ያግኙ።", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.lname  , student.fname  , student.age from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻ ያላቸው ግን ድመት እንደ የቤት እንስሳ የሌላቸውን ተማሪዎች የመጀመሪያ ስም እና እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ውሻ ያለው ግን ድመት የሌለው ተማሪ ሁሉ የመጀመሪያ ስም ማን ይባላል?", "query": "select student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog' and student.stuid not in ( select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' )", "predicted_sql": "select student.fname from student where student.age = 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ውሻ ያለው ግን ድመት የሌለው ተማሪ ሁሉ የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ትንሹን የቤት እንስሳ አይነት እና ክብደት ያግኙ።", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select student.fname  , student.lname  , pets.pettype  , pets.pet_age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ትንሹን የቤት እንስሳ አይነት እና ክብደት ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ትንሹ እንስሳ ምን ዓይነት የቤት እንስሳ ነው, እና ክብደቱ ምን ያህል ነው?", "query": "select pettype , weight from pets order by pet_age asc limit 1", "predicted_sql": "select pets.pettype  , count ( * ) as count from pets group by pets.pettype order by count desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ትንሹ እንስሳ ምን ዓይነት የቤት እንስሳ ነው, እና ክብደቱ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ዕድሜያቸው ከ1 በላይ የሆኑ የቤት እንስሳትን መታወቂያ እና ክብደት ያግኙ።", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select student.lname  , student.fname  , student.age  , student.sex  , student.major  , student.advisor  , student.city_code from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ዕድሜያቸው ከ1 በላይ የሆኑ የቤት እንስሳትን መታወቂያ እና ክብደት ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከ1 በላይ የሆነው እያንዳንዱ የቤት እንስሳ መታወቂያ እና ክብደት ስንት ነው?", "query": "select petid , weight from pets where pet_age > 1", "predicted_sql": "select count ( distinct pettype ) from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከ1 በላይ የሆነው እያንዳንዱ የቤት እንስሳ መታወቂያ እና ክብደት ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳ አማካይ እና ከፍተኛውን ዕድሜ ያግኙ።", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select student.fname  , student.lname  , student.major  , student.advisor  , student.city_code from student where student.major = 'ቤት' and student.age >= 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳ አማካይ እና ከፍተኛውን ዕድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳት ዓይነት አማካይ እና ከፍተኛው ዕድሜ ስንት ነው?", "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype  , count ( distinct student.stuid ) as num_students from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by pets.pettype order by num_students desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳት ዓይነት አማካይ እና ከፍተኛው ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳ አይነት አማካይ ክብደት ያግኙ.", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select pets.pettype from pets", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳ አይነት አማካይ ክብደት ያግኙ. \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ለእያንዳንዱ የቤት እንስሳ አማካይ ክብደት ምን ያህል ነው?", "query": "select avg ( weight ) , pettype from pets group by pettype", "predicted_sql": "select student.major from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ለእያንዳንዱ የቤት እንስሳ አማካይ ክብደት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የቤት እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም እና እድሜ ያግኙ።", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.fname  , student.lname  , student.age from student where student.major = 'ቤት እንስሳ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የቤት እንስሳ ያላቸውን ተማሪዎች የመጀመሪያ ስም እና እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የቤት እንስሳት ያሏቸው ተማሪዎች የመጀመሪያ ስሞች እና ዕድሜዎች ምንድ ናቸው?", "query": "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid", "predicted_sql": "select student.lname  , student.fname  , student.age  , student.sex from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የቤት እንስሳት ያሏቸው ተማሪዎች የመጀመሪያ ስሞች እና ዕድሜዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የአያት ስሙ &#39;ስሚዝ&#39; በተባለ ተማሪ ንብረትነቱ የቤት እንስሳውን መታወቂያ ያግኙ።", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select student.fname from student where student.lname = 'ስሚዝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የአያት ስሙ &#39;ስሚዝ&#39; በተባለ ተማሪ ንብረትነቱ የቤት እንስሳውን መታወቂያ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የአያት ስሙ &#39;ስሚዝ&#39; የተባለው ተማሪ ንብረት የሆነው የቤት እንስሳ መታወቂያው ምንድነው?", "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'", "predicted_sql": "select student.major from student where student.fname = 'ስሚዝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የአያት ስሙ &#39;ስሚዝ&#39; የተባለው ተማሪ ንብረት የሆነው የቤት እንስሳ መታወቂያው ምንድነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ማንኛውም የቤት እንስሳ እና የተማሪ መታወቂያ ላለው ለእያንዳንዱ ተማሪ የቤት እንስሳትን ቁጥር ያግኙ።", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ማንኛውም የቤት እንስሳ እና የተማሪ መታወቂያ ላለው ለእያንዳንዱ ተማሪ የቤት እንስሳትን ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የቤት እንስሳ ላላቸው ተማሪዎች፣ እያንዳንዱ ተማሪ ስንት የቤት እንስሳ አለው? ከስሞች ይልቅ መታወቂያቸውን ይዘርዝሩ።", "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የቤት እንስሳ ላላቸው ተማሪዎች፣ እያንዳንዱ ተማሪ ስንት የቤት እንስሳ አለው? ከስሞች ይልቅ መታወቂያቸውን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከአንድ በላይ የቤት እንስሳ ያለው የተማሪውን የመጀመሪያ ስም እና ጾታ ያግኙ።", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.lname from student where student.major = 'እንስሳ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከአንድ በላይ የቤት እንስሳ ያለው የተማሪውን የመጀመሪያ ስም እና ጾታ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ከአንድ በላይ የቤት እንስሳት ያሏቸው ተማሪዎች የመጀመሪያ ስም እና ጾታ ማን ይባላል?", "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid group by student.stuid having count ( * ) > 1", "predicted_sql": "select student.fname  , student.lname from student", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ከአንድ በላይ የቤት እንስሳት ያሏቸው ተማሪዎች የመጀመሪያ ስም እና ጾታ ማን ይባላል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "ዕድሜው 3 የሆነ ድመት ያለው የተማሪውን የመጨረሻ ስም ያግኙ።", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age > 3 order by student.fname desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### ዕድሜው 3 የሆነ ድመት ያለው የተማሪውን የመጨረሻ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የ 3 ዓመት ልጅ የሆነች ድመት ያለው ተማሪ የመጨረሻ ስም ማን ይባላል?", "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pet_age = 3 and pets.pettype = 'cat'", "predicted_sql": "select student.fname from student where student.age = 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የ 3 ዓመት ልጅ የሆነች ድመት ያለው ተማሪ የመጨረሻ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የቤት እንስሳ የሌላቸውን ተማሪዎች አማካኝ እድሜ ያግኙ።", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "select student.fname  , student.lname  , student.age from student where student.major  != 'ቤት እንስሳ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የቤት እንስሳ የሌላቸውን ተማሪዎች አማካኝ እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "pets_1", "question": "የቤት እንስሳ ለሌላቸው ተማሪዎች ሁሉ አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from student where stuid not in ( select stuid from has_pet )", "predicted_sql": "select count ( distinct student.stuid ) as total_students from student where student.major  != 'ቤት እንስሳ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | student : student.stuid , student.lname , student.fname , student.age , student.sex , student.major , student.advisor , student.city_code | has_pet : has_pet.stuid , has_pet.petid | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid# \n ### የቤት እንስሳ ለሌላቸው ተማሪዎች ሁሉ አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["student.*", "student.stuid", "student.lname", "student.fname", "student.age", "student.sex", "student.major", "student.advisor", "student.city_code", "has_pet.*", "has_pet.stuid", "has_pet.petid", "pets.*", "pets.petid", "pets.pettype", "pets.pet_age", "pets.weight"]}
{"db_id": "car_1", "question": "ስንት አህጉራት አሉ?", "query": "select count ( * ) from continents", "predicted_sql": "select continents.continent from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አህጉራት አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የአህጉሮች ቁጥር ስንት ነው?", "query": "select count ( * ) from continents", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የአህጉሮች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እያንዳንዱ አህጉር ስንት አገሮች አሏት? የአህጉሩን መታወቂያ፣ የአህጉር ስም እና የአገሮችን ብዛት ይዘርዝሩ።", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select continents.continent  , count ( distinct countries.countryid ) as num_countries  , count ( distinct car_makers.id ) as num_car_makers from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid group by continents.continent", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እያንዳንዱ አህጉር ስንት አገሮች አሏት? የአህጉሩን መታወቂያ፣ የአህጉር ስም እና የአገሮችን ብዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለእያንዳንዱ አህጉር መታወቂያውን ፣ስሙን እና ስንት አገሮችን ይዘርዝሩ?", "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent group by continents.contid", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለእያንዳንዱ አህጉር መታወቂያውን ፣ስሙን እና ስንት አገሮችን ይዘርዝሩ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት አገሮች ተዘርዝረዋል?", "query": "select count ( * ) from countries", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አገሮች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት አገሮች አሉ?", "query": "select count ( * ) from countries", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት አገሮች አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እያንዳንዱ የመኪና አምራች ምን ያህል ሞዴሎችን ይሠራል? የዝርዝር ሰሪ ሙሉ ስም፣ መታወቂያ እና ቁጥሩ።", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "select model_list.modelid  , model_list.maker  , model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እያንዳንዱ የመኪና አምራች ምን ያህል ሞዴሎችን ይሠራል? የዝርዝር ሰሪ ሙሉ ስም፣ መታወቂያ እና ቁጥሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የእያንዳንዱ መኪና ሰሪ ሙሉ ስም ማን ነው, ከመታወቂያው እና ምን ያህል ሞዴሎችን እንደሚያመርት?", "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የእያንዳንዱ መኪና ሰሪ ሙሉ ስም ማን ነው, ከመታወቂያው እና ምን ያህል ሞዴሎችን እንደሚያመርት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው የመኪና ሞዴል ዝቅተኛው የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "select model_list.modelid from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.accelerate = 'ዝቅተኛ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው የመኪና ሞዴል ዝቅተኛው የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አነስተኛው የፈረስ ጉልበት ያለው የመኪናው ሞዴል ምንድነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አነስተኛው የፈረስ ጉልበት ያለው የመኪናው ሞዴል ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ክብደቱ ከአማካይ ክብደት በታች የሆነውን የመኪናውን ሞዴል ያግኙ.", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ክብደቱ ከአማካይ ክብደት በታች የሆነውን የመኪናውን ሞዴል ያግኙ. \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከአማካይ ያነሰ ክብደት ላለው መኪና ሞዴል ምንድነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )", "predicted_sql": "select model_list.model from model_list where model_list.maker = 'አማካይ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከአማካይ ያነሰ ክብደት ላለው መኪና ሞዴል ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "እ.ኤ.አ. በ 1970 አንዳንድ መኪናዎችን ያመረቱትን አምራቾች ስም ይፈልጉ?", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "select cars_data.id from cars_data where cars_data.year = 1970", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### እ.ኤ.አ. በ 1970 አንዳንድ መኪናዎችን ያመረቱትን አምራቾች ስም ይፈልጉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 1970 መኪና ያመረቱ የተለያዩ መኪና ሰሪዎች ስም ማን ይባላል?", "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = '1970'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 1970 መኪና ያመረቱ የተለያዩ መኪና ሰሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመጀመሪያው አመት ውስጥ የተሰሩትን መኪኖች ማምረት እና ማምረት ጊዜ ይፈልጉ?", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select cars_data.year  , count ( cars_data.id ) as total_cars  , avg ( cars_data.accelerate ) as average_acceleration from cars_data group by cars_data.year order by cars_data.year asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመጀመሪያው አመት ውስጥ የተሰሩትን መኪኖች ማምረት እና ማምረት ጊዜ ይፈልጉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመጀመርያው አመት የመኪናው አምራች ምን ነበር እና ምን አመት ነበር?", "query": "select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = ( select min ( year ) from cars_data )", "predicted_sql": "select cars_data.year from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመጀመርያው አመት የመኪናው አምራች ምን ነበር እና ምን አመት ነበር? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 1980 በኋላ የትኞቹ የተለዩ የመኪና ሞዴሎች ይመረታሉ?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 1980 በኋላ የትኞቹ የተለዩ የመኪና ሞዴሎች ይመረታሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 1980 በኋላ ለተዘጋጁት ካርዶች የተለያዩ ሞዴሎች ምንድ ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 1980 በኋላ ለተዘጋጁት ካርዶች የተለያዩ ሞዴሎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ አህጉር ስንት መኪና ሰሪዎች አሉ? የአህጉሩን ስም እና ቆጠራ ይዘርዝሩ።", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select car_makers.maker  , car_makers.fullname from car_makers", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ አህጉር ስንት መኪና ሰሪዎች አሉ? የአህጉሩን ስም እና ቆጠራ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የእያንዳንዱ አህጉር ስም ማን ይባላል እና በእያንዳንዱ ውስጥ ስንት መኪና ሰሪዎች አሉ?", "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent", "predicted_sql": "select car_makers.maker from car_makers where car_makers.fullname = 'አህጉር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የእያንዳንዱ አህጉር ስም ማን ይባላል እና በእያንዳንዱ ውስጥ ስንት መኪና ሰሪዎች አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከአገሮቹ ውስጥ ብዙ መኪና ሰሪዎች ያሉት የትኛው ነው? የአገሩን ስም ይዘርዝሩ።", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከአገሮቹ ውስጥ ብዙ መኪና ሰሪዎች ያሉት የትኛው ነው? የአገሩን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ብዙ መኪና ሰሪዎች ያሏት ሀገር ስም ማን ይባላል?", "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1", "predicted_sql": "select countries.countryname from countries", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ብዙ መኪና ሰሪዎች ያሏት ሀገር ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ ሰሪ ስንት የመኪና ሞዴሎች ይመረታሉ? ቆጠራውን እና የፈጣሪውን ሙሉ ስም ብቻ ይዘርዝሩ።", "query": "select count ( * ) , car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ ሰሪ ስንት የመኪና ሞዴሎች ይመረታሉ? ቆጠራውን እና የፈጣሪውን ሙሉ ስም ብቻ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በእያንዳንዱ ሰሪ የሚመረተው የመኪና ሞዴሎች ብዛት ስንት ነው እና የእያንዳንዱ ሰሪ መታወቂያ እና ሙሉ ስም ማን ነው?", "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.id", "predicted_sql": "select count ( * ) as total_count  , continents.continent as continent_name  , countries.countryname as country_name  , car_makers.maker as car_maker_name  , model_list.model as model_name  , car_names.make as car_make_name  , cars_data.id as car_data_id from continents inner join countries on countries.continent = continents.contid inner join car_makers on car_makers.country = countries.countryid inner join model_list on model_list.maker = car_makers.id inner join car_names on car_names.model = model_list.model inner join cars_data on cars_data.id = car_names.makeid group by continents.continent  , countries.countryname  , car_makers.maker  , model_list.model  , car_names.make  , cars_data.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በእያንዳንዱ ሰሪ የሚመረተው የመኪና ሞዴሎች ብዛት ስንት ነው እና የእያንዳንዱ ሰሪ መታወቂያ እና ሙሉ ስም ማን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የመኪናው ፍጥነት ምን ያህል ነው make amc hornet sportabout (sw)?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select car_names.make from car_names where car_names.model = 'amc hornet sportabout (sw)'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( amc ) , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( amc ) | car_names : car_names.makeid , car_names.model ( amc ) , car_names.make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የመኪናው ፍጥነት ምን ያህል ነው make amc hornet sportabout (sw)? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "amc hornet sportabout (sw) የሚያደርገው መኪናው ምን ያህል ያፋጥናል?", "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)'", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model where car_names.make = 'amc hornet sportabout (sw)'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( amc ) , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( amc ) | car_names : car_names.makeid , car_names.model ( amc ) , car_names.make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### amc hornet sportabout (sw) የሚያደርገው መኪናው ምን ያህል ያፋጥናል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ፈረንሳይ ውስጥ ስንት መኪና ሰሪዎች አሉ?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select count ( distinct cars_data.id ) as num_models from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ፈረንሳይ ውስጥ ስንት መኪና ሰሪዎች አሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በፈረንሳይ ውስጥ የእንክብካቤ ሰጪዎች ቁጥር ስንት ነው?", "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'", "predicted_sql": "select count ( * ) from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በፈረንሳይ ውስጥ የእንክብካቤ ሰጪዎች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በዩኤስ ውስጥ ስንት የመኪና ሞዴሎች ይመረታሉ?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( distinct model_list.modelid ) from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በዩኤስ ውስጥ ስንት የመኪና ሞዴሎች ይመረታሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በዩናይትድ ስቴትስ ውስጥ የተሠሩት የመኪና ሞዴሎች ብዛት ስንት ነው?", "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'", "predicted_sql": "select count ( * ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በዩናይትድ ስቴትስ ውስጥ የተሠሩት የመኪና ሞዴሎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 ሲሊንደሮች ያሏቸው መኪኖች አማካኝ ማይል በአንድ ጋሎን(mpg) ስንት ነው?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "select count ( distinct cars_data.id ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 ሲሊንደሮች ያሏቸው መኪኖች አማካኝ ማይል በአንድ ጋሎን(mpg) ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 ሲሊንደሮች ያላቸው ሁሉም ካርዶች በጋሎን አማካኝ ማይል ስንት ነው?", "query": "select avg ( mpg ) from cars_data where cylinders = 4", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 ሲሊንደሮች ያላቸው ሁሉም ካርዶች በጋሎን አማካኝ ማይል ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 1974 በ 8 ሲሊንደሮች የተመረተው የመኪናው ትንሹ ክብደት ምንድነው?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select cars_data.mpg from cars_data where cars_data.year = 1974 and cars_data.cylinders = 8", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 1974 በ 8 ሲሊንደሮች የተመረተው የመኪናው ትንሹ ክብደት ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 1974 የተሰራው 8 ሲሊንደሮች ያለው የመኪናው ዝቅተኛ ክብደት ስንት ነው?", "query": "select min ( weight ) from cars_data where cylinders = 8 and year = 1974", "predicted_sql": "select count ( * ) from cars_data where year = 1974", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 1974 የተሰራው 8 ሲሊንደሮች ያለው የመኪናው ዝቅተኛ ክብደት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ሁሉም አምራቾች እና ሞዴሎች ምንድናቸው?", "query": "select maker , model from model_list", "predicted_sql": "select continents.contid  , continents.continent  , countries.countryid  , countries.countryname  , countries.continent  , car_makers.id  , car_makers.maker  , car_makers.fullname  , car_makers.country  , model_list.modelid  , model_list.maker  , model_list.model  , car_names.makeid  , car_names.model  , car_names.make  , cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents  , countries  , car_makers  , model_list  , car_names  , cars_data where countries.continent = continents.contid and car_makers.country = countries.countryid and model_list.maker = car_makers.id and car_names.model = model_list.model and cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ሁሉም አምራቾች እና ሞዴሎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አምሳያዎች እና አምራቾች ምንድ ናቸው?", "query": "select maker , model from model_list", "predicted_sql": "select continents.continent  , countries.countryname from continents join countries on countries.continent = continents.contid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አምሳያዎች እና አምራቾች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ አንድ መኪና አምራች ያላቸው አገሮች የትኞቹ ናቸው? የዝርዝር ስም እና መታወቂያ።", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , model_list.model  , car_names.make from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ አንድ መኪና አምራች ያላቸው አገሮች የትኞቹ ናቸው? የዝርዝር ስም እና መታወቂያ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ አንድ መኪና ሰሪ ያላቸው የሁሉም አገሮች ስሞች እና መታወቂያዎች ምንድ ናቸው?", "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ አንድ መኪና ሰሪ ያላቸው የሁሉም አገሮች ስሞች እና መታወቂያዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where cars_data.weight > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where horsepower > 150", "predicted_sql": "select count ( * ) from cars_data where cars_data.weight > 150", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ150 በላይ የፈረስ ጉልበት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በየዓመቱ የመኪናዎች አማካይ ክብደት ስንት ነው?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "select count ( distinct cars_data.id ) as num_car_models from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በየዓመቱ የመኪናዎች አማካይ ክብደት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለእያንዳንዱ አመት አማካይ ክብደት እና አመት ምን ያህል ነው?", "query": "select avg ( weight ) , year from cars_data group by year", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለእያንዳንዱ አመት አማካይ ክብደት እና አመት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በአውሮፓ ውስጥ ቢያንስ 3 የመኪና አምራቾች ያላቸው የትኞቹ አገሮች ናቸው?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "select model_list.model from model_list limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በአውሮፓ ውስጥ ቢያንስ 3 የመኪና አምራቾች ያላቸው የትኞቹ አገሮች ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 3 አምራቾች ያሏቸው ሁሉም የአውሮፓ አገሮች ስሞች ምንድ ናቸው?", "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 3 አምራቾች ያሏቸው ሁሉም የአውሮፓ አገሮች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛው የፈረስ ጉልበት እና የመኪና ሞዴሎች በ 3 ሲሊንደሮች የተሠሩት ምንድነው?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , model_list.model  , car_names.make  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛው የፈረስ ጉልበት እና የመኪና ሞዴሎች በ 3 ሲሊንደሮች የተሠሩት ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 3 ሲሊንደሮች ውስጥ ላሉት ሞዴሎች ትልቁ የፈረስ ጉልበት ምንድነው እና ምን ይሠራል?", "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 3 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.modelid  , model_list.maker  , model_list.model from model_list where model_list.maker = 'car_makers.id'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 3 ሲሊንደሮች ውስጥ ላሉት ሞዴሎች ትልቁ የፈረስ ጉልበት ምንድነው እና ምን ይሠራል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው ሞዴል በጣም ቤንዚን ይቆጥባል? ይህም ማለት በአንድ ጋሎን ከፍተኛው ማይሎች ይኑርዎት።", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው ሞዴል በጣም ቤንዚን ይቆጥባል? ይህም ማለት በአንድ ጋሎን ከፍተኛው ማይሎች ይኑርዎት። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛው mpg ያለው የመኪና ሞዴል ምንድነው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1", "predicted_sql": "select cars_data.mpg from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛው mpg ያለው የመኪና ሞዴል ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ1980 በፊት የመኪኖቹ አማካይ የፈረስ ጉልበት ስንት ነው?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select count ( * ) from cars_data where year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ1980 በፊት የመኪኖቹ አማካይ የፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 1980 በፊት ለተፈጠሩት ሁሉም መኪኖች አማካይ የፈረስ ጉልበት ስንት ነው?", "query": "select avg ( horsepower ) from cars_data where year < 1980", "predicted_sql": "select count ( * ) from cars_data where year >= 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 1980 በፊት ለተፈጠሩት ሁሉም መኪኖች አማካይ የፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የሞዴል ቮልቮ መኪኖች አማካኝ ኤዲስፔል ምን ያህል ነው?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የሞዴል ቮልቮ መኪኖች አማካኝ ኤዲስፔል ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለሁሉም ቮልቮስ አማካኝ ኢዲስፔል ምንድን ነው?", "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'", "predicted_sql": "select continents.continent from continents", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለሁሉም ቮልቮስ አማካኝ ኢዲስፔል ምንድን ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለተለያዩ የሲሊንደሮች ብዛት ከፍተኛው ማፋጠን ምንድነው?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select count ( * ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለተለያዩ የሲሊንደሮች ብዛት ከፍተኛው ማፋጠን ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለሁሉም የተለያዩ ሲሊንደሮች ከፍተኛው ማፋጠን ምንድነው?", "query": "select max ( accelerate ) , cylinders from cars_data group by cylinders", "predicted_sql": "select continents.continent  , countries.countryname  , car_makers.maker  , car_makers.fullname  , car_makers.country  , model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለሁሉም የተለያዩ ሲሊንደሮች ከፍተኛው ማፋጠን ምንድነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው ሞዴል ብዙ የመኪና ስሪት አለው?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው ሞዴል ብዙ የመኪና ስሪት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኛው ሞዴል በጣም የተለያዩ ስሪቶች አሉት?", "query": "select model from car_names group by model order by count ( * ) desc limit 1", "predicted_sql": "select model_list.model from model_list", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኛው ሞዴል በጣም የተለያዩ ስሪቶች አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት መኪናዎች ከ 4 ሲሊንደሮች አላቸው?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select model_list.model from model_list inner join car_names on model_list.modelid = car_names.model inner join cars_data on car_names.makeid = cars_data.id inner join car_makers on model_list.maker = car_makers.id limit 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት መኪናዎች ከ 4 ሲሊንደሮች አላቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 4 ሲሊንደሮች በላይ ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where cylinders > 4", "predicted_sql": "select count ( * ) from continents  , countries  , car_makers  , model_list  , car_names  , cars_data where countries.continent = continents.contid and car_makers.country = countries.countryid and model_list.maker = car_makers.id and car_names.model = model_list.model and cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 4 ሲሊንደሮች በላይ ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 1980 ስንት መኪናዎች ተመርተዋል?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select cars_data.id  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from cars_data where cars_data.year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 1980 ስንት መኪናዎች ተመርተዋል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በ 1980 ስንት መኪናዎች ተሠሩ?", "query": "select count ( * ) from cars_data where year = 1980", "predicted_sql": "select cars_data.id from cars_data where cars_data.year = 1980", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በ 1980 ስንት መኪናዎች ተሠሩ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ሙሉ ስም ያለው የአሜሪካ ሞተር ኩባንያ በሠሪው ስንት የመኪና ሞዴሎች ተመረቱ?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "select count ( model_list.model ) as total_models from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.fullname = 'አሜሪካ' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ሙሉ ስም ያለው የአሜሪካ ሞተር ኩባንያ በሠሪው ስንት የመኪና ሞዴሎች ተመረቱ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመኪና ሰሪው አሜሪካን ሞተር ኩባንያ የተፈጠሩ የመኪና ሞዴሎች ብዛት ስንት ነው?", "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመኪና ሰሪው አሜሪካን ሞተር ኩባንያ የተፈጠሩ የመኪና ሞዴሎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3 በላይ የመኪና ሞዴሎችን የነደፉት የትኞቹ አምራቾች ናቸው? ሙሉ ስም እና መታወቂያውን ይዘርዝሩ።", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.modelid  , model_list.maker  , model_list.model from model_list where model_list.modelid in ( select cars_data.id from cars_data group by cars_data.id having count ( * ) >= 3 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3 በላይ የመኪና ሞዴሎችን የነደፉት የትኞቹ አምራቾች ናቸው? ሙሉ ስም እና መታወቂያውን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3 በላይ ሞዴሎች ያላቸው የሁሉም ሰሪዎች ስሞች እና መታወቂያዎች ምንድ ናቸው?", "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3 በላይ ሞዴሎች ያላቸው የሁሉም ሰሪዎች ስሞች እና መታወቂያዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ሙሉ ስም ያለው ጄኔራል ሞተርስ ወይም ከ 3500 በላይ የሚመዝኑት የትኞቹ ልዩ ሞዴሎች ናቸው?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight > 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ሙሉ ስም ያለው ጄኔራል ሞተርስ ወይም ከ 3500 በላይ የሚመዝኑት የትኞቹ ልዩ ሞዴሎች ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በመኪና ሰሪው ጄኔራል ሞተርስ የተፈጠሩት ወይም ከ 3500 በላይ ክብደት ያላቸው የተለያዩ ሞዴሎች ምንድ ናቸው?", "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.edispl > 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በመኪና ሰሪው ጄኔራል ሞተርስ የተፈጠሩት ወይም ከ 3500 በላይ ክብደት ያላቸው የተለያዩ ሞዴሎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3000 ያላነሱ እና ከ 4000 የማይበልጡ መኪኖች በየትኛው አመት ተመረቱ?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.year between 3000 and 4000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3000 ያላነሱ እና ከ 4000 የማይበልጡ መኪኖች በየትኛው አመት ተመረቱ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 4000 በታች የሆኑ መኪኖች እና እንዲሁም ከ 3000 በላይ ክብደት ያላቸው መኪኖች የተመረቱባቸው የተለያዩ ዓመታት ምን ያህል ናቸው?", "query": "select distinct year from cars_data where weight between 3000 and 4000", "predicted_sql": "select cars_data.year from cars_data where cars_data.id in ( select car_names.makeid from car_names where car_names.model in ( select model_list.model from model_list where model_list.maker in ( select car_makers.id from car_makers where car_makers.country in ( select countries.countryid from countries where countries.continent in ( select continents.contid from continents where continents.continent = 'Africa' ) ) ) ) ) order by cars_data.year desc limit 4000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 4000 በታች የሆኑ መኪኖች እና እንዲሁም ከ 3000 በላይ ክብደት ያላቸው መኪኖች የተመረቱባቸው የተለያዩ ዓመታት ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ትልቁ ፍጥነት ያለው የመኪናው የፈረስ ጉልበት ስንት ነው?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ትልቁ ፍጥነት ያለው የመኪናው የፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከፍተኛ ፍጥነት ያለው የመኪናው የፈረስ ጉልበት ስንት ነው?", "query": "select cars_data.horsepower from cars_data order by cars_data.accelerate desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከፍተኛ ፍጥነት ያለው የመኪናው የፈረስ ጉልበት ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለሞዴል ቮልቮ አነስተኛ ፍጥነት ያለው መኪና ስንት ሲሊንደሮች አሉት?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለሞዴል ቮልቮ አነስተኛ ፍጥነት ያለው መኪና ስንት ሲሊንደሮች አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለቮልቮ ሞዴል፣ በትንሹ የተፋጠነው ስሪት ስንት ሲሊንደሮች አሉት?", "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1", "predicted_sql": "select count ( distinct model_list.modelid ) as total_models from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለቮልቮ ሞዴል፣ በትንሹ የተፋጠነው ስሪት ስንት ሲሊንደሮች አሉት? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ትልቁ የፈረስ ጉልበት ካለው መኪና ምን ያህል መኪኖች ትልቅ ፍጥነት አላቸው?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "select model_list.model from model_list where model_list.maker = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ትልቁ የፈረስ ጉልበት ካለው መኪና ምን ያህል መኪኖች ትልቅ ፍጥነት አላቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "በጣም የፈረስ ጉልበት ካለው የበለጠ ፍጥነት ያላቸው መኪኖች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 )", "predicted_sql": "select count ( * ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### በጣም የፈረስ ጉልበት ካለው የበለጠ ፍጥነት ያላቸው መኪኖች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት ሀገር ከ 2 በላይ መኪና ሰሪዎች አሏቸው?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select continent from countries where countryname = 'Ethiopia' or countryname = 'Kenya'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት ሀገር ከ 2 በላይ መኪና ሰሪዎች አሏቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 2 በላይ መኪና ሰሪዎች ያሏቸው ሀገራት ቁጥር ስንት ነው?", "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 2", "predicted_sql": "select count ( distinct cars_data.id ) as num_models from cars_data where cars_data.id in ( select car_names.makeid from car_names where car_names.model in ( select model_list.model from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.maker = 'Model1' ) ) intersect select car_names.makeid from car_names where car_names.model in ( select model_list.model from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.maker = 'Model2' ) ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 2 በላይ መኪና ሰሪዎች ያሏቸው ሀገራት ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ስንት መኪናዎች ከ6 ሲሊንደሮች አሏቸው?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( distinct model_list.model ) as num_models from continents join countries on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid join model_list on model_list.maker = car_makers.id join car_names on car_names.model = model_list.model join cars_data on cars_data.id = car_names.makeid where continents.continent = 'Africa' or continents.continent = 'Asia' or continents.continent = 'Europe' or continents.continent = 'North America' or continents.continent = 'Oceania' or continents.continent = 'South America'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ስንት መኪናዎች ከ6 ሲሊንደሮች አሏቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ6 ሲሊንደሮች በላይ የሚሽከረከሩት መኪናዎች ቁጥር ስንት ነው?", "query": "select count ( * ) from cars_data where cylinders > 6", "predicted_sql": "select count ( * ) from cars_data", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ6 ሲሊንደሮች በላይ የሚሽከረከሩት መኪናዎች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "4 ሲሊንደሮች ላሏቸው መኪኖች የትኛው ሞዴል ትልቁ የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 4 ሲሊንደሮች ላሏቸው መኪኖች የትኛው ሞዴል ትልቁ የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ለአራቱ ሲሊንደር መኪኖች የትኛው ሞዴል ብዙ የፈረስ ጉልበት አለው?", "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1", "predicted_sql": "select model_list.model from model_list join car_names on model_list.modelid = car_names.model join cars_data on car_names.makeid = cars_data.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ለአራቱ ሲሊንደር መኪኖች የትኛው ሞዴል ብዙ የፈረስ ጉልበት አለው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ዝቅተኛ የፈረስ ጉልበት ካላቸው መኪኖች መካከል ከ 3 ሲሊንደሮች ያልበለጠ የትኞቹ ናቸው? የተሰራውን መኪና ይዘርዝሩ እና ስም አውጡ።", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders <= 3", "predicted_sql": "select model_list.modelid  , model_list.maker  , model_list.model from model_list where model_list.modelid in ( select distinct car_names.model from car_names ) and model_list.modelid in ( select distinct cars_data.id from cars_data ) and model_list.modelid in ( select distinct car_makers.id from car_makers )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ዝቅተኛ የፈረስ ጉልበት ካላቸው መኪኖች መካከል ከ 3 ሲሊንደሮች ያልበለጠ የትኞቹ ናቸው? የተሰራውን መኪና ይዘርዝሩ እና ስም አውጡ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ዝቅተኛው የፈረስ ጉልበት ከሌላቸው መኪኖች መካከል ከ 4 ሲሊንደሮች በታች ያሉት ሁሉ መታወቂያ እና ስም ምን ይባላል?", "query": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ዝቅተኛው የፈረስ ጉልበት ከሌላቸው መኪኖች መካከል ከ 4 ሲሊንደሮች በታች ያሉት ሁሉ መታወቂያ እና ስም ምን ይባላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 ሲሊንደሮች ያለው ወይም ከ 1980 በፊት የተሰራው መኪና በአንድ ጋሎን የሚፈቀደው ከፍተኛው ማይል ስንት ነው?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 ሲሊንደሮች ያለው ወይም ከ 1980 በፊት የተሰራው መኪና በአንድ ጋሎን የሚፈቀደው ከፍተኛው ማይል ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "8 ሲሊንደሮች የነበራቸው ወይም ከ1980 በፊት የተመረቱት መኪኖች ከፍተኛው mpg ስንት ነው?", "query": "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980", "predicted_sql": "select count ( * ) from cars_data where year >= 1980 and mpg is not null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### 8 ሲሊንደሮች የነበራቸው ወይም ከ1980 በፊት የተመረቱት መኪኖች ከፍተኛው mpg ስንት ነው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "የትኞቹ ሞዴሎች ከ 3500 ያነሱ ግን በ‹ፎርድ ሞተር ኩባንያ› ያልተገነቡ ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.modelid  , model_list.maker  , model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.edispl > 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### የትኞቹ ሞዴሎች ከ 3500 ያነሱ ግን በ‹ፎርድ ሞተር ኩባንያ› ያልተገነቡ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3500 ያነሱ ነገር ግን በፎርድ ሞተር ኩባንያ ያልተገነቡት የተለያዩ ሞዴሎች ምንድ ናቸው?", "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year = 3500", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3500 ያነሱ ነገር ግን በፎርድ ሞተር ኩባንያ ያልተገነቡት የተለያዩ ሞዴሎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "አንድ መኪና የማይሰራባቸው አገሮችስ ማን ይባላሉ?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "select car_makers.maker from car_makers where car_makers.maker not in ( select car_names.make from car_names )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### አንድ መኪና የማይሰራባቸው አገሮችስ ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "መኪና ሰሪዎች የሌሉባቸው አገሮች ስም ማን ይባላል?", "query": "select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### መኪና ሰሪዎች የሌሉባቸው አገሮች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 2 ሞዴሎችን እና ከ 3 በላይ መኪናዎችን የሚያመርቱት መኪናዎች የትኞቹ ናቸው? መታወቂያውን እና ፈጣሪውን ይዘርዝሩ።", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model from model_list where model_list.maker in ( select car_makers.id from car_makers where car_makers.country in ( select countries.countryid from countries where countries.continent in ( select continents.contid from continents where continents.continent = 'ቢያንስ' ) ) ) limit 2 offset 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 2 ሞዴሎችን እና ከ 3 በላይ መኪናዎችን የሚያመርቱት መኪናዎች የትኞቹ ናቸው? መታወቂያውን እና ፈጣሪውን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ቢያንስ 2 ሞዴሎችን የሚያመርቱ እና ከ3 በላይ መኪኖችን የሚያመርቱ የሁሉም መኪና ሰሪዎች መታወቂያ እና ሰሪዎች ምንድናቸው?", "query": "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3", "predicted_sql": "select model_list.model  , car_names.make  , cars_data.mpg  , cars_data.cylinders  , cars_data.edispl  , cars_data.horsepower  , cars_data.weight  , cars_data.accelerate  , cars_data.year from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ቢያንስ 2 ሞዴሎችን የሚያመርቱ እና ከ3 በላይ መኪኖችን የሚያመርቱ የሁሉም መኪና ሰሪዎች መታወቂያ እና ሰሪዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3 በላይ መኪና ሰሪዎች ያሏቸው ወይም የ‹fiat› ሞዴል ያመረቱት አገሮች መታወቂያ እና ስም ማን ናቸው?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = 'fiat' limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model | car_names : car_names.makeid , car_names.model , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3 በላይ መኪና ሰሪዎች ያሏቸው ወይም የ‹fiat› ሞዴል ያመረቱት አገሮች መታወቂያ እና ስም ማን ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "car_1", "question": "ከ 3 በላይ መኪና ሰሪዎች ያሏቸው ወይም የ fiat ሞዴል ያመረቱ የሁሉም ሀገሮች መታወቂያ እና ስም ምንድ ናቸው?", "query": "select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat'", "predicted_sql": "select model_list.model from model_list where model_list.maker = ( select id from car_makers where maker = 'fiat' ) limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | continents : continents.contid , continents.continent | countries : countries.countryid , countries.countryname , countries.continent | car_makers : car_makers.id , car_makers.maker ( fiat ) , car_makers.fullname ( Fiat ) , car_makers.country | model_list : model_list.modelid , model_list.maker , model_list.model ( fiat ) | car_names : car_names.makeid , car_names.model ( fiat ) , car_names.make | cars_data : cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.edispl , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid# \n ### ከ 3 በላይ መኪና ሰሪዎች ያሏቸው ወይም የ fiat ሞዴል ያመረቱ የሁሉም ሀገሮች መታወቂያ እና ስም ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["continents.*", "continents.contid", "continents.continent", "countries.*", "countries.countryid", "countries.countryname", "countries.continent", "car_makers.*", "car_makers.id", "car_makers.maker", "car_makers.fullname", "car_makers.country", "model_list.*", "model_list.modelid", "model_list.maker", "model_list.model", "car_names.*", "car_names.makeid", "car_names.model", "car_names.make", "cars_data.*", "cars_data.id", "cars_data.mpg", "cars_data.cylinders", "cars_data.edispl", "cars_data.horsepower", "cars_data.weight", "cars_data.accelerate", "cars_data.year"]}
{"db_id": "flight_2", "question": "አየር መንገድ &quot;JetBlue Airways&quot; የየት ሀገር ነው?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airlines.country from airlines where airlines.airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገድ &quot;JetBlue Airways&quot; የየት ሀገር ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ጄትብሉ አየር መንገድ ከየት ሀገር ጋር ነው የተገናኘው?", "query": "select country from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airports.city from airports where airports.airportcode = 'ADD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ጄትብሉ አየር መንገድ ከየት ሀገር ጋር ነው የተገናኘው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አየር መንገድ &quot;JetBlue Airways&quot; ምህጻረ ቃል ምንድ ነው?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select airlines.airline from airlines where airlines.abbreviation = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገድ &quot;JetBlue Airways&quot; ምህጻረ ቃል ምንድ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከጄትብሉ አየር መንገድ ጋር የሚዛመደው የትኛው ምህጻረ ቃል ነው?", "query": "select abbreviation from airlines where airline = 'JetBlue Airways'", "predicted_sql": "select flights.flightno from flights where flights.sourceairport = 'JFK' and flights.destairport = 'LAX'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከጄትብሉ አየር መንገድ ጋር የሚዛመደው የትኛው ምህጻረ ቃል ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ሁሉንም የአየር መንገድ ስም እና ምህፃረ ቃል በ &quot;USA&quot; ይዘርዝሩ።", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airportname from airports where country = 'USA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ሁሉንም የአየር መንገድ ስም እና ምህፃረ ቃል በ &quot;USA&quot; ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በዩኤስኤ ውስጥ የአየር መንገድ ስም እና ምህፃረ ቃል ምንድናቸው?", "query": "select airline , abbreviation from airlines where country = 'USA'", "predicted_sql": "select airports.airportname  , airlines.airline from airports join flights on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.uid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በዩኤስኤ ውስጥ የአየር መንገድ ስም እና ምህፃረ ቃል ምንድናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአንቶኒ ከተማ የአየር ማረፊያውን ኮድ እና ስም ይዘርዝሩ።", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airports.airportcode  , airports.airportname from airports where airports.city = 'Addis Ababa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአንቶኒ ከተማ የአየር ማረፊያውን ኮድ እና ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከከተማው አንቶኒ ጋር የሚዛመድ የአየር ማረፊያ ኮድ እና የአየር ማረፊያ ስም ይስጡ።", "query": "select airportcode , airportname from airports where city = 'Anthony'", "predicted_sql": "select airports.city  , airports.airportname from airports where airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከከተማው አንቶኒ ጋር የሚዛመድ የአየር ማረፊያ ኮድ እና የአየር ማረፊያ ስም ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት አየር መንገድ አለን?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት አየር መንገድ አለን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአየር መንገዶች አጠቃላይ ቁጥር ስንት ነው?", "query": "select count ( * ) from airlines", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአየር መንገዶች አጠቃላይ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት አየር ማረፊያዎች አሉን?", "query": "select count ( * ) from airports", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት አየር ማረፊያዎች አሉን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአየር ማረፊያዎችን ቁጥር ይመልሱ.", "query": "select count ( * ) from airports", "predicted_sql": "select airports.airportcode from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአየር ማረፊያዎችን ቁጥር ይመልሱ. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት በረራ አለን?", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት በረራ አለን? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የበረራዎች ብዛት ይመልሱ።", "query": "select count ( * ) from flights", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የበረራዎች ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኛው አየር መንገድ &#39;UAL&#39; ምህፃረ ቃል አለው?", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select flights.flightno from flights where flights.airline = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኛው አየር መንገድ &#39;UAL&#39; ምህፃረ ቃል አለው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አየር መንገዱን በምህፃረ ቃል &#39;UAL&#39; ይስጡት።", "query": "select airline from airlines where abbreviation = 'UAL'", "predicted_sql": "select airports.airportname from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airlines.abbreviation = 'UAL'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገዱን በምህፃረ ቃል &#39;UAL&#39; ይስጡት። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከአሜሪካ ስንት አየር መንገዶች ናቸው?", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( distinct airports.airportname ) from airports where airports.country = 'አሜሪካ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከአሜሪካ ስንት አየር መንገዶች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአሜሪካ ውስጥ ያሉትን የአየር መንገዶች ብዛት ይመልሱ።", "query": "select count ( * ) from airlines where country = 'USA'", "predicted_sql": "select count ( * ) from airports where country = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአሜሪካ ውስጥ ያሉትን የአየር መንገዶች ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአልቶን አውሮፕላን ማረፊያ በየትኛው ከተማ እና ሀገር ነው?", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.airportname  , airports.country from airports where airports.city = 'London'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአልቶን አውሮፕላን ማረፊያ በየትኛው ከተማ እና ሀገር ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ለአልተን አየር ማረፊያ ከተማውን እና ሀገርን ይስጡ.", "query": "select city , country from airports where airportname = 'Alton'", "predicted_sql": "select airports.city  , airports.airportname  , airports.country from airports where airports.country = 'አልተን' or airports.country = 'ሀገር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ለአልተን አየር ማረፊያ ከተማውን እና ሀገርን ይስጡ. \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአውሮፕላን ማረፊያ &#39;AKO&#39; የአውሮፕላን ማረፊያ ስም ማን ይባላል?", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአውሮፕላን ማረፊያ &#39;AKO&#39; የአውሮፕላን ማረፊያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአየር ማረፊያውን ስም በ &#39;AKO&#39; ኮድ ይመልሱ።", "query": "select airportname from airports where airportcode = 'AKO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode = 'AKO'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአየር ማረፊያውን ስም በ &#39;AKO&#39; ኮድ ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በከተማ &#39;አበርዲን&#39; የአየር ማረፊያ ስሞች ምንድ ናቸው?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports where airports.city = 'አበርዲን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በከተማ &#39;አበርዲን&#39; የአየር ማረፊያ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአበርዲን ውስጥ የአየር ማረፊያዎች ስሞች ምንድ ናቸው?", "query": "select airportname from airports where city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአበርዲን ውስጥ የአየር ማረፊያዎች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ&#39;APG&#39; ስንት በረራዎች ይነሳሉ?", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from airlines where abbreviation = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ&#39;APG&#39; ስንት በረራዎች ይነሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ&#39;APG&#39; የሚነሱትን በረራዎች ብዛት ይቁጠሩ።", "query": "select count ( * ) from flights where sourceairport = 'APG'", "predicted_sql": "select count ( * ) from airlines where abbreviation = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ&#39;APG&#39; የሚነሱትን በረራዎች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ATO ምን ያህል በረራዎች መድረሻ አላቸው?", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ATO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ATO ) , flights.destairport ( ATO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ATO ምን ያህል በረራዎች መድረሻ አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ ATO የበረራዎችን ብዛት ይቁጠሩ።", "query": "select count ( * ) from flights where destairport = 'ATO'", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ATO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ATO ) , flights.destairport ( ATO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ ATO የበረራዎችን ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከሲቲ አበርዲን ስንት በረራዎች ይነሳሉ?", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከሲቲ አበርዲን ስንት በረራዎች ይነሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከአበርዲን የሚነሱትን በረራዎች ብዛት ይመልሱ።", "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select airports.city  , count ( * ) as num_flights from flights join airports on flights.sourceairport = airports.airportcode group by airports.city order by num_flights desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከአበርዲን የሚነሱትን በረራዎች ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አበርዲን ከተማ ስንት በረራዎች ይደርሳሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select count ( * ) from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አበርዲን ከተማ ስንት በረራዎች ይደርሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አበርዲን የሚደርሱትን በረራዎች ብዛት ይመልሱ።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select airlines.airline  , count ( * ) as total_flights from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by total_flights desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አበርዲን የሚደርሱትን በረራዎች ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት በረራዎች ከሲቲ &#39;አበርዲን&#39; ተነስተው የመዳረሻ ከተማ &#39;አሽሊ&#39; አላቸው?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select airports.airportname from airports join flights on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'አበርዲን' and airlines.country = 'አሽሊ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት በረራዎች ከሲቲ &#39;አበርዲን&#39; ተነስተው የመዳረሻ ከተማ &#39;አሽሊ&#39; አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት በረራዎች ከአበርዲን ወደ አሽሊ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ashley' and airports.city = 'Aberdeen'", "predicted_sql": "select airports.city from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airlines.airline = 'Ethiopian Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት በረራዎች ከአበርዲን ወደ አሽሊ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አየር መንገዱ &#39;JetBlue Airways&#39; ስንት በረራዎች አሉት?", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select count ( * ) from airlines where airline = 'JetBlue Airways'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገዱ &#39;JetBlue Airways&#39; ስንት በረራዎች አሉት? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የጄትብሉ ኤርዌይስ በረራዎችን ቁጥር ይስጡ።", "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid where airlines.airline = 'JetBlue Airways'", "predicted_sql": "select airlines.uid  , airlines.airline  , airlines.abbreviation  , airlines.country from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የጄትብሉ ኤርዌይስ በረራዎችን ቁጥር ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት &#39;የዩናይትድ አየር መንገድ&#39; በረራዎች ወደ ኤርፖርት &#39;ASY&#39; ይሄዳሉ?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select airports.city from airlines join flights on airlines.uid = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.countryabbrev = 'ASY'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት &#39;የዩናይትድ አየር መንገድ&#39; በረራዎች ወደ ኤርፖርት &#39;ASY&#39; ይሄዳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ASY አውሮፕላን ማረፊያ የሚደርሱትን የዩናይትድ አየር መንገድ በረራዎች ብዛት ይቁጠሩ።", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.destairport = 'ASY'", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports where airports.country = 'United States'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( ASY ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( ASY ) , flights.destairport ( ASY ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ASY አውሮፕላን ማረፊያ የሚደርሱትን የዩናይትድ አየር መንገድ በረራዎች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከኤርፖርት &#39;AHD&#39; ስንት &#39;የዩናይትድ አየር መንገድ&#39; በረራዎች ይነሳሉ?", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select airports.airportname from airports join flights on flights.destairport = airports.airportcode where flights.sourceairport = 'AHD' and airports.city = 'የዩናይትድ አየር መንገድ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከኤርፖርት &#39;AHD&#39; ስንት &#39;የዩናይትድ አየር መንገድ&#39; በረራዎች ይነሳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከኤኤችዲ አየር ማረፊያ የሚነሱትን የተባበሩት አየር መንገድ በረራዎች ብዛት ይመልሱ።", "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid where airlines.airline = 'United Airlines' and flights.sourceairport = 'AHD'", "predicted_sql": "select flights.sourceairport  , count ( * ) as num_flights from flights group by flights.sourceairport order by num_flights desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከኤኤችዲ አየር ማረፊያ የሚነሱትን የተባበሩት አየር መንገድ በረራዎች ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ስንት የተባበሩት አየር መንገድ በረራዎች ወደ ከተማ &#39;አበርዲን&#39; ይሄዳሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select flights.sourceairport from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'አበርዲን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ስንት የተባበሩት አየር መንገድ በረራዎች ወደ ከተማ &#39;አበርዲን&#39; ይሄዳሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አበርዲን የሚደርሱትን የተባበሩት አየር መንገድ በረራዎች ይቁጠሩ።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'", "predicted_sql": "select flights.sourceairport  , flights.destairport from flights where flights.airline = 'Ethiopian Airlines'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አበርዲን የሚደርሱትን የተባበሩት አየር መንገድ በረራዎች ይቁጠሩ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ የመድረሻ በረራዎች ያሉት የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ የመድረሻ በረራዎች ያሉት የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በጣም ተደጋጋሚ መድረሻ አየር ማረፊያ ያለው የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports where airports.airportname = 'ተደጋጋሚ መድረሻ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በጣም ተደጋጋሚ መድረሻ አየር ማረፊያ ያለው የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ የመነሻ በረራዎች ያሉት የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.city from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ የመነሻ በረራዎች ያሉት የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አውሮፕላን ማረፊያው በብዛት የሚገኘው የትኛው ከተማ ነው?", "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1", "predicted_sql": "select airports.country from airports group by airports.country order by count ( * ) desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አውሮፕላን ማረፊያው በብዛት የሚገኘው የትኛው ከተማ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከፍተኛ የበረራ ቁጥር ያለው የአየር ማረፊያ ኮድ ምንድን ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከፍተኛ የበረራ ቁጥር ያለው የአየር ማረፊያ ኮድ ምንድን ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ በረራዎች ያሉት የአውሮፕላን ማረፊያው የአውሮፕላን ማረፊያ ኮድ ስንት ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ በረራዎች ያሉት የአውሮፕላን ማረፊያው የአውሮፕላን ማረፊያ ኮድ ስንት ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለው የአየር ማረፊያ ኮድ ምንድን ነው?", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለው የአየር ማረፊያ ኮድ ምንድን ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የአየር ማረፊያውን ኮድ በትንሹ በረራዎች ይስጡ።", "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1", "predicted_sql": "select airports.airportcode  , airports.airportname  , airports.city  , airports.country from airports where airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የአየር ማረፊያውን ኮድ በትንሹ በረራዎች ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኛው አየር መንገድ ብዙ በረራዎች አሉት?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct flights.sourceairport ) as num_airports from flights", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኛው አየር መንገድ ብዙ በረራዎች አሉት? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ብዙ በረራዎችን የሚያገለግለው የትኛው አየር መንገድ ነው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) desc limit 1", "predicted_sql": "select flights.sourceairport  , count ( distinct flights.destairport ) as num_destinations from flights group by flights.sourceairport order by num_destinations desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ብዙ በረራዎችን የሚያገለግለው የትኛው አየር መንገድ ነው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለውን የአየር መንገዱ ምህጻረ ቃል እና አገር ያግኙ?", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select flights.flightno  , airports.airportname from flights join airports on flights.sourceairport = airports.airportcode where flights.destairport = 'ADD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አነስተኛ ቁጥር ያለው የበረራ ቁጥር ያለውን የአየር መንገዱ ምህጻረ ቃል እና አገር ያግኙ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አየር መንገዱ ትንሹ በረራዎች ያሉት እና በየትኛው ሀገር ውስጥ ነው ያለው?", "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count ( * ) asc limit 1", "predicted_sql": "select airports.city  , airports.airportname  , airports.country from airports where airports.country = 'አየር መንገዱ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገዱ ትንሹ በረራዎች ያሉት እና በየትኛው ሀገር ውስጥ ነው ያለው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከኤርፖርት &#39;AHD&#39; የሚነሱ አየር መንገዶች ምንድናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airports.airportname from airports join flights on flights.destairport = airports.airportcode where flights.sourceairport = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከኤርፖርት &#39;AHD&#39; የሚነሱ አየር መንገዶች ምንድናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኞቹ አየር መንገዶች ከምንጭ አየር ማረፊያ AHD ጋር በረራ አላቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AHD ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.destairport ( AHD ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኞቹ አየር መንገዶች ከምንጭ አየር ማረፊያ AHD ጋር በረራ አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በኤርፖርት &#39;AHD&#39; የሚደርሱ በረራዎች ያላቸው አየር መንገዶች ምንድናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "select airports.airportname from airports join flights on flights.destairport = airports.airportcode where flights.sourceairport = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በኤርፖርት &#39;AHD&#39; የሚደርሱ በረራዎች ያላቸው አየር መንገዶች ምንድናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከመድረሻ አየር ማረፊያ AHD ጋር በረራ ያላቸው የትኞቹ አየር መንገዶች ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'", "predicted_sql": "select airports.airportname from airports where airports.city = 'AHD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( AHD ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.destairport ( AHD ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከመድረሻ አየር ማረፊያ AHD ጋር በረራ ያላቸው የትኞቹ አየር መንገዶች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከሁለቱም አየር ማረፊያዎች &#39;APG&#39; እና &#39;CVO&#39; በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select airports.airportname from airports where airports.airportcode in ( 'APG'  , 'CVO' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከሁለቱም አየር ማረፊያዎች &#39;APG&#39; እና &#39;CVO&#39; በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከሁለቱም ከኤፒጂ እና ከ CVO አውሮፕላን ማረፊያዎች የሚነሱ በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO'", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports where airports.airportcode = 'CVO' or airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( CVO ) , flights.destairport ( CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከሁለቱም ከኤፒጂ እና ከ CVO አውሮፕላን ማረፊያዎች የሚነሱ በረራዎች ያላቸው አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከኤርፖርት &#39;CVO&#39; በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ ግን ከ&#39;APG&#39; አይደሉም።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "select airports.airportname from airports join flights on flights.destairport = airports.airportcode where flights.sourceairport = 'CVO' and airports.countryabbrev <> 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከኤርፖርት &#39;CVO&#39; በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ ግን ከ&#39;APG&#39; አይደሉም። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ CVO የሚነሳ ነገር ግን ከኤፒጂ አየር ማረፊያዎች የሌሉት አየር መንገዶች የትኞቹ ናቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode ( CVO ) , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport ( CVO ) , flights.destairport ( CVO ) | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ CVO የሚነሳ ነገር ግን ከኤፒጂ አየር ማረፊያዎች የሌሉት አየር መንገዶች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ቢያንስ 10 በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ቢያንስ 10 በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኞቹ አየር መንገዶች ቢያንስ 10 በረራዎች አላቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) > 10", "predicted_sql": "select airports.airportname from airports order by airports.airportname desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኞቹ አየር መንገዶች ቢያንስ 10 በረራዎች አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ200 ያነሱ በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ።", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ200 ያነሱ በረራዎች ያላቸውን ሁሉንም አየር መንገዶች ያግኙ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የትኞቹ አየር መንገዶች ከ200 በታች በረራ አላቸው?", "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count ( * ) < 200", "predicted_sql": "select airports.airportname from airports where airports.country = 'Ethiopia' limit 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የትኞቹ አየር መንገዶች ከ200 በታች በረራ አላቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አየር መንገድ &quot;የተባበሩት አየር መንገድ&quot; የበረራ ቁጥሮች ምንድ ናቸው?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select airports.airportname from flights join airports on flights.destairport = airports.airportcode where flights.airline = 'የተባበሩት አየር መንገድ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አየር መንገድ &quot;የተባበሩት አየር መንገድ&quot; የበረራ ቁጥሮች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከዩናይትድ አየር መንገድ በረራዎች ጋር የሚዛመደው የበረራ ቁጥሮች የትኞቹ ናቸው?", "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline where airlines.airline = 'United Airlines'", "predicted_sql": "select airports.airportcode from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.uid", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከዩናይትድ አየር መንገድ በረራዎች ጋር የሚዛመደው የበረራ ቁጥሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከአውሮፕላን ማረፊያ &quot;APG&quot; የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.abbreviation = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከአውሮፕላን ማረፊያ &quot;APG&quot; የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከኤፒጂ የሚነሱ በረራዎችን የበረራ ቁጥሮች ይስጡ።", "query": "select flightno from flights where sourceairport = 'APG'", "predicted_sql": "select airports.airportcode from flights join airports on flights.destairport = airports.airportcode", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከኤፒጂ የሚነሱ በረራዎችን የበረራ ቁጥሮች ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአውሮፕላን ማረፊያ &quot;APG&quot; የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.abbreviation = 'APG'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአውሮፕላን ማረፊያ &quot;APG&quot; የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በኤፒጂ የሚያርፉ የበረራ ቁጥሮችን ይስጡ።", "query": "select flightno from flights where destairport = 'APG'", "predicted_sql": "select airports.airportcode from airports", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በኤፒጂ የሚያርፉ የበረራ ቁጥሮችን ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከ &quot;አበርዲን&quot; ከተማ የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'አበርዲን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከ &quot;አበርዲን&quot; ከተማ የሚነሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከአበርዲን የሚነሱ በረራዎችን የበረራ ቁጥሮች ይስጡ።", "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select airports.airportcode from airlines join flights on airlines.uid = flights.airline join airports on flights.destairport = airports.airportcode where airlines.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከአበርዲን የሚነሱ በረራዎችን የበረራ ቁጥሮች ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ወደ ከተማ &quot;አበርዲን&quot; የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው?", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'አበርዲን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ወደ ከተማ &quot;አበርዲን&quot; የሚደርሱ የበረራ ቁጥሮች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "አበርዲን የሚደርሱ የበረራ ቁጥሮችን ይስጡ።", "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'", "predicted_sql": "select airlines.airline from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### አበርዲን የሚደርሱ የበረራ ቁጥሮችን ይስጡ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአበርዲን ወይም በአቢሊን ከተማ የሚያርፉ የበረራዎች ብዛት ያግኙ።", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአበርዲን ወይም በአቢሊን ከተማ የሚያርፉ የበረራዎች ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "በአበርዲን ወይም አቢሊን ውስጥ ስንት በረራዎች ያርፋሉ?", "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene'", "predicted_sql": "select count ( * ) from airlines", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### በአበርዲን ወይም አቢሊን ውስጥ ስንት በረራዎች ያርፋሉ? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "ከውስጥ እና ከውጪ ምንም አይነት በረራ የሌላቸውን የአየር ማረፊያዎች ስም ያግኙ።", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.airportname from airports where airports.country = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### ከውስጥ እና ከውጪ ምንም አይነት በረራ የሌላቸውን የአየር ማረፊያዎች ስም ያግኙ። \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "flight_2", "question": "የመነሳት እና የመድረሻ በረራዎች የሌላቸው የትኞቹ አየር ማረፊያዎች ናቸው?", "query": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )", "predicted_sql": "select airports.city  , airports.airportcode  , airports.airportname  , airports.country  , airports.countryabbrev from airports where airports.airportcode not in ( select flights.sourceairport from flights ) and airports.airportcode not in ( select flights.destairport from flights )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | airlines : airlines.uid , airlines.airline , airlines.abbreviation , airlines.country | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode# \n ### የመነሳት እና የመድረሻ በረራዎች የሌላቸው የትኞቹ አየር ማረፊያዎች ናቸው? \n SELECT\n        ", "tc_original": ["airlines.*", "airlines.uid", "airlines.airline", "airlines.abbreviation", "airlines.country", "airports.*", "airports.city", "airports.airportcode", "airports.airportname", "airports.country", "airports.countryabbrev", "flights.*", "flights.airline", "flights.flightno", "flights.sourceairport", "flights.destairport"]}
{"db_id": "employee_hire_evaluation", "question": "ስንት ሰራተኞች አሉ?", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስንት ሰራተኞች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሰራተኞችን ብዛት ይቁጠሩ", "query": "select count ( * ) from employee", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሰራተኞችን ብዛት ይቁጠሩ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሰራተኛ ስሞችን በእድሜያቸው በቅደም ተከተል ደርድር።", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሰራተኛ ስሞችን በእድሜያቸው በቅደም ተከተል ደርድር። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሰራተኞችን ስም ይዘርዝሩ እና በእድሜ ቅደም ተከተል ለይ።", "query": "select name from employee order by age asc", "predicted_sql": "select employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሰራተኞችን ስም ይዘርዝሩ እና በእድሜ ቅደም ተከተል ለይ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከእያንዳንዱ ከተማ የሰራተኞች ብዛት ስንት ነው?", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከእያንዳንዱ ከተማ የሰራተኞች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ለእያንዳንዱ ከተማ የሰራተኞችን ብዛት ይቁጠሩ።", "query": "select count ( * ) , city from employee group by city", "predicted_sql": "select count ( * ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ለእያንዳንዱ ከተማ የሰራተኞችን ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ 30 ዓመት በታች የሆኑ ከአንድ በላይ ሰራተኞች የሚመጡት ከየትኞቹ ከተሞች ነው?", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select count ( distinct employee.employee_id ) from employee join hiring on employee.employee_id = hiring.employee_id where hiring.start_from >= date ( 'now'  , '-30 years' ) and hiring.is_full_time = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ 30 ዓመት በታች የሆኑ ከአንድ በላይ ሰራተኞች የሚመጡት ከየትኞቹ ከተሞች ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ 30 ዓመት በታች የሆኑ ከአንድ በላይ ሰራተኞች ያሏቸውን ከተሞች ያግኙ።", "query": "select city from employee where age < 30 group by city having count ( * ) > 1", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ 30 ዓመት በታች የሆኑ ከአንድ በላይ ሰራተኞች ያሏቸውን ከተሞች ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ቦታ የሱቆችን ብዛት ያግኙ.", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select count ( * ) from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ቦታ የሱቆችን ብዛት ያግኙ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ቦታ ስንት ሱቆች አሉ?", "query": "select count ( * ) , location from shop group by location", "predicted_sql": "select count ( distinct shop.name ) as num_shops from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ቦታ ስንት ሱቆች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የምርት ብዛት ትልቁ የሆነውን የሱቁን አስተዳዳሪ ስም እና ወረዳ ያግኙ።", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select employee.name  , employee.city from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የምርት ብዛት ትልቁ የሆነውን የሱቁን አስተዳዳሪ ስም እና ወረዳ ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከፍተኛ ቁጥር ያላቸውን ምርቶች የሚሸጠው የሱቅ አስተዳዳሪ ስም እና አውራጃ ምን ይባላል?", "query": "select manager_name , district from shop order by number_products desc limit 1", "predicted_sql": "select employee.name  , employee.city from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከፍተኛ ቁጥር ያላቸውን ምርቶች የሚሸጠው የሱቅ አስተዳዳሪ ስም እና አውራጃ ምን ይባላል? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሁሉንም መደብሮች ምርቶች ዝቅተኛ እና ከፍተኛ ቁጥር ያግኙ።", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሁሉንም መደብሮች ምርቶች ዝቅተኛ እና ከፍተኛ ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁሉም ሱቆች ውስጥ ዝቅተኛው እና ከፍተኛው የምርት ብዛት ምን ያህል ነው?", "query": "select min ( number_products ) , max ( number_products ) from shop", "predicted_sql": "select count ( * ) as total_count from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁሉም ሱቆች ውስጥ ዝቅተኛው እና ከፍተኛው የምርት ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የሁሉም ሱቆች ስም፣ ቦታ እና ወረዳ በምርት ብዛት ቁልቁል ይመለሱ።", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select employee.name  , employee.city  , shop.name  , shop.location  , shop.district from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የሁሉም ሱቆች ስም፣ ቦታ እና ወረዳ በምርት ብዛት ቁልቁል ይመለሱ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ሁሉንም ሱቆች በቁጥር ምርቶች በቅደም ተከተል ደርድር፣ እና የእያንዳንዱን ሱቅ ስም፣ ቦታ እና ወረዳ ይመልሱ።", "query": "select name , location , district from shop order by number_products desc", "predicted_sql": "select employee.name  , employee.city  , shop.name  , shop.location from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ሁሉንም ሱቆች በቁጥር ምርቶች በቅደም ተከተል ደርድር፣ እና የእያንዳንዱን ሱቅ ስም፣ ቦታ እና ወረዳ ይመልሱ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የቁጥራቸው ምርቶች ከአማካይ የምርት ብዛት በላይ የሆኑ የመደብሮችን ስም ያግኙ።", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select employee.name from employee where employee.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የቁጥራቸው ምርቶች ከአማካይ የምርት ብዛት በላይ የሆኑ የመደብሮችን ስም ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የትኞቹ የሱቆች ቁጥር ምርቶች ከአማካይ በላይ ናቸው? የሱቅ ስሞችን ስጠኝ.", "query": "select name from shop where number_products > ( select avg ( number_products ) from shop )", "predicted_sql": "select shop.name from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የትኞቹ የሱቆች ቁጥር ምርቶች ከአማካይ በላይ ናቸው? የሱቅ ስሞችን ስጠኝ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማው ውስጥ ብዙ ጊዜ የተሸለመውን ሰራተኛ ስም ያግኙ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id where hiring.start_from > '2021-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማው ውስጥ ብዙ ጊዜ የተሸለመውን ሰራተኛ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማዎች ውስጥ ብዙ ሽልማቶችን ያገኘው ሠራተኛ የትኛው ነው? የሰራተኛ ስም ስጠኝ.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join hiring on employee.employee_id = hiring.employee_id where hiring.start_from = ( select min ( start_from ) from hiring )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማዎች ውስጥ ብዙ ሽልማቶችን ያገኘው ሠራተኛ የትኛው ነው? የሰራተኛ ስም ስጠኝ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከፍተኛውን የአንድ ጊዜ ጉርሻ ያገኘውን ሰራተኛ ስም ያግኙ።", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id where hiring.start_from = 'አንድ ጊዜ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከፍተኛውን የአንድ ጊዜ ጉርሻ ያገኘውን ሰራተኛ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የትኛው ሰራተኛ ትልቁን ጉርሻ ተቀብሏል? የሰራተኛ ስም ስጠኝ.", "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1", "predicted_sql": "select employee.city from employee join hiring on hiring.employee_id = employee.employee_id where hiring.is_full_time = 1 order by employee.age desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የትኛው ሰራተኛ ትልቁን ጉርሻ ተቀብሏል? የሰራተኛ ስም ስጠኝ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በግምገማው ውስጥ ምንም አይነት ሽልማት ያላሸነፉ ሰራተኞችን ስም ያግኙ።", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id where shop.location = 'Addis Ababa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በግምገማው ውስጥ ምንም አይነት ሽልማት ያላሸነፉ ሰራተኞችን ስም ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ምንም ዓይነት ግምገማ ያላገኙ ሰራተኞች ስም ማን ይባላል?", "query": "select name from employee where employee_id not in ( select employee_id from evaluation )", "predicted_sql": "select employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ምንም ዓይነት ግምገማ ያላገኙ ሰራተኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከፍተኛ ቁጥር ያላቸውን ሰራተኞች እየቀጠረ ያለው ሱቅ ማን ይባላል?", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select employee.name from employee join hiring on employee.employee_id = hiring.employee_id where hiring.is_full_time = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከፍተኛ ቁጥር ያላቸውን ሰራተኞች እየቀጠረ ያለው ሱቅ ማን ይባላል? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ብዙ ሰራተኛ ያለው የትኛው ሱቅ ነው? የሱቁን ስም ስጠኝ.", "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1", "predicted_sql": "select shop.name from shop where shop.number_products > 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ብዙ ሰራተኛ ያለው የትኛው ሱቅ ነው? የሱቁን ስም ስጠኝ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ማንኛውንም ሰራተኛ የማይቀጥሩ የሱቆችን ስም ይፈልጉ።", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ማንኛውንም ሰራተኛ የማይቀጥሩ የሱቆችን ስም ይፈልጉ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የትኞቹ ሱቆች ያለ ሰራተኛ ይሰራሉ? የሱቅ ስሞችን ያግኙ", "query": "select name from shop where shop_id not in ( select shop_id from hiring )", "predicted_sql": "select employee.name from employee join hiring on employee.employee_id = hiring.employee_id where hiring.is_full_time = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የትኞቹ ሱቆች ያለ ሰራተኛ ይሰራሉ? የሱቅ ስሞችን ያግኙ \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በእያንዳንዱ ሱቅ ውስጥ የተቀጠሩትን ሰራተኞች ብዛት ያግኙ; የሱቁን ስምም አሳይ.", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select count ( employee.employee_id ) from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በእያንዳንዱ ሱቅ ውስጥ የተቀጠሩትን ሰራተኞች ብዛት ያግኙ; የሱቁን ስምም አሳይ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ለእያንዳንዱ ሱቅ, እዚያ የሚሰሩ ሰራተኞችን ቁጥር እና የሱቁን ስም ይመልሱ.", "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name", "predicted_sql": "select employee.employee_id  , employee.name from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ለእያንዳንዱ ሱቅ, እዚያ የሚሰሩ ሰራተኞችን ቁጥር እና የሱቁን ስም ይመልሱ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁሉም ግምገማዎች የሚሰጠው አጠቃላይ ጉርሻ ምንድን ነው?", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select shop.district from shop", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁሉም ግምገማዎች የሚሰጠው አጠቃላይ ጉርሻ ምንድን ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "በሁሉም ግምገማዎች ውስጥ የተሰጠውን አጠቃላይ የጉርሻ መጠን ያግኙ።", "query": "select sum ( bonus ) from evaluation", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , shop.district from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### በሁሉም ግምገማዎች ውስጥ የተሰጠውን አጠቃላይ የጉርሻ መጠን ያግኙ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ስለ ቅጥር ሁሉንም መረጃ ስጠኝ.", "query": "select * from hiring", "predicted_sql": "select employee.name  , employee.age  , shop.name  , shop.location  , hiring.start_from  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on shop.shop_id = hiring.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስለ ቅጥር ሁሉንም መረጃ ስጠኝ. \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ስለ መቅጠር ሁሉም መረጃ ምንድን ነው?", "query": "select * from hiring", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city  , shop.shop_id  , shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name  , hiring.start_from  , hiring.is_full_time  , evaluation.year_awarded  , evaluation.bonus from employee join hiring on hiring.employee_id = employee.employee_id join shop on hiring.shop_id = shop.shop_id join evaluation on evaluation.employee_id = employee.employee_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ስለ መቅጠር ሁሉም መረጃ ምንድን ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ 3000 ያነሱ ምርቶች እና ከ 10000 በላይ ምርቶች ያላቸው መደብሮች ያሉት የትኛው ወረዳ ነው?", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select shop.location from shop where shop.number_products >= 3000 and shop.number_products <= 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ 3000 ያነሱ ምርቶች እና ከ 10000 በላይ ምርቶች ያላቸው መደብሮች ያሉት የትኛው ወረዳ ነው? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ከ 3000 በታች የሆኑ ምርቶችን የሚሸጡ ሱቆች እና ከ 10000 በላይ ምርቶችን የሚሸጡ ሱቆች ያሉባቸውን ወረዳዎች ይፈልጉ ።", "query": "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000", "predicted_sql": "select shop.name  , shop.location  , shop.district  , shop.number_products  , shop.manager_name from shop where shop.number_products >= 3000 and shop.number_products <= 10000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ከ 3000 በታች የሆኑ ምርቶችን የሚሸጡ ሱቆች እና ከ 10000 በላይ ምርቶችን የሚሸጡ ሱቆች ያሉባቸውን ወረዳዎች ይፈልጉ ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "ምን ያህል የተለያዩ የመደብር ቦታዎች አሉ?", "query": "select count ( distinct location ) from shop", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### ምን ያህል የተለያዩ የመደብር ቦታዎች አሉ? \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "employee_hire_evaluation", "question": "የተለዩ የመደብር ቦታዎችን ቁጥር ይቁጠሩ።", "query": "select count ( distinct location ) from shop", "predicted_sql": "select employee.employee_id  , employee.name  , employee.age  , employee.city from employee", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | employee : employee.employee_id , employee.name , employee.age , employee.city | shop : shop.shop_id , shop.name , shop.location , shop.district , shop.number_products , shop.manager_name | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id# \n ### የተለዩ የመደብር ቦታዎችን ቁጥር ይቁጠሩ። \n SELECT\n        ", "tc_original": ["employee.*", "employee.employee_id", "employee.name", "employee.age", "employee.city", "shop.*", "shop.shop_id", "shop.name", "shop.location", "shop.district", "shop.number_products", "shop.manager_name", "hiring.*", "hiring.shop_id", "hiring.employee_id", "hiring.start_from", "hiring.is_full_time", "evaluation.*", "evaluation.employee_id", "evaluation.year_awarded", "evaluation.bonus"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ስንት ሰነዶች አሉን?", "query": "select count ( * ) from documents", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ስንት ሰነዶች አሉን? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዶቹን ብዛት ይቁጠሩ.", "query": "select count ( * ) from documents", "predicted_sql": "select count ( * ) from templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዶቹን ብዛት ይቁጠሩ. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም ሰነዶች የሰነድ መታወቂያዎችን፣ የሰነድ ስሞችን እና የሰነድ መግለጫዎችን ይዘርዝሩ።", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም ሰነዶች የሰነድ መታወቂያዎችን፣ የሰነድ ስሞችን እና የሰነድ መግለጫዎችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሁሉም ሰነዶች መታወቂያዎች፣ ስሞች እና መግለጫዎች ምንድናቸው?", "query": "select document_id , document_name , document_description from documents", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሁሉም ሰነዶች መታወቂያዎች፣ ስሞች እና መግለጫዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዱ ስም እና የአብነት መታወቂያው ምንድን ነው በውስጡ &#39;w&#39; የሚል መግለጫ ያለው?", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'w'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዱ ስም እና የአብነት መታወቂያው ምንድን ነው በውስጡ &#39;w&#39; የሚል መግለጫ ያለው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በመግለጫቸው ውስጥ w ፊደል ለያዙ ሰነዶች ስሞችን እና የአብነት መታወቂያዎችን ይመልሱ።", "query": "select document_name , template_id from documents where document_description like '%w%'", "predicted_sql": "select w.template_type_code  , w.template_type_description  , t.template_id  , t.version_number  , t.date_effective_from  , t.date_effective_to  , t.template_details  , d.document_id  , d.document_name  , d.document_description  , d.other_details  , p.paragraph_id  , p.paragraph_text  , p.other_details from ref_template_types as w join templates as t on w.template_type_code = t.template_type_code join documents as d on t.template_id = d.template_id join paragraphs as p on d.document_id = p.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በመግለጫቸው ውስጥ w ፊደል ለያዙ ሰነዶች ስሞችን እና የአብነት መታወቂያዎችን ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&quot;Robbin CV&quot; የተሰየመው የሰነድ መታወቂያ፣ አብነት መታወቂያ እና መግለጫ ምንድነው?", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_details  , documents.document_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where documents.document_name = 'Robbin CV'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &quot;Robbin CV&quot; የተሰየመው የሰነድ መታወቂያ፣ አብነት መታወቂያ እና መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዱን መታወቂያ፣ የአብነት መታወቂያ እና የሰነዱን መግለጫ በሮቢን ሲቪ ስም ይመልሱ።", "query": "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዱን መታወቂያ፣ የአብነት መታወቂያ እና የሰነዱን መግለጫ በሮቢን ሲቪ ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉም ሰነዶች ምን ያህል የተለያዩ አብነቶች ይጠቀማሉ?", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_id  , documents.document_name  , documents.document_description  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉም ሰነዶች ምን ያህል የተለያዩ አብነቶች ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዶች ጥቅም ላይ የዋሉ የተለያዩ አብነቶችን ቁጥር ይቁጠሩ.", "query": "select count ( distinct template_id ) from documents", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_id  , documents.document_name  , documents.document_description  , paragraphs.paragraph_id  , paragraphs.paragraph_text from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዶች ጥቅም ላይ የዋሉ የተለያዩ አብነቶችን ቁጥር ይቁጠሩ. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ምን ያህል ሰነዶች አብነት በ ኮድ &#39;PPT&#39; አይነት ይጠቀማሉ?", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select templates.template_id  , templates.version_number  , templates.template_type_code  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ምን ያህል ሰነዶች አብነት በ ኮድ &#39;PPT&#39; አይነት ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የ PPT አብነት አይነት የሚጠቀሙትን የሰነዶች ብዛት ይቁጠሩ።", "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_code  , count ( * ) as total_count from ref_template_types where ref_template_types.template_type_description = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የ PPT አብነት አይነት የሚጠቀሙትን የሰነዶች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "እያንዳንዱን አብነት በመጠቀም ሁሉንም የአብነት መታወቂያዎች እና የሰነዶች ብዛት አሳይ።", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### እያንዳንዱን አብነት በመጠቀም ሁሉንም የአብነት መታወቂያዎች እና የሰነዶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዶች የሚያገለግሉት የተለያዩ የአብነት መታወቂያዎች ምንድናቸው፣ እና እያንዳንዳቸው ስንት ጊዜ ጥቅም ላይ ውለዋል?", "query": "select template_id , count ( * ) from documents group by template_id", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , documents.document_name  , documents.document_description  , paragraphs.paragraph_text from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዶች የሚያገለግሉት የተለያዩ የአብነት መታወቂያዎች ምንድናቸው፣ እና እያንዳንዳቸው ስንት ጊዜ ጥቅም ላይ ውለዋል? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በአብዛኛዎቹ ሰነዶች ጥቅም ላይ የዋለው የአብነት መታወቂያ እና አይነት ኮድ ምንድነው?", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , documents.document_name from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id where documents.document_name = 'አብነት መታወቂያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በአብዛኛዎቹ ሰነዶች ጥቅም ላይ የዋለው የአብነት መታወቂያ እና አይነት ኮድ ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለከፍተኛው የሰነዶች ብዛት ጥቅም ላይ የዋለውን የአብነት መታወቂያ እና ኮድ ይተይቡ።", "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1", "predicted_sql": "select count ( * ) as total_count from documents where document_name = 'አብነት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለከፍተኛው የሰነዶች ብዛት ጥቅም ላይ የዋለውን የአብነት መታወቂያ እና ኮድ ይተይቡ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከአንድ በላይ ሰነድ ለሚጠቀሙት ለሁሉም አብነቶች መታወቂያ አሳይ።", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከአንድ በላይ ሰነድ ለሚጠቀሙት ለሁሉም አብነቶች መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከአንድ ሰነድ በላይ ጥቅም ላይ የሚውሉት የአብነት መታወቂያዎች ምንድናቸው?", "query": "select template_id from documents group by template_id having count ( * ) > 1", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where paragraphs.paragraph_text like '%አብነት%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከአንድ ሰነድ በላይ ጥቅም ላይ የሚውሉት የአብነት መታወቂያዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በማንኛውም ሰነድ የማይጠቀሙባቸው ለሁሉም አብነቶች መታወቂያ አሳይ።", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በማንኛውም ሰነድ የማይጠቀሙባቸው ለሁሉም አብነቶች መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በማናቸውም ሰነዶች ውስጥ ጥቅም ላይ የማይውሉ የአብነት መታወቂያዎች ምንድን ናቸው?", "query": "select template_id from templates except select template_id from documents", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በማናቸውም ሰነዶች ውስጥ ጥቅም ላይ የማይውሉ የአብነት መታወቂያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ስንት አብነት አለን?", "query": "select count ( * ) from templates", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ስንት አብነት አለን? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት ብዛት ይቁጠሩ።", "query": "select count ( * ) from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት መታወቂያዎችን፣ የስሪት ቁጥሮችን እና የአብነት አይነት ኮዶችን ለሁሉም አብነቶች አሳይ።", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት መታወቂያዎችን፣ የስሪት ቁጥሮችን እና የአብነት አይነት ኮዶችን ለሁሉም አብነቶች አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለእያንዳንዱ አብነት መታወቂያዎች፣ የስሪት ቁጥሮች እና ኮዶች ምን ምን ናቸው?", "query": "select template_id , version_number , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለእያንዳንዱ አብነት መታወቂያዎች፣ የስሪት ቁጥሮች እና ኮዶች ምን ምን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም አብነቶች ሁሉንም የተለዩ የአብነት አይነት ኮዶች አሳይ።", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም አብነቶች ሁሉንም የተለዩ የአብነት አይነት ኮዶች አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የአብነት አይነት ኮዶች ምንድን ናቸው?", "query": "select distinct template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የአብነት አይነት ኮዶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት አይነት ኮድ PP ወይም PPT ያላቸው የአብነት መታወቂያዎች ምንድን ናቸው?", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'PP' or ref_template_types.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP , PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት አይነት ኮድ PP ወይም PPT ያላቸው የአብነት መታወቂያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ኮድ PP ወይም PPT ያላቸውን የአብነት መታወቂያዎች ይመልሱ።", "query": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'PP' or ref_template_types.template_type_code = 'PPT'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( PP , PPT ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ኮድ PP ወይም PPT ያላቸውን የአብነት መታወቂያዎች ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ስንት አብነቶች የአብነት አይነት ኮድ ሲቪ አላቸው?", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ስንት አብነቶች የአብነት አይነት ኮድ ሲቪ አላቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሲቪ ዓይነት የአብነት ብዛት ይቁጠሩ።", "query": "select count ( * ) from templates where template_type_code = 'CV'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሲቪ ዓይነት የአብነት ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ 5 በኋላ የስሪት ቁጥር ያለው ለአብነት የስሪት ቁጥር እና የአብነት አይነት ኮድ ስንት ነው?", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select templates.template_type_code  , count ( distinct templates.template_id ) as template_count  , count ( distinct templates.template_type_code ) as template_type_count from templates group by templates.template_type_code having template_count >= 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ 5 በኋላ የስሪት ቁጥር ያለው ለአብነት የስሪት ቁጥር እና የአብነት አይነት ኮድ ስንት ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የስሪት ቁጥሮችን እና የአብነት አይነት ኮዶችን ከ5 በላይ የሆነ የስሪት ቁጥር ይመልሱ።", "query": "select version_number , template_type_code from templates where version_number > 5", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where templates.template_type_code = 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የስሪት ቁጥሮችን እና የአብነት አይነት ኮዶችን ከ5 በላይ የሆነ የስሪት ቁጥር ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም የአብነት አይነት ኮዶች እና የአብነት ብዛት አሳይ።", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , count ( distinct documents.document_id ) as document_count from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም የአብነት አይነት ኮዶች እና የአብነት ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የአብነት አይነት ኮዶች ምንድን ናቸው፣ እና ስንት አብነቶች ከእያንዳንዱ ጋር ይዛመዳሉ?", "query": "select template_type_code , count ( * ) from templates group by template_type_code", "predicted_sql": "select ref_template_types.template_type_description  , count ( distinct documents.document_id ) as num_document_types  , count ( distinct templates.template_id ) as num_templates from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id group by ref_template_types.template_type_description", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የአብነት አይነት ኮዶች ምንድን ናቸው፣ እና ስንት አብነቶች ከእያንዳንዱ ጋር ይዛመዳሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የትኛው የአብነት አይነት ኮድ ብዙ አብነቶች አሉት?", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የትኛው የአብነት አይነት ኮድ ብዙ አብነቶች አሉት? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ብዙ አብነቶች የሆኑበትን የአብነት አይነት ኮድ ይመልሱ።", "query": "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ብዙ አብነቶች የሆኑበትን የአብነት አይነት ኮድ ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የአብነት አይነት ኮዶች ከሶስት ያነሱ አብነቶች አሳይ።", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የአብነት አይነት ኮዶች ከሶስት ያነሱ አብነቶች አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ3 አብነቶች ያነሱ የአብነት አይነቶች ኮዶች ምንድን ናቸው?", "query": "select template_type_code from templates group by template_type_code having count ( * ) < 3", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code in ( select templates.template_type_code from templates where templates.template_id in ( select documents.template_id from documents where documents.document_id in ( 3 ) ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ3 አብነቶች ያነሱ የአብነት አይነቶች ኮዶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ትንሹ የስሪት ቁጥር እና የአብነት አይነት ኮድ ምንድነው?", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ትንሹ የስሪት ቁጥር እና የአብነት አይነት ኮድ ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ዝቅተኛውን የስሪት ቁጥር፣ ከተዛማጅ የአብነት አይነት ኮድ ጋር ይመልሱ።", "query": "select min ( version_number ) , template_type_code from templates", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ዝቅተኛውን የስሪት ቁጥር፣ ከተዛማጅ የአብነት አይነት ኮድ ጋር ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&quot;የውሂብ መሠረት&quot; በሚለው ስም በሰነድ ጥቅም ላይ የዋለው የአብነት የአብነት ኮድ ምንድን ነው?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'የውሂብ መሠረት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &quot;የውሂብ መሠረት&quot; በሚለው ስም በሰነድ ጥቅም ላይ የዋለው የአብነት የአብነት ኮድ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ዳታ ቤዝ በተባለ ሰነድ የሚጠቀመውን የአብነት አይነት ኮድ ይመልሱ።", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ዳታ ቤዝ በተባለ ሰነድ የሚጠቀመውን የአብነት አይነት ኮድ ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "አብነቶችን በመጠቀም ሁሉንም የሰነድ ስሞች በአብነት አይነት ኮድ BK አሳይ።", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### አብነቶችን በመጠቀም ሁሉንም የሰነድ ስሞች በአብነት አይነት ኮድ BK አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ BK ኮድ ጋር አብነቶችን የሚጠቀሙ ሰነዶች ስሞች ምንድ ናቸው?", "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'BK'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( BK ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ BK ኮድ ጋር አብነቶችን የሚጠቀሙ ሰነዶች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የአብነት አይነት ኮዶች እና እያንዳንዱን አይነት በመጠቀም የሰነዶች ብዛት አሳይ።", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የአብነት አይነት ኮዶች እና እያንዳንዱን አይነት በመጠቀም የሰነዶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የአብነት አይነት ኮዶች ምንድ ናቸው፣ እና እያንዳንዱ አይነት ምን ያህል ሰነዶች ይጠቀማሉ?", "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_type_code from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code group by ref_template_types.template_type_description  , templates.template_type_code having count ( distinct templates.template_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የአብነት አይነት ኮዶች ምንድ ናቸው፣ እና እያንዳንዱ አይነት ምን ያህል ሰነዶች ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በአብዛኛዎቹ የሰነዶች ብዛት የትኛው የአብነት አይነት ኮድ ነው ጥቅም ላይ የሚውለው?", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id group by ref_template_types.template_type_description having count ( distinct paragraphs.paragraph_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በአብዛኛዎቹ የሰነዶች ብዛት የትኛው የአብነት አይነት ኮድ ነው ጥቅም ላይ የሚውለው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በሰነዶች ውስጥ በብዛት ጥቅም ላይ የዋለውን የአብነት አይነት ኮድ ይመልሱ።", "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'አብነት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በሰነዶች ውስጥ በብዛት ጥቅም ላይ የዋለውን የአብነት አይነት ኮድ ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በማንኛውም ሰነድ የማይጠቀሙትን ሁሉንም የአብነት አይነት ኮዶች አሳይ።", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በማንኛውም ሰነድ የማይጠቀሙትን ሁሉንም የአብነት አይነት ኮዶች አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለማንኛውም ሰነድ ጥቅም ላይ የማይውሉ የአብነት ዓይነቶች ኮዶች ምንድን ናቸው?", "query": "select template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለማንኛውም ሰነድ ጥቅም ላይ የማይውሉ የአብነት ዓይነቶች ኮዶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የአብነት አይነት ኮዶች እና መግለጫዎችን አሳይ።", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የአብነት አይነት ኮዶች እና መግለጫዎችን አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሁሉም የአብነት አይነቶች አይነት ኮዶች እና መግለጫዎች ምንድናቸው?", "query": "select template_type_code , template_type_description from ref_template_types", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሁሉም የአብነት አይነቶች አይነት ኮዶች እና መግለጫዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለአብነት አይነት ኮድ &quot;AD&quot; የአብነት አይነት መግለጫዎች ምንድን ናቸው.", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለአብነት አይነት ኮድ &quot;AD&quot; የአብነት አይነት መግለጫዎች ምንድን ናቸው. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት አይነትን የአብነት አይነት መግለጫ ከኮዱ AD ጋር ይመልሱ።", "query": "select template_type_description from ref_template_types where template_type_code = 'AD'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code ( AD ) , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code ( AD ) , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት አይነትን የአብነት አይነት መግለጫ ከኮዱ AD ጋር ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለአብነት አይነት መግለጫ &quot;መጽሐፍ&quot; የአብነት አይነት ኮድ ምንድነው?", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'መጽሐፍ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለአብነት አይነት መግለጫ &quot;መጽሐፍ&quot; የአብነት አይነት ኮድ ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት አይነት ኮድ ከ &quot;መጽሐፍ&quot; መግለጫ ጋር ይመልሱ.", "query": "select template_type_code from ref_template_types where template_type_description = 'Book'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'መጽሐፍ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት አይነት ኮድ ከ &quot;መጽሐፍ&quot; መግለጫ ጋር ይመልሱ. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በማንኛውም ሰነድ ጥቅም ላይ የዋሉት አብነቶች ልዩ የአብነት አይነት መግለጫዎች ምንድናቸው?", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በማንኛውም ሰነድ ጥቅም ላይ የዋሉት አብነቶች ልዩ የአብነት አይነት መግለጫዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በሰነድ ውስጥ ጥቅም ላይ ለዋሉት አብነቶች የተለያዩ መግለጫዎችን ይመልሱ።", "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በሰነድ ውስጥ ጥቅም ላይ ለዋሉት አብነቶች የተለያዩ መግለጫዎችን ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአብነት መታወቂያዎች ከአብነት አይነት መግለጫ &quot;ማቅረቢያ&quot; ጋር ምንድናቸው?", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'ማቅረቢያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአብነት መታወቂያዎች ከአብነት አይነት መግለጫ &quot;ማቅረቢያ&quot; ጋር ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከአብነት ጋር የሚዛመዱ መታወቂያዎቹን ከ&#39;ማቅረቢያ&#39; መግለጫ ጋር ይመልሱ።", "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'", "predicted_sql": "select documents.document_name  , documents.document_description  , documents.other_details from documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'ማቅረቢያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከአብነት ጋር የሚዛመዱ መታወቂያዎቹን ከ&#39;ማቅረቢያ&#39; መግለጫ ጋር ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በጠቅላላው ስንት አንቀጾች?", "query": "select count ( * ) from paragraphs", "predicted_sql": "select ref_template_types.template_type_code  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በጠቅላላው ስንት አንቀጾች? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአንቀጾቹን ብዛት ይቁጠሩ.", "query": "select count ( * ) from paragraphs", "predicted_sql": "select count ( * ) from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአንቀጾቹን ብዛት ይቁጠሩ. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዱ &#39;የበጋ ትርኢት&#39; ስም ስንት አንቀጾች?", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select count ( * ) from ref_template_types where template_type_description = 'የበጋ ትርኢት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዱ &#39;የበጋ ትርኢት&#39; ስም ስንት አንቀጾች? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;የበጋ ትርኢት&#39; በተሰየመው ሰነድ ውስጥ የአንቀጾቹን ብዛት ይቁጠሩ።", "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'", "predicted_sql": "select count ( * ) from ref_template_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;የበጋ ትርኢት&#39; በተሰየመው ሰነድ ውስጥ የአንቀጾቹን ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የአንቀጽ ዝርዝሮችን በጽሑፍ &#39;ኮሪያ&#39; አሳይ።", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_description = 'ኮሪያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የአንቀጽ ዝርዝሮችን በጽሑፍ &#39;ኮሪያ&#39; አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;ኮሪያ&#39; የሚለውን ጽሑፍ የሚያካትተው የአንቀጽ ዝርዝሮች ምንድናቸው?", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "predicted_sql": "select documents.document_name from documents where documents.document_description = 'ኮሪያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;ኮሪያ&#39; የሚለውን ጽሑፍ የሚያካትተው የአንቀጽ ዝርዝሮች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የአንቀጽ መታወቂያዎችን እና ጽሑፎችን ለሰነዱ &#39;እንኳን ወደ NY በደህና መጡ&#39; የሚል ስም አሳይ።", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የአንቀጽ መታወቂያዎችን እና ጽሑፎችን ለሰነዱ &#39;እንኳን ወደ NY በደህና መጡ&#39; የሚል ስም አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;እንኳን ወደ NY በደህና መጡ&#39; በሚለው ሰነድ ውስጥ የአንቀጾች መታወቂያዎች እና ጽሑፎች ምንድናቸው?", "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where ref_template_types.template_type_description = 'እንኳን ወደ NY በደህና መጡ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;እንኳን ወደ NY በደህና መጡ&#39; በሚለው ሰነድ ውስጥ የአንቀጾች መታወቂያዎች እና ጽሑፎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዱ &quot;የደንበኛ ግምገማዎች&quot; ሁሉንም የአንቀጽ ጽሑፎች አሳይ.", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዱ &quot;የደንበኛ ግምገማዎች&quot; ሁሉንም የአንቀጽ ጽሑፎች አሳይ. \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ለሰነዱ &#39;የደንበኛ ግምገማዎች&#39; የሚል ስም ያለው የአንቀጽ ጽሑፎች ምንድናቸው?", "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_description = 'የደንበኛ ግምገማዎች'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ለሰነዱ &#39;የደንበኛ ግምገማዎች&#39; የሚል ስም ያለው የአንቀጽ ጽሑፎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የሰነድ መታወቂያዎች እና በእያንዳንዱ ሰነድ ውስጥ ያሉትን የአንቀጾች ብዛት አሳይ። በሰነድ መታወቂያ ይዘዙ።", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የሰነድ መታወቂያዎች እና በእያንዳንዱ ሰነድ ውስጥ ያሉትን የአንቀጾች ብዛት አሳይ። በሰነድ መታወቂያ ይዘዙ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የተለያዩ የሰነድ መታወቂያዎችን ከእያንዳንዱ ጋር የሚዛመዱ አንቀጾች ብዛት በመታወቂያ የታዘዙትን ይመልሱ።", "query": "select document_id , count ( * ) from paragraphs group by document_id order by document_id asc", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የተለያዩ የሰነድ መታወቂያዎችን ከእያንዳንዱ ጋር የሚዛመዱ አንቀጾች ብዛት በመታወቂያ የታዘዙትን ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በእያንዳንዱ ሰነድ ውስጥ ያሉትን ሁሉንም የሰነድ መታወቂያዎች፣ ስሞች እና የአንቀጾች ብዛት አሳይ።", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.template_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.document_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በእያንዳንዱ ሰነድ ውስጥ ያሉትን ሁሉንም የሰነድ መታወቂያዎች፣ ስሞች እና የአንቀጾች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የእያንዳንዱ ሰነድ መታወቂያዎች እና ስሞች፣ እንዲሁም በእያንዳንዱ ውስጥ ያሉት አንቀጾች ቁጥር ምን ያህል ነው?", "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የእያንዳንዱ ሰነድ መታወቂያዎች እና ስሞች፣ እንዲሁም በእያንዳንዱ ውስጥ ያሉት አንቀጾች ቁጥር ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ሁሉንም የሰነድ መታወቂያዎች ቢያንስ በሁለት አንቀጾች ይዘርዝሩ።", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ሁሉንም የሰነድ መታወቂያዎች ቢያንስ በሁለት አንቀጾች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "2 ወይም ከዚያ በላይ አንቀጾች ያላቸው የሰነዶች መታወቂያዎች ምንድን ናቸው?", "query": "select document_id from paragraphs group by document_id having count ( * ) >= 2", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### 2 ወይም ከዚያ በላይ አንቀጾች ያላቸው የሰነዶች መታወቂያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "እጅግ በጣም ብዙ ቁጥር ያለው የሰነድ መታወቂያ እና ስም ምንድነው?", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### እጅግ በጣም ብዙ ቁጥር ያለው የሰነድ መታወቂያ እና ስም ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ብዙ አንቀጾች ያሉት የሰነዱን መታወቂያ እና ስም ይመልሱ።", "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id group by paragraphs.document_id order by count ( * ) desc limit 1", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ብዙ አንቀጾች ያሉት የሰነዱን መታወቂያ እና ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ቢያንስ የአንቀጾች ብዛት ያለው የሰነድ መታወቂያ ምንድነው?", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select count ( * ) as total_number_of_templates", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ቢያንስ የአንቀጾች ብዛት ያለው የሰነድ መታወቂያ ምንድነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዱን መታወቂያ በትንሹ አንቀጾች ይመልሱ።", "query": "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዱን መታወቂያ በትንሹ አንቀጾች ይመልሱ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "ከ1 እስከ 2 አንቀጾች ያለው የሰነድ መታወቂያ ምንድን ነው?", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select templates.template_type_code from templates where templates.template_id = 1 or templates.template_id = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### ከ1 እስከ 2 አንቀጾች ያለው የሰነድ መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "በአንድ እና በሁለት አንቀጾች መካከል ያሉትን የሰነዶች መታወቂያ ይስጡ።", "query": "select document_id from paragraphs group by document_id having count ( * ) between 1 and 2", "predicted_sql": "select ref_template_types.template_type_code  , ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types  , templates  , documents  , paragraphs where templates.template_type_code = ref_template_types.template_type_code and documents.template_id = templates.template_id and paragraphs.document_id = documents.document_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### በአንድ እና በሁለት አንቀጾች መካከል ያሉትን የሰነዶች መታወቂያ ይስጡ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "የሰነዱን መታወቂያ ከአንቀጽ ጽሑፍ &#39;ብራዚል&#39; እና &#39;አየርላንድ&#39; ጋር አሳይ።", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select ref_template_types.template_type_description  , templates.template_id  , templates.version_number  , templates.date_effective_from  , templates.date_effective_to  , templates.template_details  , documents.document_id  , documents.document_name  , documents.document_description  , documents.other_details  , paragraphs.paragraph_id  , paragraphs.paragraph_text  , paragraphs.other_details from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id where ref_template_types.template_type_description = 'ብራዚል' or ref_template_types.template_type_description = 'አየርላንድ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### የሰነዱን መታወቂያ ከአንቀጽ ጽሑፍ &#39;ብራዚል&#39; እና &#39;አየርላንድ&#39; ጋር አሳይ። \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "cre_Doc_Template_Mgt", "question": "&#39;ብራዚል&#39; እና &#39;አየርላንድ&#39; የሚለውን የአንቀጽ ጽሁፍ ያካተቱ የሰነዶች መታወቂያዎች ምንድን ናቸው?", "query": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "predicted_sql": "select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'ብራዚል' or ref_template_types.template_type_code = 'አየርላንድ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.template_details | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id# \n ### &#39;ብራዚል&#39; እና &#39;አየርላንድ&#39; የሚለውን የአንቀጽ ጽሁፍ ያካተቱ የሰነዶች መታወቂያዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["ref_template_types.*", "ref_template_types.template_type_code", "ref_template_types.template_type_description", "templates.*", "templates.template_id", "templates.version_number", "templates.template_type_code", "templates.date_effective_from", "templates.date_effective_to", "templates.template_details", "documents.*", "documents.document_id", "documents.template_id", "documents.document_name", "documents.document_description", "documents.other_details", "paragraphs.*", "paragraphs.paragraph_id", "paragraphs.document_id", "paragraphs.paragraph_text", "paragraphs.other_details"]}
{"db_id": "course_teach", "question": "ስንት አስተማሪዎች አሉ?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( * ) from course", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ስንት አስተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራን ጠቅላላ ብዛት ስንት ነው?", "query": "select count ( * ) from teacher", "predicted_sql": "select count ( * ) from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራን ጠቅላላ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በእድሜ ቅደም ተከተል የመምህራንን ስም ይዘርዝሩ።", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በእድሜ ቅደም ተከተል የመምህራንን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በእድሜ መግፋት የታዘዙ መምህራን ስም ማን ይባላል?", "query": "select name from teacher order by age asc", "predicted_sql": "select teacher.name from teacher where teacher.age > 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በእድሜ መግፋት የታዘዙ መምህራን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራን እድሜ እና የትውልድ ከተማ ስንት ናቸው?", "query": "select age , hometown from teacher", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራን እድሜ እና የትውልድ ከተማ ስንት ናቸው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የእያንዳንዱ መምህር ዕድሜ እና የትውልድ ከተማ ስንት ነው?", "query": "select age , hometown from teacher", "predicted_sql": "select count ( distinct course_arrange.teacher_id ) as number_of_teachers  , count ( distinct course_arrange.course_id ) as number_of_courses from course_arrange", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የእያንዳንዱ መምህር ዕድሜ እና የትውልድ ከተማ ስንት ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትውልድ ከተማቸው ``ትንሽ ሌቨር የከተማ ዲስትሪክት` ያልሆነውን መምህራን ስም ይዘርዝሩ።", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትውልድ ከተማቸው ``ትንሽ ሌቨር የከተማ ዲስትሪክት` ያልሆነውን መምህራን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የትውልድ ከተማቸው ``ትንሽ ሌቨር ከተማ ዲስትሪክት` ያልሆነው መምህራን ስም ማን ይባላል?", "query": "select name from teacher where hometown != 'little lever urban district'", "predicted_sql": "select teacher.name from teacher where teacher.age = 'ትንሽ ሌቨር ከተማ ዲስትሪክት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የትውልድ ከተማቸው ``ትንሽ ሌቨር ከተማ ዲስትሪክት` ያልሆነው መምህራን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ዕድሜያቸው 32 ወይም 33 የሆኑ የመምህራን ስም ይታዩ?", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ዕድሜያቸው 32 ወይም 33 የሆኑ የመምህራን ስም ይታዩ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ዕድሜያቸው 32 ወይም 33 የሆኑ መምህራን ስም ማን ይባላል?", "query": "select name from teacher where age = 32 or age = 33", "predicted_sql": "select teacher.name from teacher where teacher.age = 32 or teacher.age = 33", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ዕድሜያቸው 32 ወይም 33 የሆኑ መምህራን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የታናሹ መምህር የትውልድ ከተማ ማን ነው?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select teacher.name from teacher where teacher.age = ( select max ( teacher.age ) from teacher )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የታናሹ መምህር የትውልድ ከተማ ማን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ትንሹ አስተማሪ ከየት ነው የመጣው?", "query": "select hometown from teacher order by age asc limit 1", "predicted_sql": "select course.course_id  , course.staring_date  , course.course  , teacher.teacher_id  , teacher.name  , teacher.age  , teacher.hometown  , course_arrange.grade from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ትንሹ አስተማሪ ከየት ነው የመጣው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የተለያዩ የመምህራን መንደር እና ከእያንዳንዱ የትውልድ ከተማ የመምህራን ብዛት አሳይ።", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select count ( * ) from course_arrange where course_arrange.teacher_id = [teacher_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የተለያዩ የመምህራን መንደር እና ከእያንዳንዱ የትውልድ ከተማ የመምህራን ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ለእያንዳንዱ የትውልድ ከተማ ስንት አስተማሪዎች አሉ?", "query": "select hometown , count ( * ) from teacher group by hometown", "predicted_sql": "select count ( * ) from course", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ለእያንዳንዱ የትውልድ ከተማ ስንት አስተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በጣም የተለመዱትን የመምህራን መንደር ይዘርዝሩ።", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በጣም የተለመዱትን የመምህራን መንደር ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ለአስተማሪዎች በጣም የተለመዱ የትውልድ ከተማዎች የትኞቹ ናቸው?", "query": "select hometown from teacher group by hometown order by count ( * ) desc limit 1", "predicted_sql": "select course.course_id  , course.staring_date  , course.course from course_arrange join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ለአስተማሪዎች በጣም የተለመዱ የትውልድ ከተማዎች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ ሁለት መምህራን የሚጋሩትን የትውልድ ከተማዎችን አሳይ።", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ ሁለት መምህራን የሚጋሩትን የትውልድ ከተማዎችን አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ ሁለት መምህራን የመጡባቸው ከተሞች ከየትኛው ናቸው?", "query": "select hometown from teacher group by hometown having count ( * ) >= 2", "predicted_sql": "select course.course_id  , course.staring_date  , course.course  , teacher.name  , teacher.age  , teacher.hometown from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ ሁለት መምህራን የመጡባቸው ከተሞች ከየትኛው ናቸው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራንን ስም እና ለማስተማር የተዘጋጁትን ኮርሶች አሳይ።", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራንን ስም እና ለማስተማር የተዘጋጁትን ኮርሶች አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የእያንዳንዱ አስተማሪ ስም ማን ይባላል እና የሚያስተምሩት ኮርስ ምንድን ነው?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የእያንዳንዱ አስተማሪ ስም ማን ይባላል እና የሚያስተምሩት ኮርስ ምንድን ነው? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የአስተማሪዎችን ስም እና ኮርሶችን በአስተማሪ ስም በፊደል ቅደም ተከተል ያሳዩ።", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የአስተማሪዎችን ስም እና ኮርሶችን በአስተማሪ ስም በፊደል ቅደም ተከተል ያሳዩ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "በመምህሩ ስም በፊደል ቅደም ተከተል የሚያስተምሩት የመምህራን ስም እና ኮርሶች ማን ይባላሉ?", "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc", "predicted_sql": "select teacher.name  , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### በመምህሩ ስም በፊደል ቅደም ተከተል የሚያስተምሩት የመምህራን ስም እና ኮርሶች ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ለሂሳብ ኮርስ የመምህሩን ስም አሳይ.", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "select course.course from course", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ለሂሳብ ኮርስ የመምህሩን ስም አሳይ. \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የሂሳብ ትምህርቶችን የሚያስተምሩ ሰዎች ስም ማን ይባላል?", "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የሂሳብ ትምህርቶችን የሚያስተምሩ ሰዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራንን ስም እና የሚያስተምሩትን ኮርሶች ብዛት አሳይ።", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name  , count ( course.course_id ) as course_count from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id group by teacher.name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራንን ስም እና የሚያስተምሩትን ኮርሶች ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "የመምህራን ስም እና ምን ያህል ኮርሶች ያስተምራሉ?", "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### የመምህራን ስም እና ምን ያህል ኮርሶች ያስተምራሉ? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ ሁለት ኮርሶችን የሚያስተምሩ መምህራንን ስም አሳይ።", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ ሁለት ኮርሶችን የሚያስተምሩ መምህራንን ስም አሳይ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ቢያንስ ሁለት ኮርሶችን የሚያስተምሩ መምህራን ስም ማን ይባላል?", "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name having count ( * ) >= 2", "predicted_sql": "select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ቢያንስ ሁለት ኮርሶችን የሚያስተምሩ መምህራን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ኮርሶችን ለማስተማር ያልተዘጋጁ መምህራንን ስም ይዘርዝሩ።", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ኮርሶችን ለማስተማር ያልተዘጋጁ መምህራንን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "course_teach", "question": "ኮርሳቸው ያልተዘጋጀላቸው መምህራን ስም ማን ይባላል?", "query": "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )", "predicted_sql": "select teacher.name from teacher where teacher.teacher_id in ( select course_arrange.teacher_id from course_arrange )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | course : course.course_id , course.staring_date , course.course | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id# \n ### ኮርሳቸው ያልተዘጋጀላቸው መምህራን ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["course.*", "course.course_id", "course.staring_date", "course.course", "teacher.*", "teacher.teacher_id", "teacher.name", "teacher.age", "teacher.hometown", "course_arrange.*", "course_arrange.course_id", "course_arrange.teacher_id", "course_arrange.grade"]}
{"db_id": "museum_visit", "question": "ከ30 ዓመት በታች ስንት ጎብኝዎች አሉ?", "query": "select count ( * ) from visitor where age < 30", "predicted_sql": "select count ( * ) from visitor where age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ30 ዓመት በታች ስንት ጎብኝዎች አሉ? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 በላይ የሆነ የጎብኝዎችን ስም ይፈልጉ እና ውጤቱን ከከፍተኛ ወደ ዝቅተኛ ደረጃ ይዘዙ።", "query": "select name from visitor where level_of_membership > 4 order by level_of_membership desc", "predicted_sql": "select visitor.name  , visitor.level_of_membership  , visitor.age from visitor where visitor.level_of_membership = 'Gold'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 በላይ የሆነ የጎብኝዎችን ስም ይፈልጉ እና ውጤቱን ከከፍተኛ ወደ ዝቅተኛ ደረጃ ይዘዙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 ያልበለጠ የጎብኝዎች አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from visitor where level_of_membership <= 4", "predicted_sql": "select visitor.level_of_membership from visitor where visitor.age > 40", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 ያልበለጠ የጎብኝዎች አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው ከ4 በላይ የሆነ የጎብኝዎችን ስም እና የአባልነት ደረጃ ፈልግ እና ከሽማግሌ እስከ ወጣት በእድሜ ለይ።", "query": "select name , level_of_membership from visitor where level_of_membership > 4 order by age desc", "predicted_sql": "select visitor.name  , visitor.level_of_membership  , visitor.age  , museum.name  , museum.open_year from visitor join visit on visit.visitor_id = visitor.id join museum on visit.museum_id = museum.museum_id where visitor.level_of_membership = 'Gold' and visitor.age >= 18 and museum.open_year >= 2010", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው ከ4 በላይ የሆነ የጎብኝዎችን ስም እና የአባልነት ደረጃ ፈልግ እና ከሽማግሌ እስከ ወጣት በእድሜ ለይ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ብዙ ሰራተኞች ያሉት የሙዚየሙ መታወቂያ እና ስም ይፈልጉ?", "query": "select museum_id , name from museum order by num_of_staff desc limit 1", "predicted_sql": "select visitor.name from visitor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ብዙ ሰራተኞች ያሉት የሙዚየሙ መታወቂያ እና ስም ይፈልጉ? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ 2009 በፊት ክፍት የነበሩትን ሙዚየሞች የሚሠሩትን አማካኝ ሠራተኞች ያግኙ።", "query": "select avg ( num_of_staff ) from museum where open_year < 2009", "predicted_sql": "select visitor.name from visitor where visitor.level_of_membership = 'አማካኝ' and visitor.age >= 2009", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ 2009 በፊት ክፍት የነበሩትን ሙዚየሞች የሚሠሩትን አማካኝ ሠራተኞች ያግኙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ፕላዛ ሙዚየም የተሰየመው ሙዚየም የመክፈቻ አመት እና የሰራተኞች ቁጥር ስንት ነው?", "query": "select num_of_staff , open_year from museum where name = 'Plaza Museum'", "predicted_sql": "select visitor.name  , visitor.age  , count ( visitor.level_of_membership ) as num_of_memberships from visitor group by visitor.name  , visitor.age", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ፕላዛ ሙዚየም የተሰየመው ሙዚየም የመክፈቻ አመት እና የሰራተኞች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ2010 በኋላ ከተከፈቱት የሙዚየሞች አነስተኛ የሰራተኞች ብዛት የበለጠ ሰራተኞች ያላቸውን የሙዚየሞችን ስም ያግኙ።", "query": "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )", "predicted_sql": "select visitor.name from visitor where visitor.level_of_membership = 'premium' and visitor.age >= 18 and visitor.age <= 25 and visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year >= 2010 ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ2010 በኋላ ከተከፈቱት የሙዚየሞች አነስተኛ የሰራተኞች ብዛት የበለጠ ሰራተኞች ያላቸውን የሙዚየሞችን ስም ያግኙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "አንዳንድ ሙዚየሞችን ከአንድ ጊዜ በላይ ለጎበኙ ጎብኝዎች መታወቂያ፣ ስም እና እድሜ ያግኙ።", "query": "select visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id having count ( * ) > 1", "predicted_sql": "select visitor.name  , visitor.age from visitor where visitor.level_of_membership = 'Gold'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### አንዳንድ ሙዚየሞችን ከአንድ ጊዜ በላይ ለጎበኙ ጎብኝዎች መታወቂያ፣ ስም እና እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በሁሉም የሙዚየም ትኬቶች ውስጥ በጠቅላላ ትልቁን ገንዘብ ያወጡ የጎብኝዎች መታወቂያ፣ ስም እና የአባልነት ደረጃ ስንት ናቸው?", "query": "select visit.visitor_id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1", "predicted_sql": "select museum.museum_id  , museum.name  , museum.num_of_staff  , museum.open_year  , visitor.name  , visitor.level_of_membership  , visitor.age from museum join visit on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በሁሉም የሙዚየም ትኬቶች ውስጥ በጠቅላላ ትልቁን ገንዘብ ያወጡ የጎብኝዎች መታወቂያ፣ ስም እና የአባልነት ደረጃ ስንት ናቸው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ብዙ ጊዜ የሚጎበኘው የሙዚየሙ መታወቂያ እና ስም ምንድ ነው?", "query": "select visit.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1", "predicted_sql": "select museum.name as museum_name  , visitor.name as visitor_name from museum join visit on museum.museum_id = visit.museum_id join visitor on visit.visitor_id = visitor.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ብዙ ጊዜ የሚጎበኘው የሙዚየሙ መታወቂያ እና ስም ምንድ ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "እስካሁን እንግዳ ያልነበረው ሙዚየሙ ማን ይባላል?", "query": "select name from museum where museum_id not in ( select museum_id from visit )", "predicted_sql": "select visitor.name from visitor where visitor.age > 18", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### እስካሁን እንግዳ ያልነበረው ሙዚየሙ ማን ይባላል? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በአንድ ጊዜ ብዙ ትኬቶችን የገዛውን ጎብኝ ስም እና እድሜ ያግኙ።", "query": "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1", "predicted_sql": "select visitor.name  , visitor.age from visitor where visitor.age > 30", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በአንድ ጊዜ ብዙ ትኬቶችን የገዛውን ጎብኝ ስም እና እድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "በሁሉም ጉብኝቶች ውስጥ የተገዙት አማካኝ እና ከፍተኛው የትኬቶች ብዛት ምን ያህል ነው?", "query": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit", "predicted_sql": "select count ( * ) from visitor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### በሁሉም ጉብኝቶች ውስጥ የተገዙት አማካኝ እና ከፍተኛው የትኬቶች ብዛት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "የአባልነት ደረጃቸው 1 የሆነ የጎብኝዎች አጠቃላይ የቲኬት ወጪ ስንት ነው?", "query": "select sum ( visit.total_spent ) from visitor join visit on visitor.id = visit.visitor_id where visitor.level_of_membership = 1", "predicted_sql": "select count ( distinct museum.open_year ) as num_of_unique_years from museum where museum.num_of_staff > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### የአባልነት ደረጃቸው 1 የሆነ የጎብኝዎች አጠቃላይ የቲኬት ወጪ ስንት ነው? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ2009 በፊት የተከፈተ ሙዚየም እና ከ2011 በኋላ የተከፈተ ሙዚየም የጎበኘ ጎብኝ ማን ይባላል?", "query": "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on museum.museum_id = visit.museum_id where museum.open_year > 2011", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ2009 በፊት የተከፈተ ሙዚየም እና ከ2011 በኋላ የተከፈተ ሙዚየም የጎበኘ ጎብኝ ማን ይባላል? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ2010 በኋላ የተከፈተ ማንኛውንም ሙዚየም ያልጎበኙ ጎብኝዎችን ያግኙ።", "query": "select count ( * ) from visitor where id not in ( select visit.visitor_id from museum join visit on museum.museum_id = visit.museum_id where museum.open_year > 2010 )", "predicted_sql": "select * from museum where museum.open_year > 2010", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ2010 በኋላ የተከፈተ ማንኛውንም ሙዚየም ያልጎበኙ ጎብኝዎችን ያግኙ። \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "museum_visit", "question": "ከ 2013 በኋላ ወይም ከ 2008 በፊት ምን ያህል ሙዚየሞች ተከፍተዋል?", "query": "select count ( * ) from museum where open_year > 2013 or open_year < 2008", "predicted_sql": "select museum.name from museum where museum.open_year >= 2013 or museum.open_year <= 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year | visitor : visitor.id , visitor.name , visitor.level_of_membership , visitor.age | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id# \n ### ከ 2013 በኋላ ወይም ከ 2008 በፊት ምን ያህል ሙዚየሞች ተከፍተዋል? \n SELECT\n        ", "tc_original": ["museum.*", "museum.museum_id", "museum.name", "museum.num_of_staff", "museum.open_year", "visitor.*", "visitor.id", "visitor.name", "visitor.level_of_membership", "visitor.age", "visit.*", "visit.museum_id", "visit.visitor_id", "visit.num_of_ticket", "visit.total_spent"]}
{"db_id": "wta_1", "question": "አጠቃላይ የተጫዋቾችን ብዛት ያግኙ።", "query": "select count ( * ) from players", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### አጠቃላይ የተጫዋቾችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ስንት ተጫዋቾች አሉ?", "query": "select count ( * ) from players", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ስንት ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "አጠቃላይ የተዛማጆችን ብዛት ያግኙ።", "query": "select count ( * ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### አጠቃላይ የተዛማጆችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የተዛማጆችን ብዛት ይቁጠሩ።", "query": "select count ( * ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የተዛማጆችን ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በአሜሪካ ኮድ የሁሉንም ተጫዋቾች ስም እና የልደት ቀን ይዘርዝሩ።", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በአሜሪካ ኮድ የሁሉንም ተጫዋቾች ስም እና የልደት ቀን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከዩኤስኤ የተጫዋቾች የመጀመሪያ ስሞች እና የልደት ቀናት ምንድ ናቸው?", "query": "select first_name , birth_date from players where country_code = 'USA'", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከዩኤስኤ የተጫዋቾች የመጀመሪያ ስሞች እና የልደት ቀናት ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ግጥሚያዎች የተሸናፊዎችን እና አሸናፊዎችን አማካኝ ዕድሜ ያግኙ።", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year  , rankings.ranking_date  , rankings.ranking  , rankings.ranking_points  , rankings.tours from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ግጥሚያዎች የተሸናፊዎችን እና አሸናፊዎችን አማካኝ ዕድሜ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በተለያዩ ግጥሚያዎች የተሸናፊዎች እና አሸናፊዎች አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( loser_age ) , avg ( winner_age ) from matches", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points from players join matches on matches.winner_id = players.player_id or matches.loser_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በተለያዩ ግጥሚያዎች የተሸናፊዎች እና አሸናፊዎች አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች አማካይ የአሸናፊዎችን ደረጃ ያግኙ።", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች አማካይ የአሸናፊዎችን ደረጃ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ለአሸናፊዎች አማካይ ደረጃ ስንት ነው?", "query": "select avg ( winner_rank ) from matches", "predicted_sql": "select count ( distinct players.player_id ) as num_properties from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ለአሸናፊዎች አማካይ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ከፍተኛውን የተሸናፊዎች ደረጃ ያግኙ።", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ከፍተኛውን የተሸናፊዎች ደረጃ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች የተሻለው የተሸናፊዎች ደረጃ ምንድነው?", "query": "select min ( loser_rank ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች የተሻለው የተሸናፊዎች ደረጃ ምንድነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ተጫዋቾች የተለያዩ የአገር ኮዶችን ያግኙ።", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ተጫዋቾች የተለያዩ የአገር ኮዶችን ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ተጫዋቾቹ ከስንት የተለያዩ አገሮች የመጡ ናቸው?", "query": "select count ( distinct country_code ) from players", "predicted_sql": "select count ( distinct players.player_id ) as num_players from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ተጫዋቾቹ ከስንት የተለያዩ አገሮች የመጡ ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የተሸናፊዎችን የተለየ ስም ቁጥር ያግኙ።", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የተሸናፊዎችን የተለየ ስም ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ስንት የተለያዩ የተሸናፊ ስሞች አሉ?", "query": "select count ( distinct loser_name ) from matches", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ስንት የተለያዩ የተሸናፊ ስሞች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ10 ተዛማጆች በላይ ያለውን የቱርኒ ስም ያግኙ።", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select players.first_name  , players.last_name from players limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ10 ተዛማጆች በላይ ያለውን የቱርኒ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ10 በላይ ግጥሚያ ያላቸው የውድድሮች ስም ማን ይባላል?", "query": "select tourney_name from matches group by tourney_name having count ( * ) > 10", "predicted_sql": "select players.first_name  , players.last_name from players limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ10 በላይ ግጥሚያ ያላቸው የውድድሮች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁለቱም በ2013 እና 2016 የተጫወቱትን አሸናፊዎች ስም ይዘርዝሩ።", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year between 2013 and 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁለቱም በ2013 እና 2016 የተጫወቱትን አሸናፊዎች ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013 እና 2016 ያሸነፉ ተጫዋቾች ስም ማን ይባላል?", "query": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016", "predicted_sql": "select players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id where matches.year between 2013 and 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013 እና 2016 ያሸነፉ ተጫዋቾች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013 ወይም 2016 ዓመታት ውስጥ የተጫወቱትን ሁሉንም ግጥሚያዎች ይዘርዝሩ።", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id or matches.loser_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_date between '2013-01-01' and '2016-12-31'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013 ወይም 2016 ዓመታት ውስጥ የተጫወቱትን ሁሉንም ግጥሚያዎች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ2013 ወይም 2016 ስንት ግጥሚያዎች ተጫውተዋል?", "query": "select count ( * ) from matches where year = 2013 or year = 2016", "predicted_sql": "select count ( * ) from matches where year >= 2013 and year <= 2016", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ2013 ወይም 2016 ስንት ግጥሚያዎች ተጫውተዋል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁለቱም የቱርኒ WTA ሻምፒዮና እና በአውስትራሊያ ኦፕን ያሸነፉ የተጫዋቾች የአገር ኮድ እና የመጀመሪያ ስም ማን ይባላል?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "select players.country_code  , players.first_name  , players.last_name from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_level = 'WTA' and matches.tourney_id like '%Open' and rankings.tours > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁለቱም የቱርኒ WTA ሻምፒዮና እና በአውስትራሊያ ኦፕን ያሸነፉ የተጫዋቾች የአገር ኮድ እና የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ሁለቱንም የWTA ሻምፒዮና እና የአውስትራሊያ ክፈት ያሸነፉ ተጫዋቾች የመጀመሪያ ስሞች እና የአገር ኮድ ምንድ ናቸው?", "query": "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_id  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_id  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year  , rankings.ranking_date  , rankings.ranking  , rankings.player_id  , rankings.ranking_points  , rankings.tours from players join matches on matches.winner_id = players.player_id or matches.loser_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ሁለቱንም የWTA ሻምፒዮና እና የአውስትራሊያ ክፈት ያሸነፉ ተጫዋቾች የመጀመሪያ ስሞች እና የአገር ኮድ ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የጥንታዊውን ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ያግኙ።", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , matches.tourney_name from players join matches on matches.winner_id = players.player_id where matches.year = 2021", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የጥንታዊውን ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የጥንታዊው ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ማን ይባላል?", "query": "select first_name , country_code from players order by birth_date asc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players where players.birth_date = ( select max ( players.birth_date ) from players )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የጥንታዊው ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በተወለዱበት ቀን የሁሉም ተጫዋቾች የመጀመሪያ እና የመጨረሻ ስም ይዘርዝሩ።", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players where players.birth_date = '2022-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በተወለዱበት ቀን የሁሉም ተጫዋቾች የመጀመሪያ እና የመጨረሻ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በልደት ቀን የተደረደሩት የሁሉም ተጫዋቾች ሙሉ ስም ማን ይባላል?", "query": "select first_name , last_name from players order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በልደት ቀን የተደረደሩት የሁሉም ተጫዋቾች ሙሉ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የቀሩት ሁሉ ተጫዋቾች የመጀመሪያ እና የመጨረሻ ስም ይዘርዝሩ / L እጅ የልደት ቀን ቅደም ተከተል.", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , matches.tourney_name  , matches.tourney_date from players join matches on matches.winner_id = players.player_id where matches.round = 'L'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የቀሩት ሁሉ ተጫዋቾች የመጀመሪያ እና የመጨረሻ ስም ይዘርዝሩ / L እጅ የልደት ቀን ቅደም ተከተል. \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በትውልድ ቀን ቅደም ተከተል የሁሉም ግራ እጃቸው ተጫዋቾች ሙሉ ስም ማን ይባላል?", "query": "select first_name , last_name from players where hand = 'L' order by birth_date asc", "predicted_sql": "select players.first_name || ' ' || players.last_name as full_name from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በትውልድ ቀን ቅደም ተከተል የሁሉም ግራ እጃቸው ተጫዋቾች ሙሉ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ የጉብኝቶችን ብዛት ያከናወነውን ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ያግኙ።", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ የጉብኝቶችን ብዛት ያከናወነውን ተጫዋች የመጀመሪያ ስም እና የአገር ኮድ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ ጉብኝቶች ያለው የተጫዋቹ የመጀመሪያ ስም እና የአገር ኮድ ማን ይባላል?", "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ ጉብኝቶች ያለው የተጫዋቹ የመጀመሪያ ስም እና የአገር ኮድ ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በጣም ብዙ የግጥሚያዎች ብዛት ያለው ዓመት ያግኙ።", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select players.birth_date from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where rankings.ranking_date > 2010", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በጣም ብዙ የግጥሚያዎች ብዛት ያለው ዓመት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የትኛው አመት ብዙ ግጥሚያዎች ነበሩት?", "query": "select year from matches group by year order by count ( * ) desc limit 1", "predicted_sql": "select count ( distinct matches.match_num ) as num_matches from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የትኛው አመት ብዙ ግጥሚያዎች ነበሩት? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ ጊዜ ያሸነፈውን የአሸናፊውን ስም እና ደረጃ ነጥብ ያግኙ።", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year  , rankings.ranking_date  , rankings.ranking  , rankings.ranking_points  , rankings.tours from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ ጊዜ ያሸነፈውን የአሸናፊውን ስም እና ደረጃ ነጥብ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ ግጥሚያዎችን ያሸነፈ አሸናፊው ስሙ ማን ይባላል እና ይህ ተጫዋች ምን ያህል የደረጃ ነጥብ አለው?", "query": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ ግጥሚያዎችን ያሸነፈ አሸናፊው ስሙ ማን ይባላል እና ይህ ተጫዋች ምን ያህል የደረጃ ነጥብ አለው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከፍተኛውን ነጥብ ያለው እና በአውስትራሊያ ክፍት ቱርኒ የተሳተፈውን የአሸናፊውን ስም ያግኙ።", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከፍተኛውን ነጥብ ያለው እና በአውስትራሊያ ክፍት ቱርኒ የተሳተፈውን የአሸናፊውን ስም ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በአውስትራሊያ ኦፕን ውድድር የተሳተፈው ከፍተኛ ነጥብ ያለው አሸናፊ ስሙ ማን ይባላል?", "query": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "predicted_sql": "select players.first_name from players order by players.player_id desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በአውስትራሊያ ኦፕን ውድድር የተሳተፈው ከፍተኛ ነጥብ ያለው አሸናፊ ስሙ ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በጨዋታው እጅግ በጣም ብዙ ደቂቃዎችን በመያዝ የተጫወተውን የተሸናፊ እና አሸናፊ ስም ያግኙ።", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , matches.winner_name  , matches.loser_name  , rankings.ranking_date  , rankings.ranking  , rankings.ranking_points from players join matches on matches.winner_id = players.player_id or matches.loser_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በጨዋታው እጅግ በጣም ብዙ ደቂቃዎችን በመያዝ የተጫወተውን የተሸናፊ እና አሸናፊ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ረጅሙን ግጥሚያ ላይ የተጫወተው አሸናፊ እና ተሸናፊው ስም ማን ይባላል?", "query": "select winner_name , loser_name from matches order by minutes desc limit 1", "predicted_sql": "select players.first_name  , players.last_name from players where players.player_id = 'ረጅሙን ግጥሚያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ረጅሙን ግጥሚያ ላይ የተጫወተው አሸናፊ እና ተሸናፊው ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ ተጫዋች አማካይ ደረጃ እና የመጀመሪያ ስማቸውን ያግኙ።", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ ተጫዋች አማካይ ደረጃ እና የመጀመሪያ ስማቸውን ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ተጫዋቾች የመጀመሪያ ስም እና አማካኝ ደረጃቸው ምንድ ነው?", "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ተጫዋቾች የመጀመሪያ ስም እና አማካኝ ደረጃቸው ምንድ ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ ተጫዋች አጠቃላይ የደረጃ ነጥቦችን እና የመጀመሪያ ስማቸውን ያግኙ።", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ ተጫዋች አጠቃላይ የደረጃ ነጥቦችን እና የመጀመሪያ ስማቸውን ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "የሁሉም ተጫዋቾች የመጀመሪያ ስሞች እና አጠቃላይ የደረጃ ነጥቦቻቸው ምንድ ናቸው?", "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### የሁሉም ተጫዋቾች የመጀመሪያ ስሞች እና አጠቃላይ የደረጃ ነጥቦቻቸው ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ ሀገር የተጫዋቾች ብዛት ያግኙ።", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ ሀገር የተጫዋቾች ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከየአገሩ ስንት ተጫዋቾች ናቸው?", "query": "select count ( * ) , country_code from players group by country_code", "predicted_sql": "select count ( distinct players.player_id ) as num_players from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከየአገሩ ስንት ተጫዋቾች ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ የተጫዋቾች ቁጥር ያለባትን ሀገር ኮድ አግኝ።", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ የተጫዋቾች ቁጥር ያለባትን ሀገር ኮድ አግኝ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ብዙ ተጫዋቾች ያሏት የአገሪቱ ኮድ ምንድነው?", "query": "select country_code from players group by country_code order by count ( * ) desc limit 1", "predicted_sql": "select distinct country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ብዙ ተጫዋቾች ያሏት የአገሪቱ ኮድ ምንድነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ50 በላይ ተጫዋቾች ያሏቸውን አገሮች ኮዶች ያግኙ።", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players limit 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ50 በላይ ተጫዋቾች ያሏቸውን አገሮች ኮዶች ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ከ 50 በላይ ተጫዋቾች ያሏቸው አገሮች ኮድ ምንድን ናቸው?", "query": "select country_code from players group by country_code having count ( * ) > 50", "predicted_sql": "select count ( * ) from matches", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ከ 50 በላይ ተጫዋቾች ያሏቸው አገሮች ኮድ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የደረጃ ቀን አጠቃላይ የጉብኝት ብዛት ያግኙ።", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select matches.tourney_date  , count ( * ) as num_matches from matches where matches.tourney_date = '2021-01-01' group by matches.tourney_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የደረጃ ቀን አጠቃላይ የጉብኝት ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የደረጃ አሰጣጥ ቀን ስንት ጠቅላላ ጉብኝቶች ነበሩ?", "query": "select sum ( tours ) , ranking_date from rankings group by ranking_date", "predicted_sql": "select count ( distinct ranking_date ) as num_ranking_dates from rankings", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የደረጃ አሰጣጥ ቀን ስንት ጠቅላላ ጉብኝቶች ነበሩ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በየአመቱ የተዛማጆችን ብዛት ያግኙ።", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players where players.birth_date > '1990-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በየአመቱ የተዛማጆችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በየአመቱ ስንት ግጥሚያዎች ተደረጉ?", "query": "select count ( * ) , year from matches group by year", "predicted_sql": "select count ( * ) from matches where year = 'የአመት'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በየአመቱ ስንት ግጥሚያዎች ተደረጉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ውስጥ የ 3 ታናሽ አሸናፊዎችን ስም እና ደረጃ ያግኙ።", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.first_name  , players.last_name  , players.country_code from players limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ውስጥ የ 3 ታናሽ አሸናፊዎችን ስም እና ደረጃ ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ውስጥ የሶስቱ ታናሽ አሸናፊዎች ስሞች እና ደረጃዎች ምንድ ናቸው?", "query": "select distinct winner_name , winner_rank from matches order by winner_age asc limit 3", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code  , matches.best_of  , matches.draw_size  , matches.loser_age  , matches.loser_entry  , matches.loser_hand  , matches.loser_ht  , matches.loser_id  , matches.loser_ioc  , matches.loser_name  , matches.loser_rank  , matches.loser_rank_points  , matches.loser_seed  , matches.match_num  , matches.minutes  , matches.round  , matches.score  , matches.surface  , matches.tourney_date  , matches.tourney_id  , matches.tourney_level  , matches.tourney_name  , matches.winner_age  , matches.winner_entry  , matches.winner_hand  , matches.winner_ht  , matches.winner_id  , matches.winner_ioc  , matches.winner_name  , matches.winner_rank  , matches.winner_rank_points  , matches.winner_seed  , matches.year  , rankings.ranking_date  , rankings.ranking  , rankings.player_id  , rankings.ranking_points  , rankings.tours from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ውስጥ የሶስቱ ታናሽ አሸናፊዎች ስሞች እና ደረጃዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በ WTA ሻምፒዮና ውስጥ ምን ያህሉ የተለያዩ አሸናፊዎች ተሳትፈዋል እና ግራ እጅ ነበራቸው?", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players where players.player_id in ( select matches.winner_id from matches where matches.tourney_level = 'WTA' ) or players.player_id in ( select matches.loser_id from matches where matches.tourney_level = 'WTA' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በ WTA ሻምፒዮና ውስጥ ምን ያህሉ የተለያዩ አሸናፊዎች ተሳትፈዋል እና ግራ እጅ ነበራቸው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በWTA ሻምፒዮና ላይ የተሳተፉ የግራ እጅ አሸናፊዎችን ቁጥር ያግኙ።", "query": "select count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "predicted_sql": "select players.player_id  , players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players join matches on matches.winner_id = players.player_id join rankings on rankings.player_id = players.player_id where matches.tourney_level = 'WTA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በWTA ሻምፒዮና ላይ የተሳተፉ የግራ እጅ አሸናፊዎችን ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ከፍተኛውን ነጥብ የያዘውን የአሸናፊውን የመጀመሪያ ስም፣ የሀገር ኮድ እና የልደት ቀን ያግኙ።", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.hand  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ከፍተኛውን ነጥብ የያዘውን የአሸናፊውን የመጀመሪያ ስም፣ የሀገር ኮድ እና የልደት ቀን ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "በሁሉም ግጥሚያዎች ብዙ አሸናፊ የደረጃ ነጥብ ያለው የተጫዋቹ የመጀመሪያ ስም፣ የአገር ኮድ እና የትውልድ ቀን ምንድ ነው?", "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1", "predicted_sql": "select players.first_name  , players.last_name  , players.birth_date  , players.country_code from players", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### በሁሉም ግጥሚያዎች ብዙ አሸናፊ የደረጃ ነጥብ ያለው የተጫዋቹ የመጀመሪያ ስም፣ የአገር ኮድ እና የትውልድ ቀን ምንድ ነው? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የእጅ አይነት የተጫዋቾችን ብዛት ያግኙ።", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "select count ( * ) from players where hand = 'left'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የእጅ አይነት የተጫዋቾችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "wta_1", "question": "ለእያንዳንዱ የእጅ አይነት ስንት ተጫዋቾች አሉ?", "query": "select count ( * ) , hand from players group by hand", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code | matches : matches.best_of , matches.draw_size , matches.loser_age , matches.loser_entry , matches.loser_hand , matches.loser_ht , matches.loser_id , matches.loser_ioc , matches.loser_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.winner_hand , matches.winner_ht , matches.winner_id , matches.winner_ioc , matches.winner_name , matches.winner_rank , matches.winner_rank_points , matches.winner_seed , matches.year | rankings : rankings.ranking_date , rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id# \n ### ለእያንዳንዱ የእጅ አይነት ስንት ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["players.*", "players.player_id", "players.first_name", "players.last_name", "players.hand", "players.birth_date", "players.country_code", "matches.*", "matches.best_of", "matches.draw_size", "matches.loser_age", "matches.loser_entry", "matches.loser_hand", "matches.loser_ht", "matches.loser_id", "matches.loser_ioc", "matches.loser_name", "matches.loser_rank", "matches.loser_rank_points", "matches.loser_seed", "matches.match_num", "matches.minutes", "matches.round", "matches.score", "matches.surface", "matches.tourney_date", "matches.tourney_id", "matches.tourney_level", "matches.tourney_name", "matches.winner_age", "matches.winner_entry", "matches.winner_hand", "matches.winner_ht", "matches.winner_id", "matches.winner_ioc", "matches.winner_name", "matches.winner_rank", "matches.winner_rank_points", "matches.winner_seed", "matches.year", "rankings.*", "rankings.ranking_date", "rankings.ranking", "rankings.player_id", "rankings.ranking_points", "rankings.tours"]}
{"db_id": "battle_death", "question": "ስንት መርከቦች &#39;የተያዙ&#39; ናቸው ያበቁት?", "query": "select count ( * ) from ship where disposition_of_ship = 'Captured'", "predicted_sql": "select battle.name from battle where battle.result = 'lost'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ስንት መርከቦች &#39;የተያዙ&#39; ናቸው ያበቁት? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ለስሞቹ በሚወርድበት በፊደል ቅደም ተከተል የታዘዘውን ስም እና ቶን ይዘርዝሩ።", "query": "select name , tonnage from ship order by name desc", "predicted_sql": "select battle.name  , battle.date  , ship.name  , ship.tonnage  , death.note  , death.killed from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ለስሞቹ በሚወርድበት በፊደል ቅደም ተከተል የታዘዘውን ስም እና ቶን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "የእያንዳንዱን ጦርነት ስም፣ ቀን እና ውጤት ይዘርዝሩ።", "query": "select name , date from battle", "predicted_sql": "select battle.name  , battle.date  , ship.disposition_of_ship from battle join ship on ship.lost_in_battle = battle.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### የእያንዳንዱን ጦርነት ስም፣ ቀን እና ውጤት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በእያንዳንዱ ጊዜ ከፍተኛው እና ዝቅተኛው የሞት መጠን ምን ያህል ነው?", "query": "select max ( killed ) , min ( killed ) from death", "predicted_sql": "select death.note from death where death.id = 'ከፍተኛው' or death.id = 'ዝቅተኛው'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በእያንዳንዱ ጊዜ ከፍተኛው እና ዝቅተኛው የሞት መጠን ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በእያንዳንዱ ጊዜ የሚደርሰው አማካይ የጉዳት ብዛት ስንት ነው?", "query": "select avg ( injured ) from death", "predicted_sql": "select count ( * ) from battle where battle.result = 'Victory'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በእያንዳንዱ ጊዜ የሚደርሰው አማካይ የጉዳት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ቶን በያዘው መርከብ የሞት እና የአካል ጉዳት ሁኔታዎች ምን ምን ናቸው?", "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'", "predicted_sql": "select battle.name  , battle.date  , ship.name  , ship.tonnage  , ship.ship_type  , death.note  , death.killed  , death.injured from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ቶን በያዘው መርከብ የሞት እና የአካል ጉዳት ሁኔታዎች ምን ምን ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "የቡልጋሪያ አዛዥ &#39;ቦሪል&#39; ካልሆነ የትግሎች ስም እና ውጤቶች ምንድ ናቸው?", "query": "select name , result from battle where bulgarian_commander != 'Boril'", "predicted_sql": "select battle.name  , battle.date  , ship.name  , ship.tonnage from battle join ship on ship.lost_in_battle = battle.id where battle.bulgarian_commander = 'ቦሪል'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### የቡልጋሪያ አዛዥ &#39;ቦሪል&#39; ካልሆነ የትግሎች ስም እና ውጤቶች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "የትኛውንም የ&#39;ብሪግ&#39; አይነት መርከቦች ያጡት የጦርነቱ ልዩ ልዩ መታወቂያዎች እና ስሞች ምንድናቸው?", "query": "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'", "predicted_sql": "select ship.ship_type from ship", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### የትኛውንም የ&#39;ብሪግ&#39; አይነት መርከቦች ያጡት የጦርነቱ ልዩ ልዩ መታወቂያዎች እና ስሞች ምንድናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በድምሩ ከ10 በላይ ሰዎች የተገደሉበት ጦርነቱ መታወቂያ እና ስም ማን ይባላል።", "query": "select battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id group by battle.id having sum ( death.killed ) > 10", "predicted_sql": "select battle.name from battle order by battle.date desc limit 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በድምሩ ከ10 በላይ ሰዎች የተገደሉበት ጦርነቱ መታወቂያ እና ስም ማን ይባላል። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "አጠቃላይ ጉዳቶችን ያስከተለው የመርከብ መታወቂያ እና ስም ምንድነው?", "query": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### አጠቃላይ ጉዳቶችን ያስከተለው የመርከብ መታወቂያ እና ስም ምንድነው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "በቡልጋሪያኛ አዛዥ &#39;ካሎያን&#39; እና በላቲን አዛዥ &#39;ባልድዊን I&#39; መካከል ያሉት ልዩ ልዩ የውጊያ ስሞች ምንድ ናቸው?", "query": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'", "predicted_sql": "select ship.name from battle join ship on ship.lost_in_battle = battle.id where battle.bulgarian_commander = 'ካሎያን' and battle.latin_commander = 'ባልድዊን I'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### በቡልጋሪያኛ አዛዥ &#39;ካሎያን&#39; እና በላቲን አዛዥ &#39;ባልድዊን I&#39; መካከል ያሉት ልዩ ልዩ የውጊያ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ለጦርነቱ ምን ያህል የተለያዩ ውጤቶች አሉ?", "query": "select count ( distinct result ) from battle", "predicted_sql": "select battle.name from battle", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ለጦርነቱ ምን ያህል የተለያዩ ውጤቶች አሉ? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ስንት ጦርነቶች ቶን ያላት መርከብ ያላጣችው &#39;225&#39;?", "query": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ስንት ጦርነቶች ቶን ያላት መርከብ ያላጣችው &#39;225&#39;? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "&#39;Lettice&#39; እና &#39;HMS Atalanta&#39; የተሰኘውን መርከብ ያጣውን ጦርነት ስም እና ቀን ይዘርዝሩ", "query": "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta'", "predicted_sql": "select battle.name  , battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = 'Lettice' or ship.name = 'HMS Atalanta'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### &#39;Lettice&#39; እና &#39;HMS Atalanta&#39; የተሰኘውን መርከብ ያጣውን ጦርነት ስም እና ቀን ይዘርዝሩ \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "ምንም መርከቦች የጠፉባቸው ጦርነቶች ስሞችን፣ ውጤቶች እና የቡልጋሪያ አዛዦችን በ&#39;እንግሊዝኛ ቻናል&#39; አሳይ።", "query": "select name , result , bulgarian_commander from battle except select battle.name , battle.result , battle.bulgarian_commander from battle join ship on battle.id = ship.lost_in_battle where ship.location = 'English Channel'", "predicted_sql": "select battle.id  , battle.name  , battle.date  , battle.bulgarian_commander  , battle.latin_commander  , battle.result from battle  , ship  , death where ship.lost_in_battle = battle.id and death.caused_by_ship_id = ship.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### ምንም መርከቦች የጠፉባቸው ጦርነቶች ስሞችን፣ ውጤቶች እና የቡልጋሪያ አዛዦችን በ&#39;እንግሊዝኛ ቻናል&#39; አሳይ። \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "battle_death", "question": "&#39;ምስራቅ&#39; ንኡስ ሕብረቁምፊ ያላቸው የሞት ክስተቶች ማስታወሻዎች ምንድን ናቸው?", "query": "select note from death where note like '%East%'", "predicted_sql": "select death.note from death where death.note = 'ምስራቅ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.latin_commander , battle.result | ship : ship.lost_in_battle , ship.id , ship.name , ship.tonnage , ship.ship_type , ship.location , ship.disposition_of_ship | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id# \n ### &#39;ምስራቅ&#39; ንኡስ ሕብረቁምፊ ያላቸው የሞት ክስተቶች ማስታወሻዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["battle.*", "battle.id", "battle.name", "battle.date", "battle.bulgarian_commander", "battle.latin_commander", "battle.result", "ship.*", "ship.lost_in_battle", "ship.id", "ship.name", "ship.tonnage", "ship.ship_type", "ship.location", "ship.disposition_of_ship", "death.*", "death.caused_by_ship_id", "death.id", "death.note", "death.killed", "death.injured"]}
{"db_id": "student_transcripts_tracking", "question": "መስመር 1 እና መስመር 2ን ጨምሮ ሁሉም አድራሻዎች ምንድናቸው?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### መስመር 1 እና መስመር 2ን ጨምሮ ሁሉም አድራሻዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለሁሉም አድራሻዎች የመጀመሪያው እና ሁለተኛ መስመር ምንድን ነው?", "query": "select line_1 , line_2 from addresses", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለሁሉም አድራሻዎች የመጀመሪያው እና ሁለተኛ መስመር ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአጠቃላይ ስንት ኮርሶች ተዘርዝረዋል?", "query": "select count ( * ) from courses", "predicted_sql": "select count ( courses.course_id ) from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአጠቃላይ ስንት ኮርሶች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት ኮርሶች አሉ?", "query": "select count ( * ) from courses", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት ኮርሶች አሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሂሳብ ትምህርት እንዴት ይገለጻል?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሂሳብ ትምህርት እንዴት ይገለጻል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለሁሉም የሂሳብ ትምህርቶች መግለጫዎች ምንድ ናቸው?", "query": "select course_description from courses where course_name = 'math'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለሁሉም የሂሳብ ትምህርቶች መግለጫዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በከተማው ፖርት ቼልሲ ውስጥ ያለው አድራሻ ዚፕ ኮድ ምንድን ነው?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select addresses.line_1 from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በከተማው ፖርት ቼልሲ ውስጥ ያለው አድራሻ ዚፕ ኮድ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለፖርት ቼልሲ ዚፕ ኮድ ምንድን ነው?", "query": "select zip_postcode from addresses where city = 'Port Chelsea'", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለፖርት ቼልሲ ዚፕ ኮድ ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትኛው ክፍል ብዙ ዲግሪዎችን ይሰጣል? የመምሪያውን ስም እና መታወቂያ ይዘርዝሩ።", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name  , departments.department_description  , departments.other_details from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትኛው ክፍል ብዙ ዲግሪዎችን ይሰጣል? የመምሪያውን ስም እና መታወቂያ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ዲግሪ ያለው የመምሪያው ስም እና መታወቂያ ማን ይባላል?", "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1", "predicted_sql": "select departments.department_name  , departments.department_description from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ዲግሪ ያለው የመምሪያው ስም እና መታወቂያ ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ምን ያህል ክፍሎች ማንኛውንም ዲግሪ ይሰጣሉ?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ምን ያህል ክፍሎች ማንኛውንም ዲግሪ ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት የተለያዩ ክፍሎች ዲግሪ ይሰጣሉ?", "query": "select count ( distinct department_id ) from degree_programs", "predicted_sql": "select departments.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት የተለያዩ ክፍሎች ዲግሪ ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት የተለያዩ የዲግሪ ስሞች ቀርበዋል?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select count ( degree_program_id ) from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት የተለያዩ የዲግሪ ስሞች ቀርበዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት የተለያዩ ዲግሪዎች ይሰጣሉ?", "query": "select count ( distinct degree_summary_name ) from degree_programs", "predicted_sql": "select departments.department_id from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት የተለያዩ ዲግሪዎች ይሰጣሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የምህንድስና ክፍል ምን ያህል ዲግሪ ይሰጣል?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የምህንድስና ክፍል ምን ያህል ዲግሪ ይሰጣል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የምህንድስና ክፍል ስንት ዲግሪ አለው?", "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'engineer'", "predicted_sql": "select count ( departments.department_id ) from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የምህንድስና ክፍል ስንት ዲግሪ አለው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሁሉም ክፍሎች ስሞች እና መግለጫዎች ምንድ ናቸው?", "query": "select section_name , section_description from sections", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሁሉም ክፍሎች ስሞች እና መግለጫዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የሁሉም ክፍሎች ስሞች እና መግለጫዎች ምንድ ናቸው?", "query": "select section_name , section_description from sections", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የሁሉም ክፍሎች ስሞች እና መግለጫዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢበዛ 2 ክፍሎች ያሉት የኮርሶች ስሞች እና መታወቂያ ምን ምን ናቸው?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_name  , courses.course_description from courses limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢበዛ 2 ክፍሎች ያሉት የኮርሶች ስሞች እና መታወቂያ ምን ምን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ከ 2 ክፍሎች በታች ያሉት የእያንዳንዱ ኮርስ ስሞች እና መታወቂያዎች ምንድ ናቸው?", "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2", "predicted_sql": "select courses.course_name  , courses.course_description  , courses.other_details  , sections.section_name  , sections.section_description  , sections.other_details from courses join sections on sections.course_id = courses.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ከ 2 ክፍሎች በታች ያሉት የእያንዳንዱ ኮርስ ስሞች እና መታወቂያዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የክፍል_ስሙን በተገላቢጦሽ መዝገበ ቃላት ይዘርዝሩ።", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select students.first_name  , students.last_name  , departments.department_name  , courses.course_name from students join student_enrolment on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id join departments on departments.department_id = degree_programs.department_id join student_enrolment_courses on student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id join courses on courses.course_id = student_enrolment_courses.course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የክፍል_ስሙን በተገላቢጦሽ መዝገበ ቃላት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በተቃራኒው የፊደል ቅደም ተከተል የክፍሎቹ ስሞች ምንድ ናቸው?", "query": "select section_name from sections order by section_name desc", "predicted_sql": "select departments.department_name from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በተቃራኒው የፊደል ቅደም ተከተል የክፍሎቹ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪ የተመዘገበበት ሴሚስተር ስንት ነው? ሁለቱንም ስም እና መታወቂያ አሳይ።", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select count ( * ) as total_students from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪ የተመዘገበበት ሴሚስተር ስንት ነው? ሁለቱንም ስም እና መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለእያንዳንዱ ሴሚስተር ብዙ ተማሪዎች የተመዘገቡበት ስም እና መታወቂያ ማን ይባላል?", "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( * ) desc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.email_address from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለእያንዳንዱ ሴሚስተር ብዙ ተማሪዎች የተመዘገቡበት ስም እና መታወቂያ ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የኮምፒዩተሩ ንዑስ ሕብረቁምፊ ስሙ ያለው የመምሪያው መግለጫ ምንድነው?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የኮምፒዩተሩ ንዑስ ሕብረቁምፊ ስሙ ያለው የመምሪያው መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስሙ ኮምፒዩተር የሚል ቃል ላለው የመምሪያው መግለጫ ምንድነው?", "query": "select department_description from departments where department_name like '%computer%'", "predicted_sql": "select courses.course_name from courses where courses.course_id = 'ስሙ ኮምፒዩተር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስሙ ኮምፒዩተር የሚል ቃል ላለው የመምሪያው መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአንድ ሴሚስተር በ2 ዲግሪ መርሃ ግብሮች የተመዘገቡ እነማን ናቸው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም እና መታወቂያውን ይዘርዝሩ.", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.other_student_details from students where students.date_first_registered = 'አንድ ሴሚስተር' and students.date_left = '2 ዲግሪ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአንድ ሴሚስተር በ2 ዲግሪ መርሃ ግብሮች የተመዘገቡ እነማን ናቸው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም እና መታወቂያውን ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአንድ ሴሚስተር በ2 ዲግሪ መርሃ ግብር የተመዘገቡ ተማሪዎች ሁሉ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስሞች ምንድ ናቸው?", "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.date_first_registered  , students.date_left  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details  , departments.department_name  , degree_programs.degree_summary_name  , degree_programs.degree_summary_description  , courses.course_name  , courses.course_description  , sections.section_name  , sections.section_description  , semesters.semester_name  , semesters.semester_description from students join addresses on students.permanent_address_id = addresses.address_id join departments on degree_programs.department_id = departments.department_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id join student_enrolment on student_enrolment.student_id = students.student_id join semesters on student_enrolment.semester_id = semesters.semester_id join student_enrolment_courses on student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id join courses on student_enrolment_courses.course_id = courses.course_id join sections on sections.course_id = courses.course_id join transcript_contents on transcript_contents.student_course_id = student_enrolment_courses.student_course_id join transcripts on transcript_contents.transcript_id = transcripts.transcript_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአንድ ሴሚስተር በ2 ዲግሪ መርሃ ግብር የተመዘገቡ ተማሪዎች ሁሉ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በባችለር ዲግሪ ፕሮግራም የተመዘገበ ማነው? የመጀመሪያ ስም, የአባት ስም, የአያት ስም ይዘርዝሩ.", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በባችለር ዲግሪ ፕሮግራም የተመዘገበ ማነው? የመጀመሪያ ስም, የአባት ስም, የአያት ስም ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በባችለርስ ፕሮግራም ለተመዘገቡ ሁሉም ሰዎች የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስሞች ምንድናቸው?", "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.date_first_registered  , students.date_left  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details  , courses.course_name  , courses.course_description  , departments.department_name  , departments.department_description  , degree_programs.degree_summary_name  , degree_programs.degree_summary_description  , sections.section_name  , sections.section_description  , semesters.semester_name  , semesters.semester_description  , students.cell_mobile_number  , students.email_address  , students.ssn  , students.other_student_details from students join addresses on students.permanent_address_id = addresses.address_id join courses on student_enrolment_courses.course_id = courses.course_id join departments on degree_programs.department_id = departments.department_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id join sections on sections.course_id = courses.course_id join semesters on student_enrolment.semester_id = semesters.semester_id join student_enrolment on student_enrolment.student_id = students.student_id join student_enrolment_courses on student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id join transcripts on transcript_contents.transcript_id = transcripts.transcript_id join transcript_contents on transcript_contents.student_course_id = student_enrolment_courses.student_course_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በባችለርስ ፕሮግራም ለተመዘገቡ ሁሉም ሰዎች የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስሞች ምንድናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ቁጥር ያላቸው ተማሪዎች የተመዘገቡበትን ዓይነት ፕሮግራም ያግኙ?", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select degree_programs.degree_summary_name from degree_programs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ቁጥር ያላቸው ተማሪዎች የተመዘገቡበትን ዓይነት ፕሮግራም ያግኙ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በብዛት የተመዘገቡ ተማሪዎች ቁጥር ያለው የዲግሪ ማጠቃለያ ስም ስንት ነው?", "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1", "predicted_sql": "select count ( * ) from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በብዛት የተመዘገቡ ተማሪዎች ቁጥር ያለው የዲግሪ ማጠቃለያ ስም ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አብዛኞቹ ተማሪዎች የተመዘገቡበትን ፕሮግራም ያግኙ። ሁለቱንም መታወቂያ እና ማጠቃለያ ይዘርዝሩ።", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አብዛኞቹ ተማሪዎች የተመዘገቡበትን ፕሮግራም ያግኙ። ሁለቱንም መታወቂያ እና ማጠቃለያ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች የተመዘገቡበት የፕሮግራሙ መታወቂያ እና የዲግሪ ማጠቃለያ ምንድነው?", "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች የተመዘገቡበት የፕሮግራሙ መታወቂያ እና የዲግሪ ማጠቃለያ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በማንኛውም ፕሮግራም ብዙ ጊዜ የተመዘገበ ተማሪ የትኛው ነው? መታወቂያውን፣ የመጀመሪያ ስም፣ የአባት ስም፣ የአያት ስም፣ የምዝገባ ብዛት እና የተማሪ መታወቂያ ይዘርዝሩ።", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "select students.student_id  , students.first_name  , students.middle_name  , students.last_name  , students.date_first_registered  , students.other_student_details from students where students.date_first_registered = ( select max ( date_first_registered ) from students )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በማንኛውም ፕሮግራም ብዙ ጊዜ የተመዘገበ ተማሪ የትኛው ነው? መታወቂያውን፣ የመጀመሪያ ስም፣ የአባት ስም፣ የአያት ስም፣ የምዝገባ ብዛት እና የተማሪ መታወቂያ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በማንኛውም ፕሮግራም በብዛት ለተመዘገበ ተማሪ የመጀመሪያ፣ መካከለኛ እና የአያት ስም፣ ከመታወቂያው እና ከተመዝጋቢው ቁጥር ጋር ምን ይባላል?", "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በማንኛውም ፕሮግራም በብዛት ለተመዘገበ ተማሪ የመጀመሪያ፣ መካከለኛ እና የአያት ስም፣ ከመታወቂያው እና ከተመዝጋቢው ቁጥር ጋር ምን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትኛውም ሴሚስተር ያልተመዘገበ ተማሪ የለም? የሴሚስተር ስም ይዘርዝሩ።", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select students.first_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትኛውም ሴሚስተር ያልተመዘገበ ተማሪ የለም? የሴሚስተር ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ተማሪዎች ሳይመዘገቡበት የሴሚስተር ስም ማን ይባላል?", "query": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )", "predicted_sql": "select students.first_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ተማሪዎች ሳይመዘገቡበት የሴሚስተር ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ከመቼውም ጊዜ ተማሪዎች ተመዝግበዋል ይህም ኮርሶች ሁሉ ኮርሶች ስሞች ምንድን ናቸው?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ከመቼውም ጊዜ ተማሪዎች ተመዝግበዋል ይህም ኮርሶች ሁሉ ኮርሶች ስሞች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አንዳንድ ተማሪዎች የተመዘገቡባቸው የሁሉም ኮርሶች ስሞች ምንድ ናቸው?", "query": "select distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አንዳንድ ተማሪዎች የተመዘገቡባቸው የሁሉም ኮርሶች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አብዛኛው የምዝገባ ብዛት ያለው የኮርሱ ስም ማን ይባላል?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አብዛኛው የምዝገባ ብዛት ያለው የኮርሱ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች የተመዘገቡበት የኮርሱ ስም ማን ይባላል?", "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name from courses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች የተመዘገቡበት የኮርሱ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአሁኑ ጊዜ በሰሜን ካሮላይና ግዛት የሚኖሩ ነገር ግን በማንኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ ተማሪዎችን የመጨረሻ ስም ያግኙ።", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአሁኑ ጊዜ በሰሜን ካሮላይና ግዛት የሚኖሩ ነገር ግን በማንኛውም የዲግሪ ፕሮግራም ያልተመዘገቡ ተማሪዎችን የመጨረሻ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በሰሜን ካሮላይና የሚኖሩ ነገር ግን በማንኛውም የዲግሪ መርሃ ግብር ያልተመዘገቡ ተማሪዎች የመጨረሻ ስም ማን ይባላል?", "query": "select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'NorthCarolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id", "predicted_sql": "select students.first_name from students where students.date_first_registered = 'መጨረሻ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በሰሜን ካሮላይና የሚኖሩ ነገር ግን በማንኛውም የዲግሪ መርሃ ግብር ያልተመዘገቡ ተማሪዎች የመጨረሻ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የግልባጩን ቀን እና መታወቂያ ቢያንስ 2 ኮርሶችን አሳይ።", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የግልባጩን ቀን እና መታወቂያ ቢያንስ 2 ኮርሶችን አሳይ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢያንስ 2 ኮርሶች የተዘረዘሩበት ቀን እና መታወቂያው ስንት ነው?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2", "predicted_sql": "select sections.course_id  , sections.section_name  , sections.section_description  , sections.other_details from sections where sections.course_id in ( select course_id from courses where course_name = 'Course 1' or course_name = 'Course 2' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢያንስ 2 ኮርሶች የተዘረዘሩበት ቀን እና መታወቂያው ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያ ስም ቲሞቲ እና የአያት ስም ዋርድ ያለው ሰው ስልክ ቁጥር ስንት ነው?", "query": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name  , students.cell_mobile_number from students where students.date_left is null", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያ ስም ቲሞቲ እና የአያት ስም ዋርድ ያለው ሰው ስልክ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቲሞቲ ዋርድ የተባለ ተማሪ የሞባይል ስልክ ቁጥር ስንት ነው?", "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'", "predicted_sql": "select count ( * ) from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቲሞቲ ዋርድ የተባለ ተማሪ የሞባይል ስልክ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለመሆኑ የመጀመሪያው ተማሪ ማን ነው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም ይዘርዝሩ.", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለመሆኑ የመጀመሪያው ተማሪ ማን ነው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ለመመዝገብ የመጀመሪያው ተማሪ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስም ማን ይባላል?", "query": "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ለመመዝገብ የመጀመሪያው ተማሪ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የትምህርት ቤቱ የመጀመሪያ ተመራቂ ማነው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም ይዘርዝሩ.", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select students.first_name  , students.middle_name  , students.last_name from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የትምህርት ቤቱ የመጀመሪያ ተመራቂ ማነው? የመጀመሪያ ስም, የአባት ስም እና የአያት ስም ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያ ደረጃ ትምህርት ቤት ተመራቂ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስም ማን ይባላል?", "query": "select first_name , middle_name , last_name from students order by date_left asc limit 1", "predicted_sql": "select departments.department_name from degree_programs join departments on degree_programs.department_id = departments.department_id where degree_programs.degree_program_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያ ደረጃ ትምህርት ቤት ተመራቂ የመጀመሪያ፣ መካከለኛ እና የመጨረሻ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቋሚ አድራሻው ከአሁኑ አድራሻው የሚለየው የማን ነው? የመጀመሪያ ስሙን ይዘርዝሩ።", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "select students.first_name from students where students.date_first_registered = ( select min ( students.date_first_registered ) from students )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቋሚ አድራሻው ከአሁኑ አድራሻው የሚለየው የማን ነው? የመጀመሪያ ስሙን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቋሚ አድራሻው አሁን ካለው የተለየ የሆነው ተማሪ የመጀመሪያ ስም ማን ይባላል?", "query": "select first_name from students where current_address_id != permanent_address_id", "predicted_sql": "select departments.department_name from departments where departments.department_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቋሚ አድራሻው አሁን ካለው የተለየ የሆነው ተማሪ የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአሁኑ ጊዜ ብዙ ተማሪዎችን የያዘው አድራሻ የትኛው ነው? የአድራሻ መታወቂያውን እና ሁሉንም መስመሮች ይዘርዝሩ።", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአሁኑ ጊዜ ብዙ ተማሪዎችን የያዘው አድራሻ የትኛው ነው? የአድራሻ መታወቂያውን እና ሁሉንም መስመሮች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ብዙ ተማሪዎች ያሉት የአድራሻው መታወቂያ፣ መስመር 1 እና መስመር 2 ምንድን ነው?", "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1", "predicted_sql": "select addresses.line_1  , addresses.line_2 from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ብዙ ተማሪዎች ያሉት የአድራሻው መታወቂያ፣ መስመር 1 እና መስመር 2 ምንድን ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በአማካይ፣ ግልባጮቹ መቼ ታትመዋል?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በአማካይ፣ ግልባጮቹ መቼ ታትመዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አማካይ የጽሑፍ ግልባጭ ቀን ስንት ነው?", "query": "select avg ( transcript_date ) from transcripts", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አማካይ የጽሑፍ ግልባጭ ቀን ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጀመሪያው ግልባጭ መቼ ነው የሚለቀቀው? ቀኑን እና ዝርዝሮችን ይዘርዝሩ።", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select semesters.semester_name  , sections.section_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join sections on student_enrolment.student_enrolment_id = sections.section_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጀመሪያው ግልባጭ መቼ ነው የሚለቀቀው? ቀኑን እና ዝርዝሮችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የጽሑፍ ግልባጭ የተለቀቀበት የመጀመሪያ ቀን ስንት ነው ፣ እና ምን ዝርዝሮችን ሊነግሩኝ ይችላሉ?", "query": "select transcript_date , other_details from transcripts order by transcript_date asc limit 1", "predicted_sql": "select transcripts.transcript_date  , count ( * ) as num_transcripts from transcripts group by transcripts.transcript_date", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የጽሑፍ ግልባጭ የተለቀቀበት የመጀመሪያ ቀን ስንት ነው ፣ እና ምን ዝርዝሮችን ሊነግሩኝ ይችላሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት ግልባጮች ተለቀቁ?", "query": "select count ( * ) from transcripts", "predicted_sql": "select count ( * ) from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት ግልባጮች ተለቀቁ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ስንት ግልባጮች ተዘርዝረዋል?", "query": "select count ( * ) from transcripts", "predicted_sql": "select count ( * ) from departments", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ስንት ግልባጮች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጨረሻው ግልባጭ የተለቀቀበት ቀን ምንድነው?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select transcripts.transcript_date from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጨረሻው ግልባጭ የተለቀቀበት ቀን ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "የመጨረሻው ግልባጭ መቼ ተለቀቀ?", "query": "select transcript_date from transcripts order by transcript_date desc limit 1", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### የመጨረሻው ግልባጭ መቼ ተለቀቀ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ቢበዛ ምን ያህል ጊዜ የኮርስ ምዝገባ ውጤት በተለያዩ ግልባጮች ውስጥ ሊታይ ይችላል? እንዲሁም የኮርስ ምዝገባ መታወቂያውን አሳይ።", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "select courses.course_name  , courses.course_description  , departments.department_name  , students.first_name  , students.last_name  , transcripts.transcript_date from courses join sections on sections.course_id = courses.course_id join student_enrolment_courses on student_enrolment_courses.course_id = courses.course_id join student_enrolment on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id join students on students.student_id = student_enrolment.student_id join transcripts on transcripts.transcript_id = transcript_contents.transcript_id join transcript_contents on transcript_contents.student_course_id = student_enrolment_courses.student_course_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id join departments on departments.department_id = degree_programs.department_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ቢበዛ ምን ያህል ጊዜ የኮርስ ምዝገባ ውጤት በተለያዩ ግልባጮች ውስጥ ሊታይ ይችላል? እንዲሁም የኮርስ ምዝገባ መታወቂያውን አሳይ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አንድ ኮርስ በተለያዩ ግልባጮች ላይ የሚታየው ከፍተኛው የጊዜ ብዛት ስንት ነው እና የኮርሱ ምዝገባ መታወቂያ ምንድነው?", "query": "select count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አንድ ኮርስ በተለያዩ ግልባጮች ላይ የሚታየው ከፍተኛው የጊዜ ብዛት ስንት ነው እና የኮርሱ ምዝገባ መታወቂያ ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "አነስተኛውን የውጤቶች ብዛት የሚያሳይ የጽሁፍ ግልባጭ ቀን አሳይ፣ መታወቂያውንም ይዘርዝሩ።", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select transcripts.transcript_date  , transcripts.other_details from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### አነስተኛውን የውጤቶች ብዛት የሚያሳይ የጽሁፍ ግልባጭ ቀን አሳይ፣ መታወቂያውንም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በትንሹ የውጤት ብዛት ያለው የጽሁፍ ቀን እና መታወቂያ ስንት ነው?", "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1", "predicted_sql": "select count ( * ) from transcripts", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በትንሹ የውጤት ብዛት ያለው የጽሁፍ ቀን እና መታወቂያ ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሁለቱም ማስተር ተማሪዎች እና የመጀመሪያ ደረጃ ተማሪዎች ሲመዘገቡ ሴሚስተር ያግኙ።", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሁለቱም ማስተር ተማሪዎች እና የመጀመሪያ ደረጃ ተማሪዎች ሲመዘገቡ ሴሚስተር ያግኙ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሁለቱም የማስተርስ እና የመጀመሪያ ዲግሪ ተማሪዎች የተመዘገቡበት የሴሚስተር መታወቂያው ስንት ነው?", "query": "select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Master' intersect select distinct student_enrolment.semester_id from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_summary_name = 'Bachelor'", "predicted_sql": "select count ( * ) from students", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሁለቱም የማስተርስ እና የመጀመሪያ ዲግሪ ተማሪዎች የተመዘገቡበት የሴሚስተር መታወቂያው ስንት ነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ተማሪዎቹ በአሁኑ ጊዜ ምን ያህል የተለያዩ አድራሻዎች ይኖራሉ?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ተማሪዎቹ በአሁኑ ጊዜ ምን ያህል የተለያዩ አድራሻዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "እዚያ የሚኖሩ ተማሪዎች ያሏቸው የተለያዩ አድራሻዎች ምንድን ናቸው?", "query": "select count ( distinct current_address_id ) from students", "predicted_sql": "select addresses.address_id  , addresses.line_1  , addresses.line_2  , addresses.line_3  , addresses.city  , addresses.zip_postcode  , addresses.state_province_county  , addresses.country  , addresses.other_address_details from addresses", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### እዚያ የሚኖሩ ተማሪዎች ያሏቸው የተለያዩ አድራሻዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ሁሉንም የተማሪ ዝርዝሮች በተገላቢጦሽ መዝገበ ቃላት ይዘርዝሩ።", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ሁሉንም የተማሪ ዝርዝሮች በተገላቢጦሽ መዝገበ ቃላት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በተገላቢጦሽ የፊደል ቅደም ተከተል ስለ ተማሪዎች ምን ሌላ ዝርዝሮች ሊነግሩኝ ይችላሉ?", "query": "select other_student_details from students order by other_student_details desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በተገላቢጦሽ የፊደል ቅደም ተከተል ስለ ተማሪዎች ምን ሌላ ዝርዝሮች ሊነግሩኝ ይችላሉ? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "ክፍሉን ይግለጹ ሸ.", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### ክፍሉን ይግለጹ ሸ. \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "h ለተሰየመው ክፍል መግለጫው ምንድነው?", "query": "select section_description from sections where section_name = 'h'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### h ለተሰየመው ክፍል መግለጫው ምንድነው? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በሄይቲ በቋሚነት የሚኖሩትን ተማሪዎች የመጀመሪያ ስም ወይም የሞባይል ስልክ ቁጥር 09700166582 ያግኙ።", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በሄይቲ በቋሚነት የሚኖሩትን ተማሪዎች የመጀመሪያ ስም ወይም የሞባይል ስልክ ቁጥር 09700166582 ያግኙ። \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "student_transcripts_tracking", "question": "በሄይቲ በቋሚነት የሚኖሩ ወይም የሞባይል ስልክ ቁጥር 09700166582 ያላቸው ተማሪዎች የመጀመሪያ ስም ማን ይባላል?", "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'haiti' or students.cell_mobile_number = '09700166582'", "predicted_sql": "select students.first_name from students where students.cell_mobile_number = '09700166582'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.state_province_county , addresses.country , addresses.other_address_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | departments : departments.department_id , departments.department_name , departments.department_description , departments.other_details | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.last_name , students.cell_mobile_number , students.email_address , students.ssn , students.date_first_registered , students.date_left , students.other_student_details | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id# \n ### በሄይቲ በቋሚነት የሚኖሩ ወይም የሞባይል ስልክ ቁጥር 09700166582 ያላቸው ተማሪዎች የመጀመሪያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["addresses.*", "addresses.address_id", "addresses.line_1", "addresses.line_2", "addresses.line_3", "addresses.city", "addresses.zip_postcode", "addresses.state_province_county", "addresses.country", "addresses.other_address_details", "courses.*", "courses.course_id", "courses.course_name", "courses.course_description", "courses.other_details", "departments.*", "departments.department_id", "departments.department_name", "departments.department_description", "departments.other_details", "degree_programs.*", "degree_programs.degree_program_id", "degree_programs.department_id", "degree_programs.degree_summary_name", "degree_programs.degree_summary_description", "degree_programs.other_details", "sections.*", "sections.section_id", "sections.course_id", "sections.section_name", "sections.section_description", "sections.other_details", "semesters.*", "semesters.semester_id", "semesters.semester_name", "semesters.semester_description", "semesters.other_details", "students.*", "students.student_id", "students.current_address_id", "students.permanent_address_id", "students.first_name", "students.middle_name", "students.last_name", "students.cell_mobile_number", "students.email_address", "students.ssn", "students.date_first_registered", "students.date_left", "students.other_student_details", "student_enrolment.*", "student_enrolment.student_enrolment_id", "student_enrolment.degree_program_id", "student_enrolment.semester_id", "student_enrolment.student_id", "student_enrolment.other_details", "student_enrolment_courses.*", "student_enrolment_courses.student_course_id", "student_enrolment_courses.course_id", "student_enrolment_courses.student_enrolment_id", "transcripts.*", "transcripts.transcript_id", "transcripts.transcript_date", "transcripts.other_details", "transcript_contents.*", "transcript_contents.student_course_id", "transcript_contents.transcript_id"]}
{"db_id": "tvshow", "question": "የሁሉም ካርቱኖች ርዕስ በፊደል ቅደም ተከተል ይዘርዝሩ።", "query": "select title from cartoon order by title asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የሁሉም ካርቱኖች ርዕስ በፊደል ቅደም ተከተል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በፊደል የተደረደሩ የካርቱን ሥዕሎች ርዕስ ምንድናቸው?", "query": "select title from cartoon order by title asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በፊደል የተደረደሩ የካርቱን ሥዕሎች ርዕስ ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በ&quot;ቤን ጆንስ&quot; የተመራውን ሁሉንም ካርቱን ይዘርዝሩ።", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'ቤን ጆንስ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በ&quot;ቤን ጆንስ&quot; የተመራውን ሁሉንም ካርቱን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ የሚመሩ የሁሉም ካርቱኖች ስም ማን ይባላል?", "query": "select title from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ የሚመሩ የሁሉም ካርቱኖች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በ&quot;ጆሴፍ ኩህር&quot; ስንት ካርቱን ተፃፈ?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select cartoon.title from cartoon where cartoon.channel = ( select id from tv_channel where series_name = 'ጆሴፍ ኩህር' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በ&quot;ጆሴፍ ኩህር&quot; ስንት ካርቱን ተፃፈ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በጆሴፍ ኩህር የተፃፈው የካርቱን ብዛት ስንት ነው?", "query": "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'", "predicted_sql": "select count ( cartoon.id ) from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በጆሴፍ ኩህር የተፃፈው የካርቱን ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በአየር ቀኑ የታዘዙትን ሁሉንም የካርቱን ርዕሶች እና ዳይሬክተሮችን ይዘርዝሩ", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በአየር ቀኑ የታዘዙትን ሁሉንም የካርቱን ርዕሶች እና ዳይሬክተሮችን ይዘርዝሩ \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በአየር ቀን የታዘዙ የካርቱኖች ሁሉ ስም እና ዳይሬክተሮች ማን ናቸው?", "query": "select title , directed_by from cartoon order by original_air_date asc", "predicted_sql": "select cartoon.title  , cartoon.directed_by from cartoon where cartoon.original_air_date = 'አዲስ አበባ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በአየር ቀን የታዘዙ የካርቱኖች ሁሉ ስም እና ዳይሬክተሮች ማን ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በ&quot;ቤን ጆንስ&quot; ወይም &quot;ብራንደን ቪቲ&quot; የሚመሩ የካርቱን ሁሉ ርዕስ ይዘርዝሩ።", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "select cartoon.title from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በ&quot;ቤን ጆንስ&quot; ወይም &quot;ብራንደን ቪቲ&quot; የሚመሩ የካርቱን ሁሉ ርዕስ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ ወይም ብራንደን ቪቲ የተመሩ የካርቱን ሥዕሎች በሙሉ ምንድናቸው?", "query": "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ ወይም ብራንደን ቪቲ የተመሩ የካርቱን ሥዕሎች በሙሉ ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከቴሌቭዥን ቻናሎች በብዛት ያለው የትኛው ሀገር ነው? ያላትን የቴሌቭዥን ቻናሎች ሀገር እና ብዛት ይዘርዝሩ።", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "select tv_channel.country from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከቴሌቭዥን ቻናሎች በብዛት ያለው የትኛው ሀገር ነው? ያላትን የቴሌቭዥን ቻናሎች ሀገር እና ብዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ብዙ የቴሌቭዥን ቻናሎች ያላት ሀገር ስንት ናት እና ስንት አላት?", "query": "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ብዙ የቴሌቭዥን ቻናሎች ያላት ሀገር ስንት ናት እና ስንት አላት? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቲቪ ቻናል ሰንጠረዥ ውስጥ የተለያዩ ተከታታይ ስሞችን እና ይዘቶችን ይዘርዝሩ።", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቲቪ ቻናል ሰንጠረዥ ውስጥ የተለያዩ ተከታታይ ስሞችን እና ይዘቶችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቲቪ ቻናል ሠንጠረዥ ውስጥ ምን ያህል የተለያዩ ተከታታይ እና ይዘቶች ተዘርዝረዋል?", "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቲቪ ቻናል ሠንጠረዥ ውስጥ ምን ያህል የተለያዩ ተከታታይ እና ይዘቶች ተዘርዝረዋል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ ስም ያለው የቴሌቭዥን ቻናል ይዘት ምንድ ነው?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ ስም ያለው የቴሌቭዥን ቻናል ይዘት ምንድ ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የሰማይ ሬዲዮ ተከታታይ ይዘት ምንድነው?", "query": "select content from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የሰማይ ሬዲዮ ተከታታይ ይዘት ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ ስም ያለው &quot;ስካይ ራዲዮ&quot; ያለው የቲቪ ቻናል የጥቅል አማራጭ ምንድነው?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'ስካይ ራዲዮ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ ስም ያለው &quot;ስካይ ራዲዮ&quot; ያለው የቲቪ ቻናል የጥቅል አማራጭ ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ ስማቸው ስካይ ሬድዮ የሆኑ የቴሌቭዥን ቻናሎች ጥቅል አማራጮች ምንድናቸው?", "query": "select package_option from tv_channel where series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ ስማቸው ስካይ ሬድዮ የሆኑ የቴሌቭዥን ቻናሎች ጥቅል አማራጮች ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ቋንቋ እንግሊዝኛ የሚጠቀም ስንት የቲቪ ቻናል?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "select tv_channel.language from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ቋንቋ እንግሊዝኛ የሚጠቀም ስንት የቲቪ ቻናል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ስንት የቲቪ ቻናሎች የእንግሊዝኛ ቋንቋ ይጠቀማሉ?", "query": "select count ( * ) from tv_channel where language = 'English'", "predicted_sql": "select tv_channel.language from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ስንት የቲቪ ቻናሎች የእንግሊዝኛ ቋንቋ ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ጥቅም ላይ የዋለውን ቋንቋ በትንሹ የቲቪ ቻናል ይዘርዝሩ። የቲቪ ቻናል ቋንቋ እና ቁጥር ይዘርዝሩ።", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "select tv_channel.language  , tv_channel.content from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ጥቅም ላይ የዋለውን ቋንቋ በትንሹ የቲቪ ቻናል ይዘርዝሩ። የቲቪ ቻናል ቋንቋ እና ቁጥር ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በትንሹ የቲቪ ቻናሎች የሚጠቀሙባቸው ቋንቋዎች ምን ምን ናቸው እና ምን ያህል ቻናሎች ይጠቀማሉ?", "query": "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በትንሹ የቲቪ ቻናሎች የሚጠቀሙባቸው ቋንቋዎች ምን ምን ናቸው እና ምን ያህል ቻናሎች ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እያንዳንዱን ቋንቋ እና የሚጠቀሙባቸውን የቲቪ ጣቢያዎች ብዛት ይዘርዝሩ።", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እያንዳንዱን ቋንቋ እና የሚጠቀሙባቸውን የቲቪ ጣቢያዎች ብዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለእያንዳንዱ ቋንቋ፣ የሚጠቀሙባቸውን የቲቪ ጣቢያዎች ብዛት ይዘርዝሩ።", "query": "select language , count ( * ) from tv_channel group by language", "predicted_sql": "select count ( * ) from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለእያንዳንዱ ቋንቋ፣ የሚጠቀሙባቸውን የቲቪ ጣቢያዎች ብዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;የሰማያዊው ጥንዚዛ መነሳት!&quot; ካርቱን የሚያሳየው የቲቪ ቻናል ምንድን ነው? የቲቪ ቻናሉን ተከታታይ ስም ይዘርዝሩ።", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = 'የሰማያዊው ጥንዚዛ መነሳት!'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;የሰማያዊው ጥንዚዛ መነሳት!&quot; ካርቱን የሚያሳየው የቲቪ ቻናል ምንድን ነው? የቲቪ ቻናሉን ተከታታይ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የካርቱን &quot;የሰማያዊ ጥንዚዛ መነሳት&quot; የሚያሳይ የቲቪ ቻናል ተከታታይ ስም ማን ይባላል?", "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!'", "predicted_sql": "select cartoon.title from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የካርቱን &quot;የሰማያዊ ጥንዚዛ መነሳት&quot; የሚያሳይ የቲቪ ቻናል ተከታታይ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቲቪ ቻናል ላይ የታዩትን የካርቱን ምስሎች በሙሉ 'ስካይ ራዲዮ' የሚል ተከታታይ ስም ይዘርዝሩ።", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቲቪ ቻናል ላይ የታዩትን የካርቱን ምስሎች በሙሉ 'ስካይ ራዲዮ' የሚል ተከታታይ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቴሌቭዥን ቻናል ላይ ያሉት ተከታታይ ስም &quot;ሰማይ ራዲዮ&quot; ያላቸው የካርቱሎች ሁሉ ርዕስ ምንድን ነው?", "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'ሰማይ ራዲዮ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቴሌቭዥን ቻናል ላይ ያሉት ተከታታይ ስም &quot;ሰማይ ራዲዮ&quot; ያላቸው የካርቱሎች ሁሉ ርዕስ ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የሁሉም ተከታታይ የቴሌቭዥን ተከታታዮች ደረጃ በደረጃ የተደረደሩትን ይዘርዝሩ።", "query": "select episode from tv_series order by rating asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የሁሉም ተከታታይ የቴሌቭዥን ተከታታዮች ደረጃ በደረጃ የተደረደሩትን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በደረጃ አሰጣጦች የታዘዙት ሁሉም ክፍሎች ምንድናቸው?", "query": "select episode from tv_series order by rating asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በደረጃ አሰጣጦች የታዘዙት ሁሉም ክፍሎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከፍተኛ 3 ከፍተኛ ደረጃ የተሰጣቸው ተከታታይ የቲቪ ተከታታዮችን ይዘርዝሩ። ተከታታይ የቲቪ ትዕይንት እና ደረጃን ይዘርዝሩ።", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_series.id  , tv_series.episode  , tv_series.air_date from tv_series order by tv_series.air_date desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከፍተኛ 3 ከፍተኛ ደረጃ የተሰጣቸው ተከታታይ የቲቪ ተከታታዮችን ይዘርዝሩ። ተከታታይ የቲቪ ትዕይንት እና ደረጃን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቲቪ ተከታታይ ሠንጠረዥ ውስጥ 3 በጣም ከፍተኛ ደረጃ የተሰጣቸው ክፍሎች ምንድናቸው እና እነዚያ ደረጃዎች ምን ነበሩ?", "query": "select episode , rating from tv_series order by rating desc limit 3", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቲቪ ተከታታይ ሠንጠረዥ ውስጥ 3 በጣም ከፍተኛ ደረጃ የተሰጣቸው ክፍሎች ምንድናቸው እና እነዚያ ደረጃዎች ምን ነበሩ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የቲቪ ተከታታዮች ዝቅተኛ እና ከፍተኛ ድርሻ ምን ያህል ነው?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የቲቪ ተከታታዮች ዝቅተኛ እና ከፍተኛ ድርሻ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለቲቪ ተከታታዮች ከፍተኛው እና ዝቅተኛው ድርሻ ስንት ነው?", "query": "select max ( share ) , min ( share ) from tv_series", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለቲቪ ተከታታዮች ከፍተኛው እና ዝቅተኛው ድርሻ ስንት ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ የቴሌቭዥን ስርጭት የተለቀቀበት ቀን ከክፍል &quot;የህይወት ፍቅር&quot; ጋር ስንት ነው?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ የቴሌቭዥን ስርጭት የተለቀቀበት ቀን ከክፍል &quot;የህይወት ፍቅር&quot; ጋር ስንት ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;የህይወት ዘመን ፍቅር&quot; ትዕይንት መቼ ተለቀቀ?", "query": "select air_date from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;የህይወት ዘመን ፍቅር&quot; ትዕይንት መቼ ተለቀቀ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ የቴሌቭዥን ተከታታዮች ሳምንታዊ ደረጃ &quot;የህይወት ዘመን ፍቅር&quot; ያለው ምንድን ነው?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ የቴሌቭዥን ተከታታዮች ሳምንታዊ ደረጃ &quot;የህይወት ዘመን ፍቅር&quot; ያለው ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ለ&quot;የህይወት ዘመን ፍቅር&quot; ትዕይንት ሳምንታዊ ደረጃው ስንት ነው?", "query": "select weekly_rank from tv_series where episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_channel.content from tv_channel where tv_channel.series_name = 'የህይወት ዘመን ፍቅር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ለ&quot;የህይወት ዘመን ፍቅር&quot; ትዕይንት ሳምንታዊ ደረጃው ስንት ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ተከታታይ የቲቪ ቻናል ከትዕይንት &quot;የህይወት ፍቅር&quot; ጋር ምንድነው? የቲቪ ቻናሉን ተከታታይ ስም ይዘርዝሩ።", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.content = 'የህይወት ፍቅር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ተከታታይ የቲቪ ቻናል ከትዕይንት &quot;የህይወት ፍቅር&quot; ጋር ምንድነው? የቲቪ ቻናሉን ተከታታይ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;የህይወት ፍቅር&quot; ክፍል ያለው ተከታታይ ስም ማን ይባላል?", "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;የህይወት ፍቅር&quot; ክፍል ያለው ተከታታይ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቲቪ ቻናል ላይ የሚታዩትን የሁሉም ተከታታይ የቴሌቭዥን ፕሮግራሞች ክፍል በ&quot;ሰማይ ራዲዮ&quot; ይዘርዝሩ።", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቲቪ ቻናል ላይ የሚታዩትን የሁሉም ተከታታይ የቴሌቭዥን ፕሮግራሞች ክፍል በ&quot;ሰማይ ራዲዮ&quot; ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "&quot;ስካይ ሬድዮ&quot; የተሰየመው ተከታታይ የቴሌቭዥን ክፍል ምንድነው?", "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'", "predicted_sql": "select tv_channel.series_name from tv_channel where tv_channel.id = 'ስካይ ሬድዮ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### &quot;ስካይ ሬድዮ&quot; የተሰየመው ተከታታይ የቴሌቭዥን ክፍል ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በእያንዳንዱ የተዘረዘሩት ዳይሬክተሮች የሚመሩ የካርቱን ብዛት ያግኙ።", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "select cartoon.title  , count ( * ) as total_count from cartoon group by cartoon.title order by total_count desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በእያንዳንዱ የተዘረዘሩት ዳይሬክተሮች የሚመሩ የካርቱን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እያንዳንዱ ዳይሬክተር ስንት ካርቱን ፈጠረ?", "query": "select count ( * ) , directed_by from cartoon group by directed_by", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እያንዳንዱ ዳይሬክተር ስንት ካርቱን ፈጠረ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቅርብ ጊዜ የተላለፈውን የካርቱን ምርት ኮድ እና ሰርጥ ያግኙ።", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select cartoon.title  , cartoon.directed_by  , cartoon.written_by  , cartoon.original_air_date  , cartoon.production_code  , cartoon.channel from cartoon where cartoon.original_air_date > '2021-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቅርብ ጊዜ የተላለፈውን የካርቱን ምርት ኮድ እና ሰርጥ ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "የቅርቡ የካርቱን ምርት ኮድ እና ሰርጥ ምንድነው?", "query": "select production_code , channel from cartoon order by original_air_date desc limit 1", "predicted_sql": "select cartoon.title  , cartoon.directed_by  , cartoon.written_by  , cartoon.original_air_date  , cartoon.production_code  , cartoon.channel from cartoon", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### የቅርቡ የካርቱን ምርት ኮድ እና ሰርጥ ምንድነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከፍተኛ ጥራት ያለው ቲቪ ያለው የቴሌቭዥን ጣቢያ የጥቅል ምርጫ እና ተከታታይ ስም ያግኙ።", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel where tv_channel.hight_definition_tv = 1 and tv_channel.pay_per_view_ppv = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከፍተኛ ጥራት ያለው ቲቪ ያለው የቴሌቭዥን ጣቢያ የጥቅል ምርጫ እና ተከታታይ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከፍተኛ ጥራት ያለው ቲቪን የሚደግፈው ለቲቪ ቻናል የጥቅል አማራጮች እና የተከታታዩ ስም ምንድናቸው?", "query": "select package_option , series_name from tv_channel where hight_definition_tv = 'yes'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከፍተኛ ጥራት ያለው ቲቪን የሚደግፈው ለቲቪ ቻናል የጥቅል አማራጮች እና የተከታታዩ ስም ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቶድ ኬሲ የተፃፈ ካርቱን የየትኞቹ ሀገራት የቲቪ ቻናሎች እየተጫወቱ ነው?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "select cartoon.title  , cartoon.channel from cartoon inner join tv_channel on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቶድ ኬሲ የተፃፈ ካርቱን የየትኞቹ ሀገራት የቲቪ ቻናሎች እየተጫወቱ ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቶድ ኬሲ የተፃፉ በቴሌቭዥን ላይ ካርቱኖች ያሏቸው አገሮች የትኞቹ ናቸው?", "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቶድ ኬሲ የተፃፉ በቴሌቭዥን ላይ ካርቱኖች ያሏቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቶድ ኬሲ የተፃፈውን ካርቱን የማይጫወቱት የየትኞቹ ሀገራት የቴሌቪዥን ጣቢያዎች አይደሉም?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቶድ ኬሲ የተፃፈውን ካርቱን የማይጫወቱት የየትኞቹ ሀገራት የቴሌቪዥን ጣቢያዎች አይደሉም? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቶድ ኬሲ የተፃፉ ካርቱን የማይጫወቱት አገሮች የትኞቹ ናቸው?", "query": "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቶድ ኬሲ የተፃፉ ካርቱን የማይጫወቱት አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ እና ሚካኤል ቻንግ የተመሩ አንዳንድ ካርቶኖችን እየተጫወተ የሚገኘውን የቲቪ ቻናል ተከታታይ ስም እና ሀገር ያግኙ?", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ እና ሚካኤል ቻንግ የተመሩ አንዳንድ ካርቶኖችን እየተጫወተ የሚገኘውን የቲቪ ቻናል ተከታታይ ስም እና ሀገር ያግኙ? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ ዳይሬክት የተደረገ ካርቱን እና በሚካኤል ቻንግ ዳይሬክት የተደረገ ካርቱን የሚጫወቱት የሁሉም የቲቪ ቻናሎች ተከታታይ ስም እና ሀገር ማን ይባላል?", "query": "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ ዳይሬክት የተደረገ ካርቱን እና በሚካኤል ቻንግ ዳይሬክት የተደረገ ካርቱን የሚጫወቱት የሁሉም የቲቪ ቻናሎች ተከታታይ ስም እና ሀገር ማን ይባላል? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እንግሊዘኛ የማይጠቀሙትን የፒክሰል ምጥጥነ ገጽታ እና የቴሌቭዥን ጣቢያዎችን ሀገር ያግኙ።", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እንግሊዘኛ የማይጠቀሙትን የፒክሰል ምጥጥነ ገጽታ እና የቴሌቭዥን ጣቢያዎችን ሀገር ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "እንግሊዝኛ ለማይጠቀሙ ሁሉም የቴሌቪዥን ጣቢያዎች የፒክሰል ምጥጥነ ገጽታ እና የትውልድ አገር ምንድ ናቸው?", "query": "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'", "predicted_sql": "select tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### እንግሊዝኛ ለማይጠቀሙ ሁሉም የቴሌቪዥን ጣቢያዎች የፒክሰል ምጥጥነ ገጽታ እና የትውልድ አገር ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከሁለት በላይ የቴሌቪዥን ቻናሎች ካላቸው አገሮች የመጡትን የቴሌቪዥን ጣቢያዎች መታወቂያ ያግኙ።", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "select tv_channel.id  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from tv_channel join tv_series on tv_series.channel = tv_channel.id join cartoon on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከሁለት በላይ የቴሌቪዥን ቻናሎች ካላቸው አገሮች የመጡትን የቴሌቪዥን ጣቢያዎች መታወቂያ ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "ከ2 በላይ የቲቪ ቻናሎች ያሏቸው የሁሉም የቲቪ ቻናሎች መታወቂያቸው ምንድን ነው?", "query": "select id from tv_channel group by country having count ( * ) > 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### ከ2 በላይ የቲቪ ቻናሎች ያሏቸው የሁሉም የቲቪ ቻናሎች መታወቂያቸው ምንድን ነው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ የሚመራ ማንኛውንም ካርቱን የማይጫወቱትን የቲቪ ቻናሎች መታወቂያ ያግኙ።", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ የሚመራ ማንኛውንም ካርቱን የማይጫወቱትን የቲቪ ቻናሎች መታወቂያ ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ የሚመሩ ካርቱን የሌላቸው የቲቪ ቻናሎች መታወቂያዎች ምንድናቸው?", "query": "select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'", "predicted_sql": "select cartoon.title  , cartoon.directed_by  , cartoon.written_by  , cartoon.original_air_date  , cartoon.production_code  , tv_channel.series_name  , tv_channel.country  , tv_channel.language  , tv_channel.content  , tv_channel.pixel_aspect_ratio_par  , tv_channel.hight_definition_tv  , tv_channel.pay_per_view_ppv  , tv_channel.package_option from cartoon join tv_channel on cartoon.channel = tv_channel.id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ የሚመሩ ካርቱን የሌላቸው የቲቪ ቻናሎች መታወቂያዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ የሚመራ ካርቱን የሌለውን የቴሌቭዥን ጣቢያ የጥቅል አማራጭ ያግኙ።", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ የሚመራ ካርቱን የሌለውን የቴሌቭዥን ጣቢያ የጥቅል አማራጭ ያግኙ። \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "tvshow", "question": "በቤን ጆንስ የሚመሩ ካርቱን የማይጫወቱ የሁሉም የቲቪ ቻናሎች የጥቅል አማራጮች ምንድናቸው?", "query": "select package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' )", "predicted_sql": "select cartoon.title from cartoon where cartoon.channel not in ( select tv_channel.id from tv_channel )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.pixel_aspect_ratio_par , tv_channel.hight_definition_tv , tv_channel.pay_per_view_ppv , tv_channel.package_option | tv_series : tv_series.id , tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.18_49_rating_share , tv_series.viewers_m , tv_series.weekly_rank , tv_series.channel | cartoon : cartoon.id , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.original_air_date , cartoon.production_code , cartoon.channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id# \n ### በቤን ጆንስ የሚመሩ ካርቱን የማይጫወቱ የሁሉም የቲቪ ቻናሎች የጥቅል አማራጮች ምንድናቸው? \n SELECT\n        ", "tc_original": ["tv_channel.*", "tv_channel.id", "tv_channel.series_name", "tv_channel.country", "tv_channel.language", "tv_channel.content", "tv_channel.pixel_aspect_ratio_par", "tv_channel.hight_definition_tv", "tv_channel.pay_per_view_ppv", "tv_channel.package_option", "tv_series.*", "tv_series.id", "tv_series.episode", "tv_series.air_date", "tv_series.rating", "tv_series.share", "tv_series.18_49_rating_share", "tv_series.viewers_m", "tv_series.weekly_rank", "tv_series.channel", "cartoon.*", "cartoon.id", "cartoon.title", "cartoon.directed_by", "cartoon.written_by", "cartoon.original_air_date", "cartoon.production_code", "cartoon.channel"]}
{"db_id": "poker_player", "question": "ስንት ፖከር ተጫዋቾች አሉ?", "query": "select count ( * ) from poker_player", "predicted_sql": "select count ( * ) from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ስንት ፖከር ተጫዋቾች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የፖከር ተጫዋቾችን ቁጥር ይቁጠሩ።", "query": "select count ( * ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player inner join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የፖከር ተጫዋቾችን ቁጥር ይቁጠሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የቁልቁል ተጨዋቾችን ገቢ በቅደም ተከተል ይዘርዝሩ።", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የቁልቁል ተጨዋቾችን ገቢ በቅደም ተከተል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በዋጋ እንዲወርድ የታዘዙ የፖከር ተጫዋቾች ገቢዎች ምን ያህል ናቸው?", "query": "select earnings from poker_player order by earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በዋጋ እንዲወርድ የታዘዙ የፖከር ተጫዋቾች ገቢዎች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የተሰሩ የመጨረሻ ሰንጠረዦችን እና ምርጥ የፖከር ተጫዋቾችን ያጠናቀቁትን ይዘርዝሩ።", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የተሰሩ የመጨረሻ ሰንጠረዦችን እና ምርጥ የፖከር ተጫዋቾችን ያጠናቀቁትን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ለሁሉም የፖከር ተጫዋቾች የመጨረሻዎቹ ሰንጠረዦች የተሰሩት እና የተጠናቀቁት የትኞቹ ናቸው?", "query": "select final_table_made , best_finish from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.final_table_made = 1 and poker_player.best_finish = 1 and poker_player.money_rank = 1 and poker_player.earnings > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ለሁሉም የፖከር ተጫዋቾች የመጨረሻዎቹ ሰንጠረዦች የተሰሩት እና የተጠናቀቁት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የፖከር ተጫዋቾች አማካይ ገቢ ምን ያህል ነው?", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player inner join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የፖከር ተጫዋቾች አማካይ ገቢ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በሁሉም የፖከር ተጫዋቾች አማካይ ገቢ ይመለሱ።", "query": "select avg ( earnings ) from poker_player", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በሁሉም የፖከር ተጫዋቾች አማካይ ገቢ ይመለሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከፍተኛ ገቢ ያለው የፖከር ተጫዋች የገንዘብ ደረጃ ስንት ነው?", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select count ( distinct poker_player.final_table_made ) as num_distinct_final_tables from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከፍተኛ ገቢ ያለው የፖከር ተጫዋች የገንዘብ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከፍተኛ ገቢ ያለው የተጫዋቹን የገንዘብ ደረጃ ይመልሱ።", "query": "select money_rank from poker_player order by earnings desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከፍተኛ ገቢ ያለው የተጫዋቹን የገንዘብ ደረጃ ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ200000 ባነሰ ገቢ በፖከር ተጫዋቾች መካከል የተደረገው ከፍተኛው የመጨረሻ ጠረጴዛዎች ቁጥር ስንት ነው?", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select count ( * ) from poker_player where final_table_made = 'ከፍተኛው'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ200000 ባነሰ ገቢ በፖከር ተጫዋቾች መካከል የተደረገው ከፍተኛው የመጨረሻ ጠረጴዛዎች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ200000 በታች ገቢ ባላቸው በሁሉም የፖከር ተጫዋቾች ላይ የተደረጉትን ከፍተኛውን የመጨረሻ ሰንጠረዦች ይመልሱ።", "query": "select max ( final_table_made ) from poker_player where earnings < 200000", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.final_table_made = 'ከፍተኛው'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ200000 በታች ገቢ ባላቸው በሁሉም የፖከር ተጫዋቾች ላይ የተደረጉትን ከፍተኛውን የመጨረሻ ሰንጠረዦች ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የፖከር ተጫዋቾች ስም ማን ይባላል?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የፖከር ተጫዋቾች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ሁሉንም የፖከር ተጫዋቾች ስም ይመልሱ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ሁሉንም የፖከር ተጫዋቾች ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ገቢያቸው ከ300000 በላይ የሆኑ የፖከር ተጫዋቾች ስም ማን ይባላል?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.money_rank > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ገቢያቸው ከ300000 በላይ የሆኑ የፖከር ተጫዋቾች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ300000 በላይ ገቢ ያላቸውን የፖከር ተጫዋቾች ስም ስጥ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.poker_player_id > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ300000 በላይ ገቢ ያላቸውን የፖከር ተጫዋቾች ስም ስጥ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በመጨረሻው ሰንጠረዦች የታዘዙ የፖከር ተጫዋቾችን ስም ይዘርዝሩ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በመጨረሻው ሰንጠረዦች የታዘዙ የፖከር ተጫዋቾችን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በሰሩት የመጨረሻ ጠረጴዛዎች ቁጥር ወደ ላይ እንዲወጡ የታዘዙ የፖከር ተጫዋቾች ስም ምንድ ነው?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በሰሩት የመጨረሻ ጠረጴዛዎች ቁጥር ወደ ላይ እንዲወጡ የታዘዙ የፖከር ተጫዋቾች ስም ምንድ ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ዝቅተኛ ገቢ ያለው የፖከር ተጫዋች የልደት ቀን ስንት ነው?", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select poker_player.final_table_made from poker_player where poker_player.poker_player_id = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ዝቅተኛ ገቢ ያለው የፖከር ተጫዋች የልደት ቀን ስንት ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ዝቅተኛ ገቢ ያለው የፖከር ተጫዋች የልደት ቀን ይመልሱ።", "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1", "predicted_sql": "select poker_player.final_table_made from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ዝቅተኛ ገቢ ያለው የፖከር ተጫዋች የልደት ቀን ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የረጅሙ ፖከር ተጫዋች የገንዘብ ደረጃ ስንት ነው?", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select count ( distinct poker_player.final_table_made ) as num_distinct_final_tables from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የረጅሙ ፖከር ተጫዋች የገንዘብ ደረጃ ስንት ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከፍተኛ ቁመት ያለው የፖከር ተጫዋች የገንዘብ ደረጃን ይመልሱ።", "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከፍተኛ ቁመት ያለው የፖከር ተጫዋች የገንዘብ ደረጃን ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ 200 በላይ ቁመት ያላቸው የፖከር ተጫዋቾች አማካይ ገቢ ምን ያህል ነው?", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.final_table_made > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ 200 በላይ ቁመት ያላቸው የፖከር ተጫዋቾች አማካይ ገቢ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከ200 በላይ ቁመት ያላቸውን የፖከር ተጫዋቾች አማካይ ገቢ ይስጡ።", "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings from poker_player where poker_player.final_table_made > 200", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከ200 በላይ ቁመት ያላቸውን የፖከር ተጫዋቾች አማካይ ገቢ ይስጡ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በገቢ ቅደም ተከተል ውስጥ የፖከር ተጫዋቾች ስሞች ምንድ ናቸው?", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በገቢ ቅደም ተከተል ውስጥ የፖከር ተጫዋቾች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በገቢያቸው እየቀነሰ የተደረደሩ የፖከር ተጫዋቾችን ስም ይመልሱ።", "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc", "predicted_sql": "select poker_player.poker_player_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.name  , people.nationality  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በገቢያቸው እየቀነሰ የተደረደሩ የፖከር ተጫዋቾችን ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የተለያዩ የሰዎች ብሔረሰቦች እና ከእያንዳንዱ ብሔር የተውጣጡ ሰዎች ቁጥር ምን ያህል ነው?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select people.people_id from poker_player join people on poker_player.people_id = people.people_id where people.nationality = 'ብሔር'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የተለያዩ የሰዎች ብሔረሰቦች እና ከእያንዳንዱ ብሔር የተውጣጡ ሰዎች ቁጥር ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከእያንዳንዱ ብሔር ስንት ሰዎች አሉ?", "query": "select nationality , count ( * ) from people group by nationality", "predicted_sql": "select count ( distinct people_id ) as num_players from poker_player", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከእያንዳንዱ ብሔር ስንት ሰዎች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በጣም የተለመደው የሰዎች ዜግነት ምንድነው?", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select people.nationality from poker_player join people on poker_player.people_id = people.people_id where poker_player.final_table_made = 'Yes'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በጣም የተለመደው የሰዎች ዜግነት ምንድነው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በሁሉም ሰዎች ላይ በጣም የተለመደውን ዜግነት ይስጡ።", "query": "select nationality from people group by nationality order by count ( * ) desc limit 1", "predicted_sql": "select poker_player.poker_player_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በሁሉም ሰዎች ላይ በጣም የተለመደውን ዜግነት ይስጡ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ቢያንስ ሁለት ሰዎች የሚጋሩት ብሔረሰቦች የትኞቹ ናቸው?", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.final_table_made = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ቢያንስ ሁለት ሰዎች የሚጋሩት ብሔረሰቦች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ሁለት ወይም ከዚያ በላይ ሰዎች ያሉባቸውን ብሔረሰቦች ይመልሱ።", "query": "select nationality from people group by nationality having count ( * ) >= 2", "predicted_sql": "select poker_player.poker_player_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ሁለት ወይም ከዚያ በላይ ሰዎች ያሉባቸውን ብሔረሰቦች ይመልሱ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የሰዎችን ስም እና የተወለዱበትን ቀን በፊደል አጻጻፍ ቅደም ተከተል ይዘርዝሩ።", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from people", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የሰዎችን ስም እና የተወለዱበትን ቀን በፊደል አጻጻፍ ቅደም ተከተል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "በፊደል ቅደም ተከተል በስማቸው የታዘዙ የሰዎች ስሞች እና የልደት ቀናት ምንድ ናቸው?", "query": "select name , birth_date from people order by name asc", "predicted_sql": "select people.name  , people.birth_date from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### በፊደል ቅደም ተከተል በስማቸው የታዘዙ የሰዎች ስሞች እና የልደት ቀናት ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ዜግነታቸው &quot;ሩሲያ&quot; ያልሆኑ ሰዎችን ስም አሳይ.", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id where people.nationality = 'ሩሲያ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ዜግነታቸው &quot;ሩሲያ&quot; ያልሆኑ ሰዎችን ስም አሳይ. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ከሩሲያ ያልሆኑ ሰዎች ስም ማን ይባላል?", "query": "select name from people where nationality != 'Russia'", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ከሩሲያ ያልሆኑ ሰዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ፖከር ተጫዋቾች ያልሆኑ ሰዎችን ስም ይዘርዝሩ።", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ፖከር ተጫዋቾች ያልሆኑ ሰዎችን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ፖከር የማይጫወቱ ሰዎች ስም ማን ይባላል?", "query": "select name from people where people_id not in ( select people_id from poker_player )", "predicted_sql": "select people.name from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ፖከር የማይጫወቱ ሰዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "ምን ያህል የተለያዩ ብሔረሰቦች አሉ?", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select people.name from people where people.height > 180", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### ምን ያህል የተለያዩ ብሔረሰቦች አሉ? \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "poker_player", "question": "የተለያዩ ብሔረሰቦችን ቁጥር ይቁጠሩ.", "query": "select count ( distinct nationality ) from people", "predicted_sql": "select poker_player.poker_player_id  , poker_player.people_id  , poker_player.final_table_made  , poker_player.best_finish  , poker_player.money_rank  , poker_player.earnings  , people.people_id  , people.nationality  , people.name  , people.birth_date  , people.height from poker_player join people on poker_player.people_id = people.people_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings | people : people.people_id , people.nationality , people.name , people.birth_date , people.height | poker_player.people_id = people.people_id# \n ### የተለያዩ ብሔረሰቦችን ቁጥር ይቁጠሩ. \n SELECT\n        ", "tc_original": ["poker_player.*", "poker_player.poker_player_id", "poker_player.people_id", "poker_player.final_table_made", "poker_player.best_finish", "poker_player.money_rank", "poker_player.earnings", "people.*", "people.people_id", "people.nationality", "people.name", "people.birth_date", "people.height"]}
{"db_id": "voter_1", "question": "ስንት ግዛቶች አሉ?", "query": "select count ( * ) from area_code_state", "predicted_sql": "select area_code_state.area_code  , area_code_state.state  , contestants.contestant_number  , contestants.contestant_name  , votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from area_code_state  , contestants  , votes where votes.contestant_number = contestants.contestant_number and votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስንት ግዛቶች አሉ? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "በተወዳዳሪው ስም ሲወርድ የታዘዘውን የተወዳዳሪ ቁጥሮችን እና ስሞችን ይዘርዝሩ።", "query": "select contestant_number , contestant_name from contestants order by contestant_name desc", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### በተወዳዳሪው ስም ሲወርድ የታዘዘውን የተወዳዳሪ ቁጥሮችን እና ስሞችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የድምጽ መታወቂያዎችን፣ የስልክ ቁጥሮችን እና የሁሉም ድምጽ ግዛቶችን ይዘርዝሩ።", "query": "select vote_id , phone_number , state from votes", "predicted_sql": "select area_code_state.area_code  , area_code_state.state  , contestants.contestant_number  , contestants.contestant_name  , votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from votes join contestants on votes.contestant_number = contestants.contestant_number join area_code_state on votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የድምጽ መታወቂያዎችን፣ የስልክ ቁጥሮችን እና የሁሉም ድምጽ ግዛቶችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የአካባቢ ኮዶች ከፍተኛ እና ዝቅተኛ ዋጋዎች ምንድ ናቸው?", "query": "select max ( area_code ) , min ( area_code ) from area_code_state", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የአካባቢ ኮዶች ከፍተኛ እና ዝቅተኛ ዋጋዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ከስቴት &#39;CA&#39; ድምጽ የተፈጠረ የመጨረሻ ቀን ምንድነው?", "query": "select max ( created ) from votes where state = 'CA'", "predicted_sql": "select votes.created from votes join area_code_state on votes.state = area_code_state.state where area_code_state.state = 'CA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ከስቴት &#39;CA&#39; ድምጽ የተፈጠረ የመጨረሻ ቀን ምንድነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ስማቸው &#39;Jessie Alloway&#39; ያልሆኑ የተወዳዳሪዎች ስም ማን ይባላል", "query": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'", "predicted_sql": "select contestants.contestant_name from contestants where contestants.contestant_name = 'Jessie Alloway'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስማቸው &#39;Jessie Alloway&#39; ያልሆኑ የተወዳዳሪዎች ስም ማን ይባላል \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "የተለዩ ግዛቶች ምንድን ናቸው እና የሁሉም ድምጽ ጊዜን ይፈጥራሉ?", "query": "select distinct state , created from votes", "predicted_sql": "select area_code_state.area_code  , area_code_state.state  , contestants.contestant_number  , contestants.contestant_name  , votes.vote_id  , votes.phone_number  , votes.state  , votes.contestant_number  , votes.created from area_code_state  , contestants  , votes where votes.contestant_number = contestants.contestant_number and votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### የተለዩ ግዛቶች ምንድን ናቸው እና የሁሉም ድምጽ ጊዜን ይፈጥራሉ? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ቢያንስ ሁለት ድምጽ ያገኙት የተወዳዳሪዎች ቁጥር እና ስማቸው ስንት ነው?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2", "predicted_sql": "select contestant_number  , contestant_name from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ቢያንስ ሁለት ድምጽ ያገኙት የተወዳዳሪዎች ቁጥር እና ስማቸው ስንት ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ድምጽ ካገኙት ተወዳዳሪዎች ሁሉ፣ ቢያንስ ድምጽ ያገኘው ተወዳዳሪ ቁጥር እና ስም ማን ይባላል?", "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ድምጽ ካገኙት ተወዳዳሪዎች ሁሉ፣ ቢያንስ ድምጽ ያገኘው ተወዳዳሪ ቁጥር እና ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ከስቴት &#39;NY&#39; ወይም &#39;CA&#39; የመጡ የድምፅ ብዛት ስንት ናቸው?", "query": "select count ( * ) from votes where state = 'NY' or state = 'CA'", "predicted_sql": "select count ( * ) from votes where state = 'NY' or state = 'CA'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ከስቴት &#39;NY&#39; ወይም &#39;CA&#39; የመጡ የድምፅ ብዛት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ስንት ተወዳዳሪዎች ድምጽ አላገኙም?", "query": "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )", "predicted_sql": "select area_code_state.area_code  , contestants.contestant_name  , votes.created from area_code_state join contestants on votes.contestant_number = contestants.contestant_number join votes on votes.state = area_code_state.state", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስንት ተወዳዳሪዎች ድምጽ አላገኙም? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ብዙ መራጮች የመረጡበት አካባቢ ኮድ ስንት ነው?", "query": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ብዙ መራጮች የመረጡበት አካባቢ ኮድ ስንት ነው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "&#39;Tabatha Gehling&#39; ለተባለው ተወዳዳሪ የነበሩት ድምጾች የፈጠሩት ቀኖች፣ ግዛቶች እና የስልክ ቁጥሮች ስንት ናቸው?", "query": "select votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling'", "predicted_sql": "select contestants.contestant_name  , contestants.contestant_number  , votes.phone_number  , votes.state  , votes.created from contestants join votes on votes.contestant_number = contestants.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Tabatha Gehling'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### &#39;Tabatha Gehling&#39; ለተባለው ተወዳዳሪ የነበሩት ድምጾች የፈጠሩት ቀኖች፣ ግዛቶች እና የስልክ ቁጥሮች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "መራጮች ሁለቱንም ለተወዳዳሪው &#39;Tabatha Gehling&#39; እና ለተወዳዳሪው &#39;ኬሊ ክላውስ&#39; ድምጽ የሰጡበትን የአካባቢ ኮዶች ይዘርዝሩ።", "query": "select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Tabatha Gehling' intersect select area_code_state.area_code from contestants join votes on contestants.contestant_number = votes.contestant_number join area_code_state on votes.state = area_code_state.state where contestants.contestant_name = 'Kelly Clauss'", "predicted_sql": "select contestants.contestant_number  , contestants.contestant_name from contestants where contestants.contestant_name = 'Tabatha Gehling' or contestants.contestant_name = 'ኬሊ ክላውስ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### መራጮች ሁለቱንም ለተወዳዳሪው &#39;Tabatha Gehling&#39; እና ለተወዳዳሪው &#39;ኬሊ ክላውስ&#39; ድምጽ የሰጡበትን የአካባቢ ኮዶች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "voter_1", "question": "ስማቸው &#39;አል&#39; የሚለውን ንዑስ ሕብረቁምፊ የያዘውን የተወዳዳሪዎች ስም ይመልሱ።", "query": "select contestant_name from contestants where contestant_name like '%al%'", "predicted_sql": "select contestants.contestant_name from contestants where contestants.contestant_name like '%አል%'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | area_code_state : area_code_state.area_code , area_code_state.state | contestants : contestants.contestant_number , contestants.contestant_name | votes : votes.vote_id , votes.phone_number , votes.state , votes.contestant_number , votes.created | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state# \n ### ስማቸው &#39;አል&#39; የሚለውን ንዑስ ሕብረቁምፊ የያዘውን የተወዳዳሪዎች ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["area_code_state.*", "area_code_state.area_code", "area_code_state.state", "contestants.*", "contestants.contestant_number", "contestants.contestant_name", "votes.*", "votes.vote_id", "votes.phone_number", "votes.state", "votes.contestant_number", "votes.created"]}
{"db_id": "world_1", "question": "ከ1950 በኋላ ነፃ የወጡ አገሮች በሙሉ ማን ይባላሉ?", "query": "select name from country where indepyear > 1950", "predicted_sql": "select city.name from city where city.population > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1950 በኋላ ነፃ የወጡ አገሮች በሙሉ ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1950 በኋላ የተመሰረቱትን ብሔሮች ስም ጥቀስ።", "query": "select name from country where indepyear > 1950", "predicted_sql": "select city.name from city where city.population > 1950", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1950 በኋላ የተመሰረቱትን ብሔሮች ስም ጥቀስ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ምን ያህል አገሮች ሪፐብሊክ እንደ መንግሥት መልክ አላቸው?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "select city.name from city where city.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ምን ያህል አገሮች ሪፐብሊክ እንደ መንግሥት መልክ አላቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሪፐብሊካኖች የሆኑ መንግስታት ስንት አገሮች አሏቸው?", "query": "select count ( * ) from country where governmentform = 'Republic'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሪፐብሊካኖች የሆኑ መንግስታት ስንት አገሮች አሏቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በካሪቢያን አካባቢ ያሉ አገሮች አጠቃላይ ስፋት ምን ያህል ነው?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በካሪቢያን አካባቢ ያሉ አገሮች አጠቃላይ ስፋት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በካሪቢያን ውስጥ ያሉት አውራጃዎች ምን ያህል የወለል ስፋት አንድ ላይ ይሸፍናሉ?", "query": "select sum ( surfacearea ) from country where region = 'Caribbean'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በካሪቢያን ውስጥ ያሉት አውራጃዎች ምን ያህል የወለል ስፋት አንድ ላይ ይሸፍናሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አንጉዪላ በየትኛው አህጉር ነው ያለው?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select country.name from country where country.headofstate = 'አንጉዪላ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አንጉዪላ በየትኛው አህጉር ነው ያለው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አንጉዪላ የምትባለው አህጉር ስም ማን ነው?", "query": "select continent from country where name = 'Anguilla'", "predicted_sql": "select country.headofstate from country where country.name = 'አንጉዪላ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አንጉዪላ የምትባለው አህጉር ስም ማን ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ካቡል የትኛው ክልል ነው የሚገኘው?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ካቡል የትኛው ክልል ነው የሚገኘው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ካቡል በየትኛው ክልል ነው ያለው?", "query": "select region from country join city on country.code = city.countrycode where city.name = 'Kabul'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ካቡል በየትኛው ክልል ነው ያለው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአሩባ ውስጥ በጣም ታዋቂው የትኛው ቋንቋ ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአሩባ ውስጥ በጣም ታዋቂው የትኛው ቋንቋ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአሩባ በብዛት የሚነገረው የትኛው ቋንቋ ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' order by percentage desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአሩባ በብዛት የሚነገረው የትኛው ቋንቋ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በብራዚል ውስጥ የህዝብ ብዛት እና የህይወት ተስፋዎች ምን ያህል ናቸው?", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select city.population  , countrylanguage.percentage from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በብራዚል ውስጥ የህዝብ ብዛት እና የህይወት ተስፋዎች ምን ያህል ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የብራዚልን የህዝብ ብዛት እና የህይወት ተስፋ ስጠኝ።", "query": "select population , lifeexpectancy from country where name = 'Brazil'", "predicted_sql": "select city.name  , city.population  , country.continent  , country.region from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የብራዚልን የህዝብ ብዛት እና የህይወት ተስፋ ስጠኝ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የአንጎላ ክልል እና የህዝብ ብዛት ስንት ነው?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select count ( distinct countrylanguage.language ) as language_count from countrylanguage join country on countrylanguage.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የአንጎላ ክልል እና የህዝብ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አንጎላ የየትኛው ክልል ነው እና የህዝብ ብዛቷ ስንት ነው?", "query": "select population , region from country where name = 'Angola'", "predicted_sql": "select count ( distinct countrylanguage.language ) as num_languages from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አንጎላ የየትኛው ክልል ነው እና የህዝብ ብዛቷ ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመካከለኛው አፍሪካ ክልል ውስጥ ላሉ አገሮች የሚጠበቀው አማካይ የሕይወት ዕድሜ ምን ያህል ነው?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመካከለኛው አፍሪካ ክልል ውስጥ ላሉ አገሮች የሚጠበቀው አማካይ የሕይወት ዕድሜ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመካከለኛው አፍሪካ ውስጥ የሰዎች አማካይ የህይወት ተስፋ ምን ያህል ነው?", "query": "select avg ( lifeexpectancy ) from country where region = 'Central Africa'", "predicted_sql": "select country.continent from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመካከለኛው አፍሪካ ውስጥ የሰዎች አማካይ የህይወት ተስፋ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ በጣም አጭር የህይወት ተስፋ ያላት ሀገር ስም ማን ይባላል?", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ በጣም አጭር የህይወት ተስፋ ያላት ሀገር ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ በጣም ዝቅተኛ የህይወት ተስፋ ያለውን ሀገር ስም ስጥ።", "query": "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1", "predicted_sql": "select city.name from city where city.population > 1000000 and city.countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ በጣም ዝቅተኛ የህይወት ተስፋ ያለውን ሀገር ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ያለው አጠቃላይ የህዝብ ብዛት እና ከፍተኛው GNP ስንት ነው?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select country.name  , country.gnp from country where country.continent = 'Africa' order by country.gnp desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ያለው አጠቃላይ የህዝብ ብዛት እና ከፍተኛው GNP ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ስንት ሰዎች ይኖራሉ ፣ እና ከነሱ መካከል ትልቁ GNP ምንድነው?", "query": "select sum ( population ) , max ( gnp ) from country where continent = 'Asia'", "predicted_sql": "select country.name  , count ( city.id ) as number_of_cities  , sum ( country.gnp ) as total_gnp from country join city on city.countrycode = country.code group by country.name having count ( city.id ) > 2 order by total_gnp desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ስንት ሰዎች ይኖራሉ ፣ እና ከነሱ መካከል ትልቁ GNP ምንድነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሪፐብሊካኖች በሆኑት የአፍሪካ አገሮች አማካይ የህይወት ዘመን ምን ያህል ነው?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሪፐብሊካኖች በሆኑት የአፍሪካ አገሮች አማካይ የህይወት ዘመን ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ሪፐብሊካኖች ለሆኑ አገሮች አማካይ የህይወት ተስፋ ይስጡ?", "query": "select avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'", "predicted_sql": "select country.name  , country.lifeexpectancy from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ሪፐብሊካኖች ለሆኑ አገሮች አማካይ የህይወት ተስፋ ይስጡ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የአህጉራት እስያ እና አውሮፓ አጠቃላይ ስፋት ምን ያህል ነው?", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select country.name from country where country.continent = 'Africa' and country.region = 'Eastern Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የአህጉራት እስያ እና አውሮፓ አጠቃላይ ስፋት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ወይም በአውሮፓ አገሮች የተሸፈነውን አጠቃላይ ስፋት ይስጡ.", "query": "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ወይም በአውሮፓ አገሮች የተሸፈነውን አጠቃላይ ስፋት ይስጡ. \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጌልደርላንድ ወረዳ ስንት ሰዎች ይኖራሉ?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጌልደርላንድ ወረዳ ስንት ሰዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የጌልደርላንድ ወረዳ አጠቃላይ የህዝብ ብዛት ስንት ነው?", "query": "select sum ( population ) from city where district = 'Gelderland'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የጌልደርላንድ ወረዳ አጠቃላይ የህዝብ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የዩናይትድ ስቴትስ ግዛት በሆነው በሁሉም አገሮች ውስጥ ያለው አማካይ የጂኤንፒ እና አጠቃላይ የህዝብ ብዛት ስንት ነው?", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select count ( distinct city.id ) as total_cities from city inner join country on city.countrycode = country.code where country.continent = 'Africa' and country.region = 'Sub-Saharan Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የዩናይትድ ስቴትስ ግዛት በሆነው በሁሉም አገሮች ውስጥ ያለው አማካይ የጂኤንፒ እና አጠቃላይ የህዝብ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የአሜሪካ ግዛት ተብለው የሚገመቱትን አማካይ ጂኤንፒ እና አጠቃላይ የህዝብ ብዛት ይስጡ።", "query": "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'", "predicted_sql": "select country.name  , country.population  , country.gnp from country where country.continent = 'North America'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የአሜሪካ ግዛት ተብለው የሚገመቱትን አማካይ ጂኤንፒ እና አጠቃላይ የህዝብ ብዛት ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በዓለም ላይ ስንት ልዩ ቋንቋዎች ይነገራሉ?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በዓለም ላይ ስንት ልዩ ቋንቋዎች ይነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በዓለም ዙሪያ ጥቅም ላይ የዋሉ የተለያዩ ቋንቋዎች ቁጥር ስንት ነው?", "query": "select count ( distinct language ) from countrylanguage", "predicted_sql": "select count ( distinct countrylanguage.language ) as language_count from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በዓለም ዙሪያ ጥቅም ላይ የዋሉ የተለያዩ ቋንቋዎች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ስንት አይነት መንግስታት አሉ?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select count ( distinct country.continent ) from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ስንት አይነት መንግስታት አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ምን ያህል የተለያዩ መንግስታት አሉ?", "query": "select count ( distinct governmentform ) from country where continent = 'Africa'", "predicted_sql": "select country.name from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ምን ያህል የተለያዩ መንግስታት አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአሩባ ውስጥ አጠቃላይ የቋንቋዎች ብዛት ስንት ነው?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአሩባ ውስጥ አጠቃላይ የቋንቋዎች ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአሩባ ውስጥ ስንት ቋንቋዎች ይነገራሉ?", "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode in ( select country.code from city inner join country on city.countrycode = country.code where city.district = 'አሩባ' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአሩባ ውስጥ ስንት ቋንቋዎች ይነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አፍጋኒስታን ስንት ኦፊሴላዊ ቋንቋዎች አሏት?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አፍጋኒስታን ስንት ኦፊሴላዊ ቋንቋዎች አሏት? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍጋኒስታን ውስጥ ስንት ኦፊሴላዊ ቋንቋዎች ይነገራሉ?", "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan' and isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'AFG' or countrylanguage.countrycode = 'ALB'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍጋኒስታን ውስጥ ስንት ኦፊሴላዊ ቋንቋዎች ይነገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ብዙ ቋንቋዎችን የምትናገር አገር ስም ማን ይባላል?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ብዙ ቋንቋዎችን የምትናገር አገር ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛውን የቋንቋ ብዛት የሚጠቀመውን ብሔር ስም ስጥ።", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count ( * ) desc limit 1", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛውን የቋንቋ ብዛት የሚጠቀመውን ብሔር ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም የተለያየ ቋንቋ ያለው የትኛው አህጉር ነው?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም የተለያየ ቋንቋ ያለው የትኛው አህጉር ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ብዙ ቋንቋዎችን የሚናገረው አህጉር የትኛው ነው?", "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ብዙ ቋንቋዎችን የሚናገረው አህጉር የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ምን ያህል አገሮች እንግሊዝኛ እና ደች ይናገራሉ?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "select countrylanguage.language  , countrylanguage.isofficial from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ምን ያህል አገሮች እንግሊዝኛ እና ደች ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ እና ደች የሚጠቀሙ ብሔሮች ቁጥር ስንት ነው?", "query": "select count ( * ) from ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' )", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ እና ደች የሚጠቀሙ ብሔሮች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ እና ፈረንሳይኛ የሚናገሩት የብሔሮች ስም ምንድ ነው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ እና ፈረንሳይኛ የሚናገሩት የብሔሮች ስም ምንድ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሁለቱንም እንግሊዝኛ እና ፈረንሳይኛ የሚናገሩ ብሔሮች ስም ስጥ።", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French'", "predicted_sql": "select city.name  , country.name  , country.continent  , country.region  , country.surfacearea  , country.indepyear  , country.population  , country.lifeexpectancy  , country.gnp  , country.gnpold  , country.localname  , country.governmentform  , country.headofstate  , country.capital  , country.code2 from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሁለቱንም እንግሊዝኛ እና ፈረንሳይኛ የሚናገሩ ብሔሮች ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሁለቱም እንግሊዝኛ እና ፈረንሳይኛ ኦፊሴላዊ ቋንቋዎች የሆኑባቸው የብሔሮች ስሞች ምንድ ናቸው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "select language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሁለቱም እንግሊዝኛ እና ፈረንሳይኛ ኦፊሴላዊ ቋንቋዎች የሆኑባቸው የብሔሮች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንደ ኦፊሴላዊ ቋንቋዎች እንግሊዝኛ እና ፈረንሳይኛ ያላቸውን አገሮች ስም ስጥ።", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French' and countrylanguage.isofficial = 'T'", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንደ ኦፊሴላዊ ቋንቋዎች እንግሊዝኛ እና ፈረንሳይኛ ያላቸውን አገሮች ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ቻይንኛ የሚነገርባቸው የተለያዩ አህጉራት ብዛት ስንት ነው?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ቻይንኛ የሚነገርባቸው የተለያዩ አህጉራት ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስንት አህጉራት ቻይንኛ ይናገራሉ?", "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስንት አህጉራት ቻይንኛ ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ ወይም ደች የሚጠቀሙ ክልሎች ምንድናቸው?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ ወይም ደች የሚጠቀሙ ክልሎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ ክልሎች ደች ወይም እንግሊዝኛ ይናገራሉ?", "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ ክልሎች ደች ወይም እንግሊዝኛ ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ ወይም ደች ኦፊሴላዊ ቋንቋ የሆኑባቸው አገሮች የትኞቹ ናቸው?", "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'english' and isofficial = 't' union select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'dutch' and isofficial = 't'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ ወይም ደች ኦፊሴላዊ ቋንቋ የሆኑባቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የትኞቹ አገሮች እንግሊዝኛ ወይም ደች እንደ ኦፊሴላዊ ቋንቋ አላቸው?", "query": "select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and isofficial = 'T' union select * from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' and isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የትኞቹ አገሮች እንግሊዝኛ ወይም ደች እንደ ኦፊሴላዊ ቋንቋ አላቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ አህጉር ውስጥ በጣም ተወዳጅ የሆነው የትኛው ቋንቋ ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ አህጉር ውስጥ በጣም ተወዳጅ የሆነው የትኛው ቋንቋ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ ቁጥር ያላቸው የእስያ ሀገራት የሚጠቀሙበት ቋንቋ ምንድነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ ቁጥር ያላቸው የእስያ ሀገራት የሚጠቀሙበት ቋንቋ ምንድነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሪፐብሊክ መንግስታት ውስጥ በአንድ ሀገር ብቻ የሚነገሩት ቋንቋዎች የትኞቹ ናቸው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select distinct countrylanguage.language from countrylanguage group by countrylanguage.language having count ( distinct countrylanguage.countrycode ) = 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሪፐብሊክ መንግስታት ውስጥ በአንድ ሀገር ብቻ የሚነገሩት ቋንቋዎች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሪፐብሊክ መንግሥት ባለ አንድ አገር ብቻ የትኞቹን ቋንቋዎች ይጠቀማሉ?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሪፐብሊክ መንግሥት ባለ አንድ አገር ብቻ የትኞቹን ቋንቋዎች ይጠቀማሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛን የሚጠቀም ትልቁን ከተማ ያግኙ።", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛን የሚጠቀም ትልቁን ከተማ ያግኙ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ የሚናገር ብዙ ሕዝብ የሚኖርባት ከተማ የትኛው ነው?", "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1", "predicted_sql": "select city.name from city where city.population > 10000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ የሚናገር ብዙ ሕዝብ የሚኖርባት ከተማ የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትልቁን አካባቢ ያለው የእስያ ሀገር ስም፣ የህዝብ ብዛት እና የሚጠበቀው የህይወት ዘመን ያግኙ?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትልቁን አካባቢ ያለው የእስያ ሀገር ስም፣ የህዝብ ብዛት እና የሚጠበቀው የህይወት ዘመን ያግኙ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በመሬት ትልቁ የእስያ ሀገር ስም፣ የህዝብ ብዛት እና የህይወት ዘመን ምን ያህል ነው?", "query": "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1", "predicted_sql": "select country.name  , country.population  , country.lifeexpectancy from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በመሬት ትልቁ የእስያ ሀገር ስም፣ የህዝብ ብዛት እና የህይወት ዘመን ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዘኛ ኦፊሴላዊ ቋንቋ ባልሆነባቸው አገሮች አማካይ የሕይወት ተስፋ ምን ያህል ነው?", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዘኛ ኦፊሴላዊ ቋንቋ ባልሆነባቸው አገሮች አማካይ የሕይወት ተስፋ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ ኦፊሴላዊ ቋንቋ ያልሆነባቸው አገሮች አማካይ የሕይወት ተስፋ ይስጡ።", "query": "select avg ( lifeexpectancy ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' )", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ ኦፊሴላዊ ቋንቋ ያልሆነባቸው አገሮች አማካይ የሕይወት ተስፋ ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ በማይጠቀሙ ብሔሮች ውስጥ የሚኖሩ ሰዎች አጠቃላይ ቁጥር ስንት ነው?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "select count ( * ) from city where countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ በማይጠቀሙ ብሔሮች ውስጥ የሚኖሩ ሰዎች አጠቃላይ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ በማይናገሩ አገሮች ውስጥ ስንት ሰዎች ይኖራሉ?", "query": "select sum ( population ) from country where name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' )", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ በማይናገሩ አገሮች ውስጥ ስንት ሰዎች ይኖራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የአገሪቱ ርዕሰ መስተዳድር ቢትሪክስ በሀገሪቱ ውስጥ የሚነገረው ኦፊሴላዊ ቋንቋ ምንድነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የአገሪቱ ርዕሰ መስተዳድር ቢትሪክስ በሀገሪቱ ውስጥ የሚነገረው ኦፊሴላዊ ቋንቋ ምንድነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሀገሪቱ ውስጥ ጥቅም ላይ የሚውለው ኦፊሴላዊ ቋንቋ የማን ርዕሰ መስተዳድር ቢትሪክስ ነው?", "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሀገሪቱ ውስጥ ጥቅም ላይ የሚውለው ኦፊሴላዊ ቋንቋ የማን ርዕሰ መስተዳድር ቢትሪክስ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1930 በፊት በተመሠረቱት አገሮች ውስጥ የሚነገሩ ልዩ ኦፊሴላዊ ቋንቋዎች ጠቅላላ ቁጥር ስንት ነው?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where city.population > 1930", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1930 በፊት በተመሠረቱት አገሮች ውስጥ የሚነገሩ ልዩ ኦፊሴላዊ ቋንቋዎች ጠቅላላ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ1930 በፊት ለተመሠረቱት አገሮች፣ አጠቃላይ የተለያዩ ኦፊሴላዊ ቋንቋዎች ስንት ናቸው?", "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where indepyear < 1930 and countrylanguage.isofficial = 'T'", "predicted_sql": "select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' and countrylanguage.language in ( select countrylanguage.language from countrylanguage where countrylanguage.percentage > 0 and countrylanguage.isofficial = 'T' and countrylanguage.countrycode in ( select city.countrycode from city where city.population > 1930 ) )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ1930 በፊት ለተመሠረቱት አገሮች፣ አጠቃላይ የተለያዩ ኦፊሴላዊ ቋንቋዎች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአውሮፓ ውስጥ ካሉ አገሮች የበለጠ የገጽታ ስፋት ያላቸው አገሮች የትኞቹ ናቸው?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select city.name from city where city.countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአውሮፓ ውስጥ ካሉ አገሮች የበለጠ የገጽታ ስፋት ያላቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአውሮፓ ውስጥ ካሉ አገሮች የበለጠ ስፋት ያላቸው አገሮች የትኞቹ ናቸው?", "query": "select name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )", "predicted_sql": "select city.name from city where city.countrycode = 'ET'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአውሮፓ ውስጥ ካሉ አገሮች የበለጠ ስፋት ያላቸው አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከየትኛውም የእስያ ሀገር ያነሰ የህዝብ ብዛት ያላቸው የአፍሪካ ሀገራት የትኞቹ ናቸው?", "query": "select name from country where continent = 'Africa' and population < ( select max ( population ) from country where continent = 'Asia' )", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከየትኛውም የእስያ ሀገር ያነሰ የህዝብ ብዛት ያላቸው የአፍሪካ ሀገራት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከየትኛውም የእስያ ሀገር ያነሰ የህዝብ ብዛት ያላቸው የአፍሪካ ሀገራት የትኞቹ ናቸው?", "query": "select name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' )", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከየትኛውም የእስያ ሀገር ያነሰ የህዝብ ብዛት ያላቸው የአፍሪካ ሀገራት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከየትኛውም የአፍሪካ ሀገር የሚበልጥ የህዝብ ብዛት ያላቸው የኤዥያ ሀገራት የትኞቹ ናቸው?", "query": "select name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' )", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከየትኛውም የአፍሪካ ሀገር የሚበልጥ የህዝብ ብዛት ያላቸው የኤዥያ ሀገራት የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአፍሪካ ውስጥ ካሉት አገሮች የሚበልጡ የእስያ አገሮች የትኞቹ ናቸው?", "query": "select name from country where continent = 'Asia' and population > ( select min ( population ) from country where continent = 'Africa' )", "predicted_sql": "select country.name from country where country.continent = 'Africa'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአፍሪካ ውስጥ ካሉት አገሮች የሚበልጡ የእስያ አገሮች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዘኛ ለማይናገሩ አገሮች የአገር ኮዶች ምንድን ናቸው?", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዘኛ ለማይናገሩ አገሮች የአገር ኮዶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዘኛ ለማይናገሩ አገሮች የአገር ኮዶችን ይመልሱ።", "query": "select countrycode from countrylanguage except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዘኛ ለማይናገሩ አገሮች የአገር ኮዶችን ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሰዎች ከእንግሊዝኛ ሌላ ቋንቋ የሚጠቀሙባቸው አገሮች የአገር ኮድ ምንድን ናቸው?", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "select city.countrycode from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሰዎች ከእንግሊዝኛ ሌላ ቋንቋ የሚጠቀሙባቸው አገሮች የአገር ኮድ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ሰዎች እንግሊዝኛ ያልሆኑ ቋንቋዎች ለሚናገሩባቸው አገሮች የአገር ኮድ ይስጡ።", "query": "select distinct countrycode from countrylanguage where language != 'English'", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ሰዎች እንግሊዝኛ ያልሆኑ ቋንቋዎች ለሚናገሩባቸው አገሮች የአገር ኮድ ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዘኛ የማይናገሩ እና የመንግስት ቅጾች ሪፐብሊክ ያልሆኑ አገሮች ኮድ ምንድን ናቸው?", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዘኛ የማይናገሩ እና የመንግስት ቅጾች ሪፐብሊክ ያልሆኑ አገሮች ኮድ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ የማይናገሩ እና ለመንግሥታት ሪፐብሊካኖች የሌላቸው አገሮች ኮድ ይመልሱ።", "query": "select code from country where governmentform != 'Republic' except select countrycode from countrylanguage where language = 'English'", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ የማይናገሩ እና ለመንግሥታት ሪፐብሊካኖች የሌላቸው አገሮች ኮድ ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ ኦፊሴላዊ ቋንቋ በማይሆንባቸው የአውሮፓ አገሮች ውስጥ የትኞቹ ከተሞች ናቸው?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select city.name from city where city.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ ኦፊሴላዊ ቋንቋ በማይሆንባቸው የአውሮፓ አገሮች ውስጥ የትኞቹ ከተሞች ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "እንግሊዝኛ ኦፊሴላዊ ቋንቋ ያልሆነባቸው በአውሮፓ ውስጥ ያሉ ከተሞች ስሞች ምንድ ናቸው?", "query": "select distinct city.name from country join city on city.countrycode = country.code where country.continent = 'Europe' and country.name not in ( select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'English' )", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### እንግሊዝኛ ኦፊሴላዊ ቋንቋ ያልሆነባቸው በአውሮፓ ውስጥ ያሉ ከተሞች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ቻይንኛ ኦፊሴላዊ ቋንቋ በሆነባቸው በእስያ አገሮች ውስጥ የትኞቹ ልዩ ከተሞች አሉ?", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 't' and countrylanguage.language = 'chinese' and country.continent = 'asia'", "predicted_sql": "select city.name from city where city.population < 100000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ቻይንኛ ኦፊሴላዊ ቋንቋ በሆነባቸው በእስያ አገሮች ውስጥ የትኞቹ ልዩ ከተሞች አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ያሉትን እና ቻይንኛ ኦፊሴላዊ ቋንቋ የሆኑትን የተለያዩ የከተማ ስሞችን ይመልሱ።", "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode where countrylanguage.isofficial = 'T' and countrylanguage.language = 'Chinese' and country.continent = 'Asia'", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city where city.countrycode = 'ET' or city.countrycode = 'CN'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ያሉትን እና ቻይንኛ ኦፊሴላዊ ቋንቋ የሆኑትን የተለያዩ የከተማ ስሞችን ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በትንሹ የህዝብ ቁጥር ያለው የአገሪቱ ስም፣ የነጻነት አመት እና የገጽታ ስፋት ማን ይባላል?", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select country.name  , country.indepyear  , country.governmentform from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በትንሹ የህዝብ ቁጥር ያለው የአገሪቱ ስም፣ የነጻነት አመት እና የገጽታ ስፋት ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ዝቅተኛ የህዝብ ቁጥር ያላትን የአገሪቱን ስም፣ የነጻነት አመት እና የገጽታ ስፋት ስጥ።", "query": "select name , surfacearea , indepyear from country order by population asc limit 1", "predicted_sql": "select city.name  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ዝቅተኛ የህዝብ ቁጥር ያላትን የአገሪቱን ስም፣ የነጻነት አመት እና የገጽታ ስፋት ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትልቁን ቦታ ያላት የሀገሪቱ ህዝብ፣ ስም እና መሪ ስንት ናቸው?", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትልቁን ቦታ ያላት የሀገሪቱ ህዝብ፣ ስም እና መሪ ስንት ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ትልቅ ቦታ ላለው ሀገር ስም፣ የህዝብ ብዛት እና ርዕሰ መስተዳድር ስጥ።", "query": "select name , population , headofstate from country order by surfacearea desc limit 1", "predicted_sql": "select city.name  , city.population  , city.district from city where city.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ትልቅ ቦታ ላለው ሀገር ስም፣ የህዝብ ብዛት እና ርዕሰ መስተዳድር ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ቢያንስ 3 ቋንቋዎችን ለሚናገሩ ለእያንዳንዱ ሀገር የአገሩን ስም እና የሚነገሩ የቋንቋ ቁጥሮች ይመልሱ።", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select city.name  , countrylanguage.language  , countrylanguage.isofficial from city join countrylanguage on city.countrycode = countrylanguage.countrycode where city.district = 'ቢያንስ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ቢያንስ 3 ቋንቋዎችን ለሚናገሩ ለእያንዳንዱ ሀገር የአገሩን ስም እና የሚነገሩ የቋንቋ ቁጥሮች ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ 2 በላይ ቋንቋዎች የሚናገሩ ሀገራት ስም እና ምን ያህል ቋንቋዎች ይናገራሉ?", "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( * ) > 2", "predicted_sql": "select sqlite_sequence.name  , countrylanguage.language from sqlite_sequence join countrylanguage on sqlite_sequence.name = countrylanguage.countrycode", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ 2 በላይ ቋንቋዎች የሚናገሩ ሀገራት ስም እና ምን ያህል ቋንቋዎች ይናገራሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ህዝባቸው ከከተሞች አማካኝ ህዝብ የሚበልጠውን በእያንዳንዱ ወረዳ ውስጥ ያሉትን ከተሞች ብዛት ይፈልጉ?", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ህዝባቸው ከከተሞች አማካኝ ህዝብ የሚበልጠውን በእያንዳንዱ ወረዳ ውስጥ ያሉትን ከተሞች ብዛት ይፈልጉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በየአውራጃው ውስጥ ስንት ከተማዎች በሁሉም ከተሞች ውስጥ ከአማካይ ህዝብ በላይ የሆነ ህዝብ አላቸው?", "query": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district", "predicted_sql": "select count ( distinct city.countrycode ) as num_countries from city where city.countrycode in ( select country.code from country )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በየአውራጃው ውስጥ ስንት ከተማዎች በሁሉም ከተሞች ውስጥ ከአማካይ ህዝብ በላይ የሆነ ህዝብ አላቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካይ የህይወት ዘመናቸው ከ72 በላይ የሆነ ለእያንዳንዱ የመንግስት ቅጽ የመንግስት ቅጽ ስም እና አጠቃላይ የህዝብ ብዛት ያግኙ።", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select city.name  , city.population from city where city.population > 1000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካይ የህይወት ዘመናቸው ከ72 በላይ የሆነ ለእያንዳንዱ የመንግስት ቅጽ የመንግስት ቅጽ ስም እና አጠቃላይ የህዝብ ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የተለያዩ የመንግስት ቅርጾች ምንድ ናቸው እና አማካይ የህይወት ዕድሜ ከ 72 በላይ ለሆኑ የመንግስት ቅጾች የእያንዳንዳቸው አጠቃላይ የህዝብ ብዛት ስንት ነው?", "query": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72", "predicted_sql": "select count ( distinct countrylanguage.language ) as num_languages from countrylanguage where countrylanguage.percentage > 72", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የተለያዩ የመንግስት ቅርጾች ምንድ ናቸው እና አማካይ የህይወት ዕድሜ ከ 72 በላይ ለሆኑ የመንግስት ቅጾች የእያንዳንዳቸው አጠቃላይ የህዝብ ብዛት ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "አማካይ የህይወት ዘመን ከ 72 ያነሰ በሆነበት ለእያንዳንዱ አህጉር አማካይ የህይወት ዘመን እና አጠቃላይ የህዝብ ብዛት ያግኙ?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select count ( distinct city.id ) from city where city.population > 72000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### አማካይ የህይወት ዘመን ከ 72 ያነሰ በሆነበት ለእያንዳንዱ አህጉር አማካይ የህይወት ዘመን እና አጠቃላይ የህዝብ ብዛት ያግኙ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የተለያዩ አህጉራት እና አጠቃላይ የህዝብ ብዛት እና አማካይ የህይወት ዕድሜ ከ 72 በታች ለሆኑ አህጉራት ከእያንዳንዱ ጋር ምን ይዛመዳሉ?", "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72", "predicted_sql": "select city.name from city where city.population > 72000000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የተለያዩ አህጉራት እና አጠቃላይ የህዝብ ብዛት እና አማካይ የህይወት ዕድሜ ከ 72 በታች ለሆኑ አህጉራት ከእያንዳንዱ ጋር ምን ይዛመዳሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ 5 ትልቅ ቦታ ያላቸው አገሮች ስሞች እና አካባቢዎች ምንድ ናቸው?", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select city.name  , city.district  , city.population from city order by city.population desc limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ 5 ትልቅ ቦታ ያላቸው አገሮች ስሞች እና አካባቢዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የ5ቱን ትላልቅ ሀገራት ስሞች እና የገጽታ ቦታዎች ይመልሱ።", "query": "select name , surfacearea from country order by surfacearea desc limit 5", "predicted_sql": "select city.name  , city.district  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code limit 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የ5ቱን ትላልቅ ሀገራት ስሞች እና የገጽታ ቦታዎች ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከፍተኛ 3 ከፍተኛ የሕዝብ ብዛት ያላቸው አገሮች ስም ማን ይባላል?", "query": "select name from country order by population desc limit 3", "predicted_sql": "select city.name from city order by city.population desc limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከፍተኛ 3 ከፍተኛ የሕዝብ ብዛት ያላቸው አገሮች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም ህዝብ የሚበዛባቸውን 3 አገሮች ስም ይመልሱ።", "query": "select name from country order by population desc limit 3", "predicted_sql": "select city.name from city limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም ህዝብ የሚበዛባቸውን 3 አገሮች ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "3 ዝቅተኛ የህዝብ ብዛት ያላቸው ብሔሮች ስም ማን ይባላል?", "query": "select name from country order by population asc limit 3", "predicted_sql": "select city.name from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### 3 ዝቅተኛ የህዝብ ብዛት ያላቸው ብሔሮች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በጣም ጥቂት ሰዎች ያሏቸውን የ3ቱን ሀገራት ስም ይመልሱ።", "query": "select name from country order by population asc limit 3", "predicted_sql": "select city.name from city limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በጣም ጥቂት ሰዎች ያሏቸውን የ3ቱን ሀገራት ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ውስጥ ስንት አገሮች አሉ?", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select count ( distinct city.name ) from city where city.countrycode = 'ETH'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ውስጥ ስንት አገሮች አሉ? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእስያ ያሉትን አገሮች ብዛት ይቁጠሩ።", "query": "select count ( * ) from country where continent = 'Asia'", "predicted_sql": "select count ( * ) from country", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእስያ ያሉትን አገሮች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአውሮፓ አህጉር ውስጥ ያሉ እና 80000 ህዝብ ያላቸው ሀገራት ስም ማን ይባላል?", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select city.name from city where city.population > 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአውሮፓ አህጉር ውስጥ ያሉ እና 80000 ህዝብ ያላቸው ሀገራት ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በአውሮፓ ውስጥ ያሉ እና ከ 80000 ጋር እኩል የሆነ የህዝብ ብዛት ያላቸውን ሀገራት ስም ስጥ።", "query": "select name from country where continent = 'Europe' and population = '80000'", "predicted_sql": "select city.name from city where city.population > 80000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በአውሮፓ ውስጥ ያሉ እና ከ 80000 ጋር እኩል የሆነ የህዝብ ብዛት ያላቸውን ሀገራት ስም ስጥ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሰሜን አሜሪካ አህጉር ውስጥ ያሉ ሀገራት አጠቃላይ የህዝብ ብዛት እና አማካይ ስፋት ከ 3000 በላይ ነው?", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select count ( * ) from country where country.population > 3000 and country.continent = 'North America'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሰሜን አሜሪካ አህጉር ውስጥ ያሉ ሀገራት አጠቃላይ የህዝብ ብዛት እና አማካይ ስፋት ከ 3000 በላይ ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በሰሜን አሜሪካ ከ 3000 በላይ የወለል ስፋት ካላቸው አገሮች ጋር የሚዛመደውን አጠቃላይ የህዝብ ብዛት እና አማካይ የገጽታ ስፋት ይስጡ።", "query": "select sum ( population ) , avg ( surfacearea ) from country where continent = 'north america' and surfacearea > 3000", "predicted_sql": "select city.name  , city.population  , country.population from city join country on city.countrycode = country.code where country.continent = 'North America' and city.population > 3000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በሰሜን አሜሪካ ከ 3000 በላይ የወለል ስፋት ካላቸው አገሮች ጋር የሚዛመደውን አጠቃላይ የህዝብ ብዛት እና አማካይ የገጽታ ስፋት ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ህዝባቸው ከ160000 እስከ 900000 ያሉት ከተሞች የትኞቹ ናቸው?", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ህዝባቸው ከ160000 እስከ 900000 ያሉት ከተሞች የትኞቹ ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ከ160000 እስከ 900000 ህዝብ ያላቸውን የከተማ ስም ይመልሱ።", "query": "select name from city where population between 160000 and 900000", "predicted_sql": "select city.name from city where city.population between 160000 and 900000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ከ160000 እስከ 900000 ህዝብ ያላቸውን የከተማ ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በብዙ አገሮች የሚነገረው ቋንቋ የትኛው ነው?", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select countrylanguage.language from countrylanguage", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በብዙ አገሮች የሚነገረው ቋንቋ የትኛው ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በብዙ አገሮች የሚነገረውን ቋንቋ ይስጡ።", "query": "select language from countrylanguage group by language order by count ( * ) desc limit 1", "predicted_sql": "select city.name  , city.population  , country.name  , country.continent from city join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በብዙ አገሮች የሚነገረውን ቋንቋ ይስጡ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በእያንዳንዱ ሀገር ውስጥ ከፍተኛው መቶኛ ሰዎች የሚናገሩት ቋንቋ ምንድነው?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select countrylanguage.language from countrylanguage where countrylanguage.percentage >= 0.2 group by countrylanguage.language having count ( * ) >= 100", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በእያንዳንዱ ሀገር ውስጥ ከፍተኛው መቶኛ ሰዎች የሚናገሩት ቋንቋ ምንድነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "የተለያዩ አገሮች የአገር ኮዶች ምንድ ናቸው፣ እና ለእያንዳንዱ ሰው ከፍተኛው መቶኛ የሚናገሩት ቋንቋዎች ምን ምን ናቸው?", "query": "select language , countrycode , max ( percentage ) from countrylanguage group by countrycode", "predicted_sql": "select country.name  , countrylanguage.language from country join countrylanguage on countrylanguage.countrycode = country.code where countrylanguage.percentage >= 50", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### የተለያዩ አገሮች የአገር ኮዶች ምንድ ናቸው፣ እና ለእያንዳንዱ ሰው ከፍተኛው መቶኛ የሚናገሩት ቋንቋዎች ምን ምን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በትልቁ መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ጠቅላላ ቁጥር ስንት ነው?", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select count ( * ) from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በትልቁ መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ጠቅላላ ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ብዛት ይቁጠሩ።", "query": "select count ( * ) , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "በትልቁ ሰዎች መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ኮዶች ምንድን ናቸው?", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select city.name from city where city.population % 1000 = 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### በትልቁ ሰዎች መቶኛ ስፓኒሽ የሚነገርባቸው አገሮች ኮዶች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "world_1", "question": "ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ኮዶችን ይመልሱ።", "query": "select countrycode , max ( percentage ) from countrylanguage where language = 'Spanish' group by countrycode", "predicted_sql": "select city.id  , city.name  , city.countrycode  , city.district  , city.population from city inner join country on city.countrycode = country.code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | city : city.id , city.name , city.countrycode , city.district , city.population | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | country : country.code , country.name , country.continent , country.region , country.surfacearea , country.indepyear , country.population , country.lifeexpectancy , country.gnp , country.gnpold , country.localname , country.governmentform , country.headofstate , country.capital , country.code2 | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code# \n ### ስፓኒሽ በብዛት የሚነገርባቸው አገሮች ኮዶችን ይመልሱ። \n SELECT\n        ", "tc_original": ["city.*", "city.id", "city.name", "city.countrycode", "city.district", "city.population", "sqlite_sequence.*", "sqlite_sequence.name", "sqlite_sequence.seq", "country.*", "country.code", "country.name", "country.continent", "country.region", "country.surfacearea", "country.indepyear", "country.population", "country.lifeexpectancy", "country.gnp", "country.gnpold", "country.localname", "country.governmentform", "country.headofstate", "country.capital", "country.code2", "countrylanguage.*", "countrylanguage.countrycode", "countrylanguage.language", "countrylanguage.isofficial", "countrylanguage.percentage"]}
{"db_id": "orchestra", "question": "ስንት መሪዎች አሉ?", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( * ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ስንት መሪዎች አሉ? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የመቆጣጠሪያዎችን ብዛት ይቁጠሩ.", "query": "select count ( * ) from conductor", "predicted_sql": "select count ( * ) from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የመቆጣጠሪያዎችን ብዛት ይቁጠሩ. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በእድሜ ቅደም ተከተል የአስተላላፊዎችን ስም ይዘርዝሩ።", "query": "select name from conductor order by age asc", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በእድሜ ቅደም ተከተል የአስተላላፊዎችን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በእድሜ የታዘዙ የተቆጣጣሪዎች ስሞች ምንድ ናቸው?", "query": "select name from conductor order by age asc", "predicted_sql": "select show.show_id  , show.performance_id  , show.if_first_show  , show.result  , show.attendance from show", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በእድሜ የታዘዙ የተቆጣጣሪዎች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ብሔረሰባቸው &quot;ዩኤስኤ&quot; ያልሆኑ መሪዎች ስም ማን ይባላል?", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor where conductor.nationality = 'ዩኤስኤ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ብሔረሰባቸው &quot;ዩኤስኤ&quot; ያልሆኑ መሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የ&quot;ዩኤስኤ&quot; ዜግነት የሌላቸውን የአስተዳዳሪዎች ስም ይመልሱ።", "query": "select name from conductor where nationality != 'USA'", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የ&quot;ዩኤስኤ&quot; ዜግነት የሌላቸውን የአስተዳዳሪዎች ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ኦርኬስትራዎች በተመሠረቱበት የዓመታት ቅደም ተከተል የተመዘገበባቸው ኩባንያዎች ምንድናቸው?", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ኦርኬስትራዎች በተመሠረቱበት የዓመታት ቅደም ተከተል የተመዘገበባቸው ኩባንያዎች ምንድናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የኦርኬስትራ ሪከርድ ኩባንያዎችን ይመልሱ፣ በተመሠረቱባቸው ዓመታት ወደ ታች ወርደው ተደርድረዋል።", "query": "select record_company from orchestra order by year_of_founded desc", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የኦርኬስትራ ሪከርድ ኩባንያዎችን ይመልሱ፣ በተመሠረቱባቸው ዓመታት ወደ ታች ወርደው ተደርድረዋል። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የትዕይንቶች አማካይ መገኘት ምን ያህል ነው?", "query": "select avg ( attendance ) from show", "predicted_sql": "select performance.type from performance", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የትዕይንቶች አማካይ መገኘት ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በሁሉም ትዕይንቶች ላይ ያለውን አማካይ ተገኝቶ ይመልሱ።", "query": "select avg ( attendance ) from show", "predicted_sql": "select conductor.name  , conductor.age  , orchestra.orchestra  , orchestra.record_company  , performance.type  , performance.date  , show.result from conductor join orchestra on orchestra.conductor_id = conductor.conductor_id join performance on performance.orchestra_id = orchestra.orchestra_id join show on show.performance_id = performance.performance_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በሁሉም ትዕይንቶች ላይ ያለውን አማካይ ተገኝቶ ይመልሱ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የአፈፃፀም ከፍተኛው እና ዝቅተኛው ድርሻ ምን ያህል ነው አይነታቸው &quot;የቀጥታ የመጨረሻ&quot; ያልሆነ።", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "select performance.type from performance where performance.date = 'የቀጥታ የመጨረሻ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የአፈፃፀም ከፍተኛው እና ዝቅተኛው ድርሻ ምን ያህል ነው አይነታቸው &quot;የቀጥታ የመጨረሻ&quot; ያልሆነ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የ&quot;ቀጥታ የመጨረሻ&quot; አይነት ለሌላቸው ትርኢቶች ከፍተኛውን እና ዝቅተኛውን ድርሻ ይመልሱ።", "query": "select max ( share ) , min ( share ) from performance where type != 'Live final'", "predicted_sql": "select conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የ&quot;ቀጥታ የመጨረሻ&quot; አይነት ለሌላቸው ትርኢቶች ከፍተኛውን እና ዝቅተኛውን ድርሻ ይመልሱ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ዳይሬክተሮች ምን ያህል የተለያዩ ብሔረሰቦች አሏቸው?", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ዳይሬክተሮች ምን ያህል የተለያዩ ብሔረሰቦች አሏቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የተለያዩ ዜግነት ያላቸው መሪዎችን ቁጥር ይቁጠሩ.", "query": "select count ( distinct nationality ) from conductor", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የተለያዩ ዜግነት ያላቸው መሪዎችን ቁጥር ይቁጠሩ. \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በተቀነሰ የሥራ ዓመታት ቅደም ተከተል ውስጥ የአስተላላፊዎችን ስም ይዘርዝሩ።", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በተቀነሰ የሥራ ዓመታት ቅደም ተከተል ውስጥ የአስተላላፊዎችን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በሠሩት ዓመታት ብዛት የተደረደሩት መሪዎች ስም ማን ይባላል?", "query": "select name from conductor order by year_of_work desc", "predicted_sql": "select performance.date  , count ( * ) as total_performances from performance group by performance.date order by total_performances desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በሠሩት ዓመታት ብዛት የተደረደሩት መሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በጣም ብዙ የስራ ዓመታትን የያዘውን የዳይሬክተሩን ስም ይዘርዝሩ።", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በጣም ብዙ የስራ ዓመታትን የያዘውን የዳይሬክተሩን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እጅግ በጣም ብዙ ዓመታትን የሠራው መሪ ስም ማን ይባላል?", "query": "select name from conductor order by year_of_work desc limit 1", "predicted_sql": "select conductor.name from conductor where conductor.year_of_work > 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እጅግ በጣም ብዙ ዓመታትን የሠራው መሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የተመራመሩትን እና ኦርኬስትራዎችን ስም ያሳዩ።", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "select conductor.name  , orchestra.orchestra from conductor  , orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የተመራመሩትን እና ኦርኬስትራዎችን ስም ያሳዩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ያካሂዱት የኦርኬስትራ መሪዎችና ተጓዳኝ ኦርኬስትራዎች ስም ማን ይባላል?", "query": "select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ያካሂዱት የኦርኬስትራ መሪዎችና ተጓዳኝ ኦርኬስትራዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ ኦርኬስትራዎችን ያደረጉ መሪዎችን ስም አሳይ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ ኦርኬስትራዎችን ያደረጉ መሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ ኦርኬስትራ ውስጥ የተካኑ መሪዎች ስም ማን ይባላል?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id having count ( * ) > 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ ኦርኬስትራ ውስጥ የተካኑ መሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ብዙ ቁጥር ያላቸውን ኦርኬስትራዎች ያካሄደውን መሪ ስም አሳይ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ብዙ ቁጥር ያላቸውን ኦርኬስትራዎች ያካሄደውን መሪ ስም አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ብዙ ኦርኬስትራዎችን ያከናወነው መሪ ስም ማን ይባላል?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ብዙ ኦርኬስትራዎችን ያከናወነው መሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባኮትን ከ2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያካሄደውን መሪ ስም ያሳዩ።", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.year_of_founded > 2008", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባኮትን ከ2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያካሄደውን መሪ ስም ያሳዩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያደረጉ መሪዎች ስም ማን ይባላሉ?", "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where year_of_founded > 2008", "predicted_sql": "select performance.orchestra_id  , orchestra.orchestra from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id where performance.date >= '2008-01-01'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ 2008 በኋላ የተመሰረቱ ኦርኬስትራዎችን ያደረጉ መሪዎች ስም ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባክዎን የተለያዩ ሪከርድ ኩባንያዎችን እና ተዛማጅ ኦርኬስትራዎችን ቁጥር ያሳዩ።", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባክዎን የተለያዩ ሪከርድ ኩባንያዎችን እና ተዛማጅ ኦርኬስትራዎችን ቁጥር ያሳዩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እያንዳንዱ የመዝገብ ኩባንያ ስንት ኦርኬስትራዎችን ያስተዳድራል?", "query": "select record_company , count ( * ) from orchestra group by record_company", "predicted_sql": "select count ( distinct orchestra.orchestra_id ) from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እያንዳንዱ የመዝገብ ኩባንያ ስንት ኦርኬስትራዎችን ያስተዳድራል? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "እባክህ የኦርኬስትራዎችን የመዝገብ ቅርጸቶች ከፍ ባለ የቁጥር ቅደም ተከተል አሳይ።", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### እባክህ የኦርኬስትራዎችን የመዝገብ ቅርጸቶች ከፍ ባለ የቁጥር ቅደም ተከተል አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በድግግሞሾቻቸው የተደረደሩ የኦርኬስትራ ዋና ዋና ቅርጸቶች ምንድናቸው?", "query": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በድግግሞሾቻቸው የተደረደሩ የኦርኬስትራ ዋና ዋና ቅርጸቶች ምንድናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በብዙ ኦርኬስትራዎች የተጋራውን ሪከርድ ኩባንያ ይዘርዝሩ።", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select conductor.name from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በብዙ ኦርኬስትራዎች የተጋራውን ሪከርድ ኩባንያ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "በጣም ብዙ ቁጥር ያላቸው ኦርኬስትራዎች የሚጠቀሙበት ሪከርድ ኩባንያ ምንድነው?", "query": "select record_company from orchestra group by record_company order by count ( * ) desc limit 1", "predicted_sql": "select record_company from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### በጣም ብዙ ቁጥር ያላቸው ኦርኬስትራዎች የሚጠቀሙበት ሪከርድ ኩባንያ ምንድነው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ምንም አፈጻጸም የሌላቸውን የኦርኬስትራዎችን ስም ይዘርዝሩ።", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "select orchestra.orchestra from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ምንም አፈጻጸም የሌላቸውን የኦርኬስትራዎችን ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ምንም ትርኢት የሌላቸው ኦርኬስትራዎች ምንድን ናቸው?", "query": "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ምንም ትርኢት የሌላቸው ኦርኬስትራዎች ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ2003 በፊት እና ከ2003 በኋላ የተመሰረቱ ኦርኬስትራዎች ያካፈሉትን ሪከርድ ኩባንያዎች አሳይ።", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select orchestra.orchestra from orchestra where orchestra.year_of_founded >= 2003 and orchestra.year_of_founded <= 2003", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ2003 በፊት እና ከ2003 በኋላ የተመሰረቱ ኦርኬስትራዎች ያካፈሉትን ሪከርድ ኩባንያዎች አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከ2003 በፊት የተመሰረቱት እና ከ2003 በኋላ የተመሰረቱት በሁለቱም ኦርኬስትራዎች የሚጠቀሙባቸው ሪከርድ ኩባንያዎች ምን ምን ናቸው?", "query": "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "predicted_sql": "select performance.type  , performance.date from performance where performance.date >= '2003-01-01' and performance.date <= '2003-12-31'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከ2003 በፊት የተመሰረቱት እና ከ2003 በኋላ የተመሰረቱት በሁለቱም ኦርኬስትራዎች የሚጠቀሙባቸው ሪከርድ ኩባንያዎች ምን ምን ናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "የመዝገብ ቅርጸታቸው &quot;ሲዲ&quot; ወይም &quot;ዲቪዲ&quot; የሆኑ ኦርኬስትራዎችን ቁጥር ያግኙ።", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select orchestra.orchestra_id  , orchestra.orchestra  , orchestra.conductor_id  , orchestra.record_company  , orchestra.year_of_founded  , orchestra.major_record_format from orchestra where orchestra.orchestra = 'ሲዲ' or orchestra.orchestra = 'ዲቪዲ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### የመዝገብ ቅርጸታቸው &quot;ሲዲ&quot; ወይም &quot;ዲቪዲ&quot; የሆኑ ኦርኬስትራዎችን ቁጥር ያግኙ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ሲዲ ወይም ዲቪዲ ያላቸውን ኦርኬስትራዎች እንደ መዝገብ ቅርጸታቸው ይቁጠሩ።", "query": "select count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'", "predicted_sql": "select conductor.conductor_id  , conductor.name  , conductor.age  , conductor.nationality  , conductor.year_of_work from conductor", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ሲዲ ወይም ዲቪዲ ያላቸውን ኦርኬስትራዎች እንደ መዝገብ ቅርጸታቸው ይቁጠሩ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ አፈፃፀም የሰጡ ኦርኬስትራዎች የተመሰረቱበትን ዓመታት አሳይ።", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select performance.date from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id where orchestra.year_of_founded = 2020", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ አፈፃፀም የሰጡ ኦርኬስትራዎች የተመሰረቱበትን ዓመታት አሳይ። \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "orchestra", "question": "ከአንድ በላይ አፈፃፀም ላሳዩ ኦርኬስትራዎች የተመሰረቱት ዓመታት ምንድናቸው?", "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1", "predicted_sql": "select orchestra.year_of_founded from orchestra", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.major_record_format | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.weekly_rank , performance.share | show : show.show_id , show.performance_id , show.if_first_show , show.result , show.attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id# \n ### ከአንድ በላይ አፈፃፀም ላሳዩ ኦርኬስትራዎች የተመሰረቱት ዓመታት ምንድናቸው? \n SELECT\n        ", "tc_original": ["conductor.*", "conductor.conductor_id", "conductor.name", "conductor.age", "conductor.nationality", "conductor.year_of_work", "orchestra.*", "orchestra.orchestra_id", "orchestra.orchestra", "orchestra.conductor_id", "orchestra.record_company", "orchestra.year_of_founded", "orchestra.major_record_format", "performance.*", "performance.performance_id", "performance.orchestra_id", "performance.type", "performance.date", "performance.official_ratings_(millions)", "performance.weekly_rank", "performance.share", "show.*", "show.show_id", "show.performance_id", "show.if_first_show", "show.result", "show.attendance"]}
{"db_id": "network_1", "question": "ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select count ( * ) from highschooler", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ይቁጠሩ.", "query": "select count ( * ) from highschooler", "predicted_sql": "select highschooler.id from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ይቁጠሩ. \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የእያንዳንዱን ሁለተኛ ደረጃ ተማሪ ስም እና ውጤት አሳይ።", "query": "select name , grade from highschooler", "predicted_sql": "select highschooler.name  , highschooler.grade from highschooler where highschooler.id = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የእያንዳንዱን ሁለተኛ ደረጃ ተማሪ ስም እና ውጤት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ለእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ስሞች እና ደረጃዎች ምንድ ናቸው?", "query": "select name , grade from highschooler", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ለእያንዳንዱ የሁለተኛ ደረጃ ተማሪ ስሞች እና ደረጃዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ሁሉንም ክፍሎች አሳይ።", "query": "select grade from highschooler", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ሁሉንም ክፍሎች አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የእያንዳንዱ ሁለተኛ ደረጃ ተማሪ ምን ደረጃ አለው?", "query": "select grade from highschooler", "predicted_sql": "select highschooler.grade from highschooler where highschooler.id = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የእያንዳንዱ ሁለተኛ ደረጃ ተማሪ ምን ደረጃ አለው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል በየትኛው ክፍል ነው ያለው?", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል በየትኛው ክፍል ነው ያለው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል ለተባለው የሁለተኛ ደረጃ ተማሪ ውጤቱን ይመልሱ።", "query": "select grade from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል ለተባለው የሁለተኛ ደረጃ ተማሪ ውጤቱን ይመልሱ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ።", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ10ኛ ክፍል ያሉ ሁሉም የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select name from highschooler where grade = 10", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ10ኛ ክፍል ያሉ ሁሉም የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል የሚባል የሁለተኛ ደረጃ ተማሪ መታወቂያ አሳይ።", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል የሚባል የሁለተኛ ደረጃ ተማሪ መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የካይል መታወቂያ ምንድን ነው?", "query": "select id from highschooler where name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የካይል መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ9ኛ ወይም 10ኛ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select count ( * ) from highschooler where grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ9ኛ ወይም 10ኛ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በ9ኛ እና በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ይቁጠሩ።", "query": "select count ( * ) from highschooler where grade = 9 or grade = 10", "predicted_sql": "select highschooler.id from highschooler where highschooler.grade = 9 or highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በ9ኛ እና በ10ኛ ክፍል ያሉ የሁለተኛ ደረጃ ተማሪዎችን ቁጥር ይቁጠሩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ለእያንዳንዱ ክፍል የሁለተኛ ደረጃ ተማሪዎችን ብዛት አሳይ።", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select count ( * ) from highschooler where grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ለእያንዳንዱ ክፍል የሁለተኛ ደረጃ ተማሪዎችን ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በእያንዳንዱ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ?", "query": "select grade , count ( * ) from highschooler group by grade", "predicted_sql": "select count ( distinct highschooler.grade ) as num_grades from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በእያንዳንዱ ክፍል ስንት የሁለተኛ ደረጃ ተማሪዎች አሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የትኛው ክፍል ከፍተኛ ሁለተኛ ደረጃ ተማሪዎች አሉት?", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.grade from highschooler order by highschooler.grade desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የትኛው ክፍል ከፍተኛ ሁለተኛ ደረጃ ተማሪዎች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛውን የሁለተኛ ደረጃ ተማሪዎች ብዛት ያለውን ክፍል ይመልሱ።", "query": "select grade from highschooler group by grade order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛውን የሁለተኛ ደረጃ ተማሪዎች ብዛት ያለውን ክፍል ይመልሱ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 4 ተማሪዎች ያሏቸውን ሁሉንም ክፍሎች አሳዩኝ።", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler limit 4", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 4 ተማሪዎች ያሏቸውን ሁሉንም ክፍሎች አሳዩኝ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "4 ወይም ከዚያ በላይ የሁለተኛ ደረጃ ተማሪዎች ያሉት የትኞቹ ክፍሎች ናቸው?", "query": "select grade from highschooler group by grade having count ( * ) >= 4", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 4 ወይም ከዚያ በላይ የሁለተኛ ደረጃ ተማሪዎች ያሉት የትኞቹ ክፍሎች ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከእያንዳንዱ ጋር የሚዛመዱ የተማሪ መታወቂያዎችን እና የጓደኞችን ቁጥሮች ያሳዩ።", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከእያንዳንዱ ጋር የሚዛመዱ የተማሪ መታወቂያዎችን እና የጓደኞችን ቁጥሮች ያሳዩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "እያንዳንዱ ተማሪ ስንት ጓደኞች አሉት?", "query": "select student_id , count ( * ) from friend group by student_id", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### እያንዳንዱ ተማሪ ስንት ጓደኞች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎችን ስም እና ተዛማጅ የጓደኞቻቸውን ብዛት አሳይ።", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( friend.friend_id ) as num_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( friend.friend_id ) > 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎችን ስም እና ተዛማጅ የጓደኞቻቸውን ብዛት አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪዎች ስም እና እያንዳንዳቸው ስንት ጓደኞች አሏቸው?", "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id", "predicted_sql": "select highschooler.name  , count ( * ) as num_of_friends from highschooler join friend on friend.student_id = highschooler.id group by highschooler.name having count ( * ) = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪዎች ስም እና እያንዳንዳቸው ስንት ጓደኞች አሏቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛ ቁጥር ያላቸው ጓደኞች ያሉት የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛ ቁጥር ያላቸው ጓደኞች ያሉት የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪውን ስም ከብዙ ጓደኞች ጋር ይመልሱ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪውን ስም ከብዙ ጓደኞች ጋር ይመልሱ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 3 ጓደኞች ያሏቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11 limit 3", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 3 ጓደኞች ያሏቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "3 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 3 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪውን የካይል ጓደኞችን ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪውን የካይል ጓደኞችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪ ካይል ጓደኞችን ስም ይመልሱ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪ ካይል ጓደኞችን ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "የሁለተኛ ደረጃ ተማሪው ካይል ስንት ጓደኞች አሉት?", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### የሁለተኛ ደረጃ ተማሪው ካይል ስንት ጓደኞች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል ያላቸውን ጓደኞች ብዛት ይቁጠሩ።", "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል ያላቸውን ጓደኞች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ምንም ጓደኛ የሌላቸው የሁሉም ተማሪዎች መታወቂያ አሳይ።", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ምንም ጓደኛ የሌላቸው የሁሉም ተማሪዎች መታወቂያ አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸው የሁለተኛ ደረጃ ተማሪዎች መታወቂያ ምንድን ነው?", "query": "select id from highschooler except select student_id from friend", "predicted_sql": "select highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸው የሁለተኛ ደረጃ ተማሪዎች መታወቂያ ምንድን ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ።", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸው ተማሪዎች ስም ማን ይባላል?", "query": "select name from highschooler except select highschooler.name from friend join highschooler on friend.student_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸው ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ የሁለተኛ ደረጃ ተማሪዎችን መታወቂያ ያሳዩ።", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ የሁለተኛ ደረጃ ተማሪዎችን መታወቂያ ያሳዩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው ተማሪዎች መታወቂያ ምንድን ናቸው?", "query": "select student_id from friend intersect select liked_id from likes", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው ተማሪዎች መታወቂያ ምንድን ናቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "አንዳንድ ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ ተማሪዎችን ስም ያሳዩ።", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 9", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### አንዳንድ ጓደኞች ያሏቸው እና እንዲሁም በሌላ ሰው የተወደዱ ተማሪዎችን ስም ያሳዩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on likes.student_id = highschooler.id intersect select highschooler.name from likes join highschooler on likes.liked_id = highschooler.id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 11", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ሁለቱም ጓደኞች ያሏቸው እና የሚወዷቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ለእያንዳንዱ የተማሪ መታወቂያ የተወደዱ ብዛት ይቁጠሩ።", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ለእያንዳንዱ የተማሪ መታወቂያ የተወደዱ ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከእያንዳንዱ የተማሪ መታወቂያ ጋር ስንት መውደዶች ይዛመዳሉ?", "query": "select student_id , count ( * ) from likes group by student_id", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከእያንዳንዱ የተማሪ መታወቂያ ጋር ስንት መውደዶች ይዛመዳሉ? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "መውደዶች ያላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም እና ለእያንዳንዱ የተወደዱ ቁጥሮች ያሳዩ።", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### መውደዶች ያላቸውን የሁለተኛ ደረጃ ተማሪዎችን ስም እና ለእያንዳንዱ የተወደዱ ቁጥሮች ያሳዩ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "መውደዶች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ናቸው እና እያንዳንዳቸው ስንት መውደዶች አሏቸው?", "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### መውደዶች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ናቸው እና እያንዳንዳቸው ስንት መውደዶች አሏቸው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከፍተኛ ቁጥር ያላቸው መውደዶች ያለው የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከፍተኛ ቁጥር ያላቸው መውደዶች ያለው የሁለተኛ ደረጃ ተማሪ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "በጣም የተወደደውን የተማሪውን ስም ስጥ።", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### በጣም የተወደደውን የተማሪውን ስም ስጥ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ቢያንስ 2 መውደዶች ያላቸውን ተማሪዎች ስም አሳይ።", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 10", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ቢያንስ 2 መውደዶች ያላቸውን ተማሪዎች ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "2 ወይም ከዚያ በላይ መውደዶች ያሏቸው ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### 2 ወይም ከዚያ በላይ መውደዶች ያሏቸው ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከ 5 ክፍል በላይ ያላቸውን እና ቢያንስ 2 ጓደኞች ያሏቸውን ተማሪዎች ስም አሳይ።", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 5 limit 2", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከ 5 ክፍል በላይ ያላቸውን እና ቢያንስ 2 ጓደኞች ያሏቸውን ተማሪዎች ስም አሳይ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ከ 5 በላይ ክፍል ያላቸው እና 2 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል?", "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2", "predicted_sql": "select highschooler.name from highschooler where highschooler.grade = 2 or highschooler.grade = 5", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ከ 5 በላይ ክፍል ያላቸው እና 2 ወይም ከዚያ በላይ ጓደኞች ያሏቸው የሁለተኛ ደረጃ ተማሪዎች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል ስንት መውደዶች አሉት?", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል ስንት መውደዶች አሉት? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ካይል የሚባል የሁለተኛ ደረጃ ተማሪ ያለውን የተወደዱ ብዛት ይመልሱ።", "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle'", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ካይል የሚባል የሁለተኛ ደረጃ ተማሪ ያለውን የተወደዱ ብዛት ይመልሱ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "አንዳንድ ጓደኞች ያሏቸውን ሁሉንም ተማሪዎች አማካይ ውጤት ያግኙ።", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.id  , highschooler.name  , highschooler.grade from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### አንዳንድ ጓደኞች ያሏቸውን ሁሉንም ተማሪዎች አማካይ ውጤት ያግኙ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኞች ያሏቸው ተማሪዎች አማካይ ክፍል ስንት ነው?", "query": "select avg ( grade ) from highschooler where id in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select count ( * ) from highschooler", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኞች ያሏቸው ተማሪዎች አማካይ ክፍል ስንት ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ጓደኛ የሌላቸውን ተማሪዎች ዝቅተኛውን ክፍል ያግኙ።", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select highschooler.name from highschooler join friend on friend.friend_id = highschooler.id join likes on likes.student_id = highschooler.id where likes.liked_id = highschooler.id and highschooler.grade = 12", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ጓደኛ የሌላቸውን ተማሪዎች ዝቅተኛውን ክፍል ያግኙ። \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "network_1", "question": "ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛው ክፍል ስንት ነው?", "query": "select min ( grade ) from highschooler where id not in ( select friend.student_id from friend join highschooler on friend.student_id = highschooler.id )", "predicted_sql": "select count ( distinct highschooler.id ) as num_other_students from highschooler where highschooler.id not in ( select friend.student_id from friend )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id# \n ### ምንም ጓደኛ የሌላቸው ተማሪዎች ዝቅተኛው ክፍል ስንት ነው? \n SELECT\n        ", "tc_original": ["highschooler.*", "highschooler.id", "highschooler.name", "highschooler.grade", "friend.*", "friend.student_id", "friend.friend_id", "likes.*", "likes.student_id", "likes.liked_id"]}
{"db_id": "dog_kennels", "question": "የትኞቹ ግዛቶች ባለቤቶች እና ባለሙያዎች እዚያ ይኖራሉ?", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ ግዛቶች ባለቤቶች እና ባለሙያዎች እዚያ ይኖራሉ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለቱም ባለቤቶች እና ባለሙያዎች የሚኖሩባቸውን ግዛቶች ያግኙ።", "query": "select state from owners intersect select state from professionals", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለቱም ባለቤቶች እና ባለሙያዎች የሚኖሩባቸውን ግዛቶች ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በማንኛውም ህክምና ያለፉ ውሾች አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select count ( * ) as num_tables from sqlite_master where type = 'table'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በማንኛውም ህክምና ያለፉ ውሾች አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾች አማካይ ዕድሜ ይፈልጉ።", "query": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾች አማካይ ዕድሜ ይፈልጉ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በኢንዲያና ግዛት ውስጥ የሚኖሩት ወይም ከ 2 በላይ ሕክምናዎች ላይ ሕክምና ያደረጉት የትኞቹ ባለሙያዎች ናቸው? የእሱን መታወቂያ፣ የአያት ስም እና የሞባይል ስልኩን ይዘርዝሩ።", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address  , owners.home_phone  , owners.cell_number from owners join dogs on dogs.owner_id = owners.owner_id join treatments on treatments.dog_id = dogs.dog_id where treatments.treatment_type_code = 'ኢንዲያና ግዛት' and treatments.professional_id in ( 2  , 3 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በኢንዲያና ግዛት ውስጥ የሚኖሩት ወይም ከ 2 በላይ ሕክምናዎች ላይ ሕክምና ያደረጉት የትኞቹ ባለሙያዎች ናቸው? የእሱን መታወቂያ፣ የአያት ስም እና የሞባይል ስልኩን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በኢንዲያና ግዛት የሚኖሩ ወይም ከሁለት በላይ ህክምናዎችን ያደረጉ ባለሙያዎችን መታወቂያ፣ የአያት ስም እና የሞባይል ስልክ ያግኙ።", "query": "select professional_id , last_name , cell_number from professionals where state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በኢንዲያና ግዛት የሚኖሩ ወይም ከሁለት በላይ ህክምናዎችን ያደረጉ ባለሙያዎችን መታወቂያ፣ የአያት ስም እና የሞባይል ስልክ ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ ውሾች ባለቤታቸውን ለህክምና ከ1000 በላይ ያላወጡት? የውሻ ስሞችን ይዘርዝሩ።", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs where dogs.size_code = 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ ውሾች ባለቤታቸውን ለህክምና ከ1000 በላይ ያላወጡት? የውሻ ስሞችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ባለቤቱ ከ1000 በላይ ለህክምና ያላወጣላቸው ውሾችስ ማን ይባላሉ?", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 )", "predicted_sql": "select dogs.name from dogs where dogs.date_arrived > 1000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ባለቤቱ ከ1000 በላይ ለህክምና ያላወጣላቸው ውሾችስ ማን ይባላሉ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ የመጀመሪያ ስሞች ለባለሙያዎች ወይም ለባለቤቶች ጥቅም ላይ ይውላሉ ግን እንደ ውሻ ስም ጥቅም ላይ ያልዋሉ?", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ የመጀመሪያ ስሞች ለባለሙያዎች ወይም ለባለቤቶች ጥቅም ላይ ይውላሉ ግን እንደ ውሻ ስም ጥቅም ላይ ያልዋሉ? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለባለሞያዎች ወይም ለባለቤቶች የሚያገለግሉ ግን እንደ ውሻ ስም የማይጠቀሙትን የመጀመሪያ ስሞች ያግኙ።", "query": "select first_name from professionals union select first_name from owners except select name from dogs", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለባለሞያዎች ወይም ለባለቤቶች የሚያገለግሉ ግን እንደ ውሻ ስም የማይጠቀሙትን የመጀመሪያ ስሞች ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኛው ባለሙያ በውሻ ላይ ምንም አይነት ህክምና ያላደረገው? የባለሙያውን መታወቂያ፣ ሚና እና ኢሜይል ይዘርዝሩ።", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኛው ባለሙያ በውሻ ላይ ምንም አይነት ህክምና ያላደረገው? የባለሙያውን መታወቂያ፣ ሚና እና ኢሜይል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በውሻ ላይ ምንም አይነት ህክምና ያላደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና ኢሜይል ስጠኝ።", "query": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በውሻ ላይ ምንም አይነት ህክምና ያላደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና ኢሜይል ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች ባለቤት የቱ ነው? የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ይዘርዝሩ።", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select count ( * ) from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች ባለቤት የቱ ነው? የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች ያለውን የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ይመልሱ።", "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች ያለውን የባለቤቱን መታወቂያ፣ የመጀመሪያ ስም እና የአያት ስም ይመልሱ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ ባለሙያዎች ቢያንስ ሁለት ሕክምናዎችን አድርገዋል? የባለሙያውን መታወቂያ፣ ሚና እና የመጀመሪያ ስም ይዘርዝሩ።", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id where dogs.abandoned_yn = 'Y'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ ባለሙያዎች ቢያንስ ሁለት ሕክምናዎችን አድርገዋል? የባለሙያውን መታወቂያ፣ ሚና እና የመጀመሪያ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለት ወይም ከዚያ በላይ ሕክምናዎችን ያደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና የመጀመሪያ ስም ምንድናቸው?", "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለት ወይም ከዚያ በላይ ሕክምናዎችን ያደረጉ ባለሙያዎች መታወቂያ፣ ሚና እና የመጀመሪያ ስም ምንድናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች ያሉት ዝርያ ስም ማን ይባላል?", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች ያሉት ዝርያ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ብዙ ውሾች የትኛው ዝርያ አላቸው? የዘር ስም ስጠኝ.", "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ብዙ ውሾች የትኛው ዝርያ አላቸው? የዘር ስም ስጠኝ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሾቹ ብዙ ሕክምናዎችን የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና የአያት ስም ይዘርዝሩ።", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_name  , breeds.breed_code from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሾቹ ብዙ ሕክምናዎችን የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና የአያት ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በውሾቹ ህክምና ላይ ብዙ ወጪ ያደረገውን የባለቤቱን መታወቂያ እና የመጨረሻ ስም ንገሩኝ።", "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በውሾቹ ህክምና ላይ ብዙ ወጪ ያደረገውን የባለቤቱን መታወቂያ እና የመጨረሻ ስም ንገሩኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በአጠቃላይ አነስተኛውን ገንዘብ የሚያወጣው የሕክምና ዓይነት መግለጫ ምንድነው?", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በአጠቃላይ አነስተኛውን ገንዘብ የሚያወጣው የሕክምና ዓይነት መግለጫ ምንድነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ጠቅላላ ወጪው በጣም ዝቅተኛ የሆነውን የሕክምና ዓይነት መግለጫ ስጠኝ.", "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ጠቅላላ ወጪው በጣም ዝቅተኛ የሆነውን የሕክምና ዓይነት መግለጫ ስጠኝ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሾቻቸው በድምሩ ከፍተኛውን ገንዘብ የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና ዚፕ ኮድ አሳይ።", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select breeds.breed_name  , breeds.breed_code from breeds order by breeds.breed_code desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሾቻቸው በድምሩ ከፍተኛውን ገንዘብ የከፈለው ባለቤት የትኛው ነው? የባለቤቱን መታወቂያ እና ዚፕ ኮድ አሳይ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በድምሩ ለውሾቹ ብዙ ገንዘብ ያወጣውን የባለቤቱን መታወቂያ እና ዚፕ ኮድ ያግኙ።", "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በድምሩ ለውሾቹ ብዙ ገንዘብ ያወጣውን የባለቤቱን መታወቂያ እና ዚፕ ኮድ ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የትኞቹ ባለሙያዎች ቢያንስ ሁለት ዓይነት ሕክምናዎችን አድርገዋል? የባለሙያ መታወቂያ እና የሞባይል ስልክ ይዘርዝሩ።", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የትኞቹ ባለሙያዎች ቢያንስ ሁለት ዓይነት ሕክምናዎችን አድርገዋል? የባለሙያ መታወቂያ እና የሞባይል ስልክ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁለት ወይም ከዚያ በላይ የሕክምና ዓይነቶችን የሚሠሩ ባለሙያዎችን መታወቂያ እና ሞባይል ያግኙ።", "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁለት ወይም ከዚያ በላይ የሕክምና ዓይነቶችን የሚሠሩ ባለሙያዎችን መታወቂያ እና ሞባይል ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ከአማካይ በታች ህክምና ያደረጉ ባለሙያዎች የመጀመሪያ ስም እና የመጨረሻ ስም ማን ይባላል?", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ከአማካይ በታች ህክምና ያደረጉ ባለሙያዎች የመጀመሪያ ስም እና የመጨረሻ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ከአማካይ ያነሰ ዋጋ ያለው ሕክምና የሠሩት የትኞቹ ባለሙያዎች ናቸው? የቲዎር የመጀመሪያ ስሞችን እና የአያት ስሞችን ስጠኝ.", "query": "select distinct professionals.first_name , professionals.last_name from professionals join treatments where cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners where owners.owner_id in ( select dogs.owner_id from dogs where dogs.abandoned_yn = 'Y' )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ከአማካይ ያነሰ ዋጋ ያለው ሕክምና የሠሩት የትኞቹ ባለሙያዎች ናቸው? የቲዎር የመጀመሪያ ስሞችን እና የአያት ስሞችን ስጠኝ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱን ህክምና ቀን ይዘርዝሩ, ከተሰራው ባለሙያ የመጀመሪያ ስም ጋር.", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱን ህክምና ቀን ይዘርዝሩ, ከተሰራው ባለሙያ የመጀመሪያ ስም ጋር. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሕክምና ቀን እና የቀዶ ጥገና ባለሙያው የመጀመሪያ ስም ምንድ ናቸው?", "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id", "predicted_sql": "select dogs.name from dogs where dogs.date_of_birth = '2021-01-01' and dogs.gender = 'Male'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሕክምና ቀን እና የቀዶ ጥገና ባለሙያው የመጀመሪያ ስም ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱን ሕክምና ዋጋ እና ተዛማጅ የሕክምና ዓይነት መግለጫ ይዘርዝሩ.", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select dogs.name  , dogs.age  , dogs.gender  , dogs.weight  , treatments.date_of_treatment  , treatments.cost_of_treatment from dogs join treatments on treatments.dog_id = dogs.dog_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱን ሕክምና ዋጋ እና ተዛማጅ የሕክምና ዓይነት መግለጫ ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ሕክምና ወጪ እና የሕክምና ዓይነት መግለጫ ምን ያህል ነው?", "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select charges.charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ሕክምና ወጪ እና የሕክምና ዓይነት መግለጫ ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱን ባለቤት ስም፣ የአያት ስም እና የውሻውን መጠን ይዘርዝሩ።", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱን ባለቤት ስም፣ የአያት ስም እና የውሻውን መጠን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለቤት ስም፣ የአያት ስም እና የውሻቸው መጠን ምን ያህል ነው?", "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name  , dogs.name from owners join dogs on dogs.owner_id = owners.owner_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለቤት ስም፣ የአያት ስም እና የውሻቸው መጠን ምን ያህል ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የባለቤቱን ስም እና የውሻውን ስም ጥንዶች ይዘርዝሩ።", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select breeds.breed_name  , dogs.name from breeds  , dogs where breeds.breed_code = dogs.breed_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የባለቤቱን ስም እና የውሻውን ስም ጥንዶች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለቤት የመጀመሪያ ስም እና የውሻቸው ስም ማን ይባላል?", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለቤት የመጀመሪያ ስም እና የውሻቸው ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ያልተለመዱ ዝርያዎችን ውሾች እና የሕክምና ቀናቶችን ይዘርዝሩ።", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ያልተለመዱ ዝርያዎችን ውሾች እና የሕክምና ቀናቶችን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ያልተለመዱ ዝርያዎች የትኞቹ ውሾች ናቸው? ስማቸውን እና የሕክምና ቀኖቻቸውን ያሳዩ.", "query": "select dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id where dogs.breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit 1 )", "predicted_sql": "select dogs.name  , dogs.gender  , dogs.age  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ያልተለመዱ ዝርያዎች የትኞቹ ውሾች ናቸው? ስማቸውን እና የሕክምና ቀኖቻቸውን ያሳዩ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በቨርጂኒያ ውስጥ የሚኖር ሰው የየትኞቹ ውሾች ናቸው? የባለቤቱን ስም እና የውሻውን ስም ይዘርዝሩ.", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "select owners.first_name  , owners.last_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በቨርጂኒያ ውስጥ የሚኖር ሰው የየትኞቹ ውሾች ናቸው? የባለቤቱን ስም እና የውሻውን ስም ይዘርዝሩ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በቨርጂኒያ የሚኖሩ የመጀመሪያ ባለቤቶችን ስም እና የያዙትን የውሻ ስም ያግኙ።", "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በቨርጂኒያ የሚኖሩ የመጀመሪያ ባለቤቶችን ስም እና የያዙትን የውሻ ስም ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾች የሚመጡበት ቀን እና የሚሄዱበት ቀን ስንት ነው?", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾች የሚመጡበት ቀን እና የሚሄዱበት ቀን ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ህክምና ያገኙ ውሾች የሚመጡበትን ቀን እና የሚሄዱበትን ቀን ያግኙ።", "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ህክምና ያገኙ ውሾች የሚመጡበትን ቀን እና የሚሄዱበትን ቀን ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ትንሹ ውሻ ያለው የባለቤቱን የመጨረሻ ስም ይዘርዝሩ።", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ትንሹ ውሻ ያለው የባለቤቱን የመጨረሻ ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ትንሹ ውሻ ማን ነው ያለው? የመጨረሻ ስሙን ስጠኝ።", "query": "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id where dogs.age = ( select max ( age ) from dogs )", "predicted_sql": "select breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ትንሹ ውሻ ማን ነው ያለው? የመጨረሻ ስሙን ስጠኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሃዋይ ግዛት ወይም በዊስኮንሲን ግዛት የሚኖሩ የባለሙያዎችን ኢሜይሎች ይዘርዝሩ።", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "select owners.email_address from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሃዋይ ግዛት ወይም በዊስኮንሲን ግዛት የሚኖሩ የባለሙያዎችን ኢሜይሎች ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሃዋይ ግዛት ወይም በዊስኮንሲን ግዛት የሚኖሩ የባለሙያዎች ኢሜይሎች ምንድ ናቸው?", "query": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "predicted_sql": "select owners.email_address from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሃዋይ ግዛት ወይም በዊስኮንሲን ግዛት የሚኖሩ የባለሙያዎች ኢሜይሎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉም ውሾች የመድረሻ ቀን እና የሚሄዱበት ቀን ምንድ ነው?", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉም ውሾች የመድረሻ ቀን እና የሚሄዱበት ቀን ምንድ ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለሁሉም ውሾች የመድረሻ ቀን እና የመነሻ ቀን ይዘርዝሩ።", "query": "select date_arrived , date_departed from dogs", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለሁሉም ውሾች የመድረሻ ቀን እና የመነሻ ቀን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምን ያህል ውሾች ማንኛውንም ሕክምና አልፈዋል?", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምን ያህል ውሾች ማንኛውንም ሕክምና አልፈዋል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በሕክምና ውስጥ ያለፉ ውሾች ብዛት ይቁጠሩ።", "query": "select count ( distinct dog_id ) from treatments", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በሕክምና ውስጥ ያለፉ ውሾች ብዛት ይቁጠሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምን ያህል ባለሙያዎች ለውሾች ማንኛውንም ሕክምና አድርገዋል?", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምን ያህል ባለሙያዎች ለውሾች ማንኛውንም ሕክምና አድርገዋል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ውሾችን ያከሙ የባለሙያዎችን ብዛት ያግኙ።", "query": "select count ( distinct professional_id ) from treatments", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ውሾችን ያከሙ የባለሙያዎችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "‹ምዕራብ› የሚል ንዑስ ሕብረቁምፊ በያዘ ከተማ ውስጥ የሚኖሩት የትኞቹ ባለሙያዎች ናቸው? የእሱን ሚና፣ ጎዳና፣ ከተማ እና ግዛት ይዘርዝሩ።", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code from owners join dogs on dogs.owner_id = owners.owner_id where dogs.dog_id = [dog_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ‹ምዕራብ› የሚል ንዑስ ሕብረቁምፊ በያዘ ከተማ ውስጥ የሚኖሩት የትኞቹ ባለሙያዎች ናቸው? የእሱን ሚና፣ ጎዳና፣ ከተማ እና ግዛት ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በከተማ ውስጥ የሚኖሩትን የባለሙያዎች ሚና፣ ጎዳና፣ ከተማ እና ሁኔታ ይፈልጉ &#39;ምዕራብ&#39; ንዑስ ሕብረቁምፊ።", "query": "select role_code , street , city , state from professionals where city like '%West%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number from owners where owners.city = 'ምዕራብ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በከተማ ውስጥ የሚኖሩትን የባለሙያዎች ሚና፣ ጎዳና፣ ከተማ እና ሁኔታ ይፈልጉ &#39;ምዕራብ&#39; ንዑስ ሕብረቁምፊ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በግዛቱ ውስጥ የሚኖሩት የትኞቹ ባለቤቶች ናቸው ስማቸው &#39;ሰሜን&#39; ንዑስ ሕብረቁምፊ ያለው? የመጀመሪያ ስሙን፣ የአያት ስም እና ኢሜል ይዘርዝሩ።", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.city = 'ሰሜን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በግዛቱ ውስጥ የሚኖሩት የትኞቹ ባለቤቶች ናቸው ስማቸው &#39;ሰሜን&#39; ንዑስ ሕብረቁምፊ ያለው? የመጀመሪያ ስሙን፣ የአያት ስም እና ኢሜል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስማቸው &#39;ሰሜን&#39; ንኡስ ሕብረቁምፊ በያዘ ግዛት ውስጥ የሚኖሩ የባለቤቶችን የመጀመሪያ ስም፣ የአያት ስም እና ኢሜይል ይመልሱ።", "query": "select first_name , last_name , email_address from owners where state like '%North%'", "predicted_sql": "select owners.first_name  , owners.last_name  , owners.email_address from owners where owners.city = 'ሰሜን'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስማቸው &#39;ሰሜን&#39; ንኡስ ሕብረቁምፊ በያዘ ግዛት ውስጥ የሚኖሩ የባለቤቶችን የመጀመሪያ ስም፣ የአያት ስም እና ኢሜይል ይመልሱ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ውሾች ከአማካይ በታች እድሜ ያላቸው?", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select count ( * ) from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ውሾች ከአማካይ በታች እድሜ ያላቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የዕድሜ ውሾችን ቁጥር ከአማካይ በታች ይቁጠሩ።", "query": "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የዕድሜ ውሾችን ቁጥር ከአማካይ በታች ይቁጠሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የቅርብ ጊዜው ሕክምና ምን ያህል ያስከፍላል?", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select dogs.name  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed from dogs", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የቅርብ ጊዜው ሕክምና ምን ያህል ያስከፍላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በቅርቡ የተደረገውን ህክምና ወጪ አሳየኝ።", "query": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "predicted_sql": "select breeds.breed_name  , charges.charge_type  , charges.charge_amount  , sizes.size_description  , treatment_types.treatment_type_description  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በቅርቡ የተደረገውን ህክምና ወጪ አሳየኝ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምን ያህል ውሾች ምንም ዓይነት ሕክምና አላደረጉም?", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምን ያህል ውሾች ምንም ዓይነት ሕክምና አላደረጉም? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ምንም አይነት ህክምና ያላገኙ ውሾች ብዛት ንገሩኝ .", "query": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ምንም አይነት ህክምና ያላገኙ ውሾች ብዛት ንገሩኝ . \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ባለቤቶች ለጊዜው ውሻ የላቸውም?", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select count ( * ) from sizes", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ባለቤቶች ለጊዜው ውሻ የላቸውም? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በዚህ ጊዜ የውሻ ባለቤት የሌላቸውን የባለቤቶች ብዛት ያግኙ።", "query": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )", "predicted_sql": "select breeds.breed_name  , count ( * ) as breed_count from breeds group by breeds.breed_name", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በዚህ ጊዜ የውሻ ባለቤት የሌላቸውን የባለቤቶች ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ስንት ባለሞያዎች በውሻ ላይ ምንም አይነት ህክምና አላደረጉም?", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select count ( * ) from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ስንት ባለሞያዎች በውሻ ላይ ምንም አይነት ህክምና አላደረጉም? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ማንኛውንም ውሾች ያልታከሙ የባለሙያዎችን ብዛት ያግኙ።", "query": "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ማንኛውንም ውሾች ያልታከሙ የባለሙያዎችን ብዛት ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የተተዉትን የውሻ ስም፣ እድሜ እና ክብደት ይዘርዝሩ? 1 አዎን፣ 0 ደግሞ አይ ይቆማል።", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የተተዉትን የውሻ ስም፣ እድሜ እና ክብደት ይዘርዝሩ? 1 አዎን፣ 0 ደግሞ አይ ይቆማል። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የተተዉት የውሻ ስም፣ እድሜ እና ክብደት ማን ይባላል? በሠንጠረዦቹ ውስጥ 1 አዎ፣ እና 0 ማለት እንዳልሆነ ልብ ይበሉ።", "query": "select name , age , weight from dogs where abandoned_yn = 1", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የተተዉት የውሻ ስም፣ እድሜ እና ክብደት ማን ይባላል? በሠንጠረዦቹ ውስጥ 1 አዎ፣ እና 0 ማለት እንዳልሆነ ልብ ይበሉ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉም ውሾች አማካይ ዕድሜ ስንት ነው?", "query": "select avg ( age ) from dogs", "predicted_sql": "select count ( * ) as total_number_of_tables from sqlite_master where type = 'table'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉም ውሾች አማካይ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉንም ውሾች አማካይ ዕድሜ አስሉ.", "query": "select avg ( age ) from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉንም ውሾች አማካይ ዕድሜ አስሉ. \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ጥንታዊው ውሻ ዕድሜ ስንት ነው?", "query": "select max ( age ) from dogs", "predicted_sql": "select count ( * ) as number_of_tables from sqlite_master where type = 'table'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ጥንታዊው ውሻ ዕድሜ ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የታላቁን ውሻ ዕድሜ ንገረኝ ።", "query": "select max ( age ) from dogs", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የታላቁን ውሻ ዕድሜ ንገረኝ ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "እያንዳንዱ የክፍያ ዓይነት ምን ያህል ያስከፍላል? ሁለቱንም የክፍያ ዓይነት እና መጠን ይዘርዝሩ።", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### እያንዳንዱ የክፍያ ዓይነት ምን ያህል ያስከፍላል? ሁለቱንም የክፍያ ዓይነት እና መጠን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "እያንዳንዱን የክፍያ ዓይነት እና መጠኑን ይዘርዝሩ።", "query": "select charge_type , charge_amount from charges", "predicted_sql": "select breeds.breed_code  , breeds.breed_name from breeds", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### እያንዳንዱን የክፍያ ዓይነት እና መጠኑን ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ውድ የሆነው የክፍያ ዓይነት ምን ያህል ያስከፍላል?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ውድ የሆነው የክፍያ ዓይነት ምን ያህል ያስከፍላል? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "በጣም ውድ የሆነው የክፍያ ዓይነት የክፍያ መጠን ስንት ነው?", "query": "select max ( charge_amount ) from charges", "predicted_sql": "select charge_type from charges", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### በጣም ውድ የሆነው የክፍያ ዓይነት የክፍያ መጠን ስንት ነው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉም ባለሙያዎች ኢሜይል፣ ሞባይል እና የቤት ስልክ ይዘርዝሩ።", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select owners.email_address  , owners.home_phone  , owners.cell_number from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉም ባለሙያዎች ኢሜይል፣ ሞባይል እና የቤት ስልክ ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለሙያ ኢሜይል፣ ሞባይል እና የቤት ስልክ ምንድናቸው?", "query": "select email_address , cell_number , home_phone from professionals", "predicted_sql": "select owners.email_address  , owners.home_phone  , owners.cell_number from owners where owners.owner_id = [owner_id]", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለሙያ ኢሜይል፣ ሞባይል እና የቤት ስልክ ምንድናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ሁሉም ሊሆኑ የሚችሉ የዝርያ አይነት እና የመጠን አይነት ጥምረት ምንድናቸው?", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ሁሉም ሊሆኑ የሚችሉ የዝርያ አይነት እና የመጠን አይነት ጥምረት ምንድናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "ለውሻዎች የተለየ የዝርያ ዓይነት እና የመጠን አይነት ጥምረት ያግኙ።", "query": "select distinct breed_code , size_code from dogs", "predicted_sql": "select breeds.breed_code  , breeds.breed_name  , charges.charge_id  , charges.charge_type  , charges.charge_amount  , sizes.size_code  , sizes.size_description  , treatment_types.treatment_type_code  , treatment_types.treatment_type_description  , owners.owner_id  , owners.first_name  , owners.last_name  , owners.street  , owners.city  , owners.state  , owners.zip_code  , owners.email_address  , owners.home_phone  , owners.cell_number  , dogs.dog_id  , dogs.owner_id  , dogs.abandoned_yn  , dogs.breed_code  , dogs.size_code  , dogs.name  , dogs.age  , dogs.date_of_birth  , dogs.gender  , dogs.weight  , dogs.date_arrived  , dogs.date_adopted  , dogs.date_departed  , professionals.professional_id  , professionals.role_code  , professionals.first_name  , professionals.street  , professionals.city  , professionals.state  , professionals.zip_code  , professionals.last_name  , professionals.email_address  , professionals.home_phone  , professionals.cell_number  , treatments.treatment_id  , treatments.dog_id  , treatments.professional_id  , treatments.treatment_type_code  , treatments.date_of_treatment  , treatments.cost_of_treatment from breeds  , charges  , sizes  , treatment_types  , owners  , dogs  , professionals  , treatments where dogs.owner_id = owners.owner_id and dogs.size_code = sizes.size_code and dogs.breed_code = breeds.breed_code and treatments.dog_id = dogs.dog_id and treatments.professional_id = professionals.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### ለውሻዎች የተለየ የዝርያ ዓይነት እና የመጠን አይነት ጥምረት ያግኙ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የሁሉም ባለሙያዎች የመጀመሪያ ስም ከህክምናው መግለጫ ጋር ይዘርዝሩ።", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "select owners.first_name from owners", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የሁሉም ባለሙያዎች የመጀመሪያ ስም ከህክምናው መግለጫ ጋር ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "dog_kennels", "question": "የእያንዳንዱ ባለሙያ የመጀመሪያ ስም እና ያከናወኗቸው የሕክምና መግለጫዎች ምንድ ናቸው?", "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code", "predicted_sql": "sql placeholder", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | breeds : breeds.breed_code , breeds.breed_name | charges : charges.charge_id , charges.charge_type , charges.charge_amount | sizes : sizes.size_code , sizes.size_description | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description | owners : owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.zip_code , owners.email_address , owners.home_phone , owners.cell_number | dogs : dogs.dog_id , dogs.owner_id , dogs.abandoned_yn , dogs.breed_code , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.weight , dogs.date_arrived , dogs.date_adopted , dogs.date_departed | professionals : professionals.professional_id , professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.zip_code , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.cell_number | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code# \n ### የእያንዳንዱ ባለሙያ የመጀመሪያ ስም እና ያከናወኗቸው የሕክምና መግለጫዎች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["breeds.*", "breeds.breed_code", "breeds.breed_name", "charges.*", "charges.charge_id", "charges.charge_type", "charges.charge_amount", "sizes.*", "sizes.size_code", "sizes.size_description", "treatment_types.*", "treatment_types.treatment_type_code", "treatment_types.treatment_type_description", "owners.*", "owners.owner_id", "owners.first_name", "owners.last_name", "owners.street", "owners.city", "owners.state", "owners.zip_code", "owners.email_address", "owners.home_phone", "owners.cell_number", "dogs.*", "dogs.dog_id", "dogs.owner_id", "dogs.abandoned_yn", "dogs.breed_code", "dogs.size_code", "dogs.name", "dogs.age", "dogs.date_of_birth", "dogs.gender", "dogs.weight", "dogs.date_arrived", "dogs.date_adopted", "dogs.date_departed", "professionals.*", "professionals.professional_id", "professionals.role_code", "professionals.first_name", "professionals.street", "professionals.city", "professionals.state", "professionals.zip_code", "professionals.last_name", "professionals.email_address", "professionals.home_phone", "professionals.cell_number", "treatments.*", "treatments.treatment_id", "treatments.dog_id", "treatments.professional_id", "treatments.treatment_type_code", "treatments.date_of_treatment", "treatments.cost_of_treatment"]}
{"db_id": "singer", "question": "ስንት ዘፋኞች አሉ?", "query": "select count ( * ) from singer", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ስንት ዘፋኞች አሉ? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞች ቁጥር ስንት ነው?", "query": "select count ( * ) from singer", "predicted_sql": "select count ( * ) from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞች ቁጥር ስንት ነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞችን ስም በተጣራ ዋጋ በቅደም ተከተል ይዘርዝሩ።", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 100 order by singer.name asc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞችን ስም በተጣራ ዋጋ በቅደም ተከተል ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ወደ ላይ በመውጣት የዘፋኞች ስም ማን ይባላል?", "query": "select name from singer order by net_worth_millions asc", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ወደ ላይ በመውጣት የዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞች ልደት እና ዜግነት ስንት ናቸው?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select count ( distinct singer.singer_id ) as number_of_singers  , count ( distinct singer.citizenship ) as number_of_citizenships from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞች ልደት እና ዜግነት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞቹ የልደት ዓመታት እና ዜግነት ስንት ናቸው?", "query": "select birth_year , citizenship from singer", "predicted_sql": "select count ( distinct singer.birth_year ) as number_of_birth_years  , count ( distinct singer.citizenship ) as number_of_citizenships from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞቹ የልደት ዓመታት እና ዜግነት ስንት ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ዜግነታቸው &quot;ፈረንሳይ&quot; ያልሆነውን ዘፋኞች ስም ይዘርዝሩ።", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer join song on song.singer_id = singer.singer_id where song.title = 'ፈረንሳይ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ዜግነታቸው &quot;ፈረንሳይ&quot; ያልሆነውን ዘፋኞች ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የፈረንሳይ ዜጋ ያልሆኑ ዘፋኞች ስም ማን ይባላል?", "query": "select name from singer where citizenship != 'France'", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የፈረንሳይ ዜጋ ያልሆኑ ዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የትውልድ አመታቸው 1948 ወይም 1949 የዘፋኞችን ስም አሳይ?", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የትውልድ አመታቸው 1948 ወይም 1949 የዘፋኞችን ስም አሳይ? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የተወለዱበት ጊዜ 1948 ወይም 1949 የዘፋኞች ስም ማን ይባላል?", "query": "select name from singer where birth_year = 1948 or birth_year = 1949", "predicted_sql": "select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የተወለዱበት ጊዜ 1948 ወይም 1949 የዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ትልቁ የተጣራ ዋጋ ያለው ዘፋኙ ስም ማን ይባላል?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 100 order by singer.net_worth_millions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ትልቁ የተጣራ ዋጋ ያለው ዘፋኙ ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "በጣም ዋጋ ያለው ዘፋኙ ማን ይባላል?", "query": "select name from singer order by net_worth_millions desc limit 1", "predicted_sql": "select singer.name from singer where singer.net_worth_millions = ( select max ( singer.net_worth_millions ) from singer )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### በጣም ዋጋ ያለው ዘፋኙ ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የተለያዩ የዘፋኞች ዜግነት እና የእያንዳንዱን ዜጋ ዘፋኞች ቁጥር ያሳዩ።", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select singer.name  , singer.net_worth_millions from singer where singer.citizenship = 'Ethiopian'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የተለያዩ የዘፋኞች ዜግነት እና የእያንዳንዱን ዜጋ ዘፋኞች ቁጥር ያሳዩ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዜጋ ስንት ዘፋኞች የዚያ ሀገር ናቸው?", "query": "select citizenship , count ( * ) from singer group by citizenship", "predicted_sql": "select count ( * ) from song", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዜጋ ስንት ዘፋኞች የዚያ ሀገር ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "እባኮትን በጣም የተለመደው የዘፋኞች ዜግነት ያሳዩ።", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.name  , singer.net_worth_millions from singer where singer.citizenship = 'Ethiopia'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### እባኮትን በጣም የተለመደው የዘፋኞች ዜግነት ያሳዩ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "በጣም የተለመደው የዘፋኝ ዜግነት ምንድነው?", "query": "select citizenship from singer group by citizenship order by count ( * ) desc limit 1", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 100 order by singer.net_worth_millions desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### በጣም የተለመደው የዘፋኝ ዜግነት ምንድነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የተለያዩ ዜግነቶችን እና የእያንዳንዱን ዜጋ ከፍተኛ የተጣራ ዋጋ ያላቸውን ዘፋኞች አሳይ።", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select singer.name  , singer.net_worth_millions from singer where singer.net_worth_millions > 100 order by singer.net_worth_millions desc", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የተለያዩ ዜግነቶችን እና የእያንዳንዱን ዜጋ ከፍተኛ የተጣራ ዋጋ ያላቸውን ዘፋኞች አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዜጋ ከፍተኛው የተጣራ ዋጋ ስንት ነው?", "query": "select citizenship , max ( net_worth_millions ) from singer group by citizenship", "predicted_sql": "select count ( distinct song_id ) as total_sales from song where sales > 0", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዜጋ ከፍተኛው የተጣራ ዋጋ ስንት ነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፈኖችን እና የዘፋኞችን ስም አሳይ።", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፈኖችን እና የዘፋኞችን ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፈን ስሞች እና የዘፋኞች ስሞች ምንድ ናቸው?", "query": "select song.title , singer.name from singer join song on singer.singer_id = song.singer_id", "predicted_sql": "select singer.name  , song.title from singer join song on song.singer_id = singer.singer_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፈን ስሞች እና የዘፋኞች ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ300000 በላይ ሽያጭ ያላቸው ዘፈኖች ያሏቸውን የዘፋኞች ስም አሳይ።", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ300000 በላይ ሽያጭ ያላቸው ዘፈኖች ያሏቸውን የዘፋኞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ 300000 በላይ ሽያጭ ያላቸው ዘፋኞች የተለያዩ ስሞች ምንድ ናቸው?", "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000", "predicted_sql": "select song.title from song where song.sales > 300000", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ 300000 በላይ ሽያጭ ያላቸው ዘፋኞች የተለያዩ ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከአንድ በላይ ዘፈን ያላቸውን የዘፋኞች ስም አሳይ።", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከአንድ በላይ ዘፈን ያላቸውን የዘፋኞች ስም አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከአንድ በላይ ዘፈኖች ያሏቸው ዘፋኞች ስም ማን ይባላል?", "query": "select singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name having count ( * ) > 1", "predicted_sql": "select singer.name from singer where singer.singer_id in ( 1  , 2 )", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከአንድ በላይ ዘፈኖች ያሏቸው ዘፋኞች ስም ማን ይባላል? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "የዘፋኞችን ስም እና የዘፈኖቻቸውን አጠቃላይ ሽያጭ አሳይ።", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select singer.name  , singer.net_worth_millions from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### የዘፋኞችን ስም እና የዘፈኖቻቸውን አጠቃላይ ሽያጭ አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ለእያንዳንዱ ዘፋኝ ስም፣ የዘፈኖቻቸው ጠቅላላ ሽያጮች ስንት ናቸው?", "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name", "predicted_sql": "select count ( distinct song.title ) from singer join song on singer.singer_id = song.singer_id where singer.name = 'ዘፋኝ'", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ለእያንዳንዱ ዘፋኝ ስም፣ የዘፈኖቻቸው ጠቅላላ ሽያጮች ስንት ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ምንም ዘፈን የሌላቸውን ዘፋኞች ስም ይዘርዝሩ።", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ምንም ዘፈን የሌላቸውን ዘፋኞች ስም ይዘርዝሩ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ዘፋኝ ሁሉ ዘፈን የሌለው ዱላ ምንድነው?", "query": "select name from singer where singer_id not in ( select singer_id from song )", "predicted_sql": "select singer.name from singer where singer.net_worth_millions > 100 order by singer.birth_year desc limit 1", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ዘፋኝ ሁሉ ዘፈን የሌለው ዱላ ምንድነው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ1945 በፊት እና ከ1955 በኋላ በዘማሪዎች የተጋሩትን ዜግነት አሳይ።", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select * from singer where birth_year >= 1945 and birth_year <= 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ1945 በፊት እና ከ1955 በኋላ በዘማሪዎች የተጋሩትን ዜግነት አሳይ። \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "singer", "question": "ከ 1945 በፊት እና ከ 1955 በኋላ ባለው የልደት አመት ዘፋኞች የሚጋሩት ዜግነቶች ምንድ ናቸው?", "query": "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "predicted_sql": "select birth_year from singer where birth_year >= 1945 and birth_year <= 1955", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | singer : singer.singer_id , singer.name , singer.birth_year , singer.net_worth_millions , singer.citizenship | song : song.song_id , song.title , song.singer_id , song.sales , song.highest_position | song.singer_id = singer.singer_id# \n ### ከ 1945 በፊት እና ከ 1955 በኋላ ባለው የልደት አመት ዘፋኞች የሚጋሩት ዜግነቶች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["singer.*", "singer.singer_id", "singer.name", "singer.birth_year", "singer.net_worth_millions", "singer.citizenship", "song.*", "song.song_id", "song.title", "song.singer_id", "song.sales", "song.highest_position"]}
{"db_id": "real_estate_properties", "question": "በጠቅላላው ምን ያህል የሚገኙ ባህሪያት አሉ?", "query": "select count ( * ) from other_available_features", "predicted_sql": "select ref_feature_types.feature_type_name  , ref_property_types.property_type_description  , other_available_features.feature_name  , other_available_features.feature_description  , properties.property_name  , properties.property_address  , properties.room_count  , properties.vendor_requested_price  , properties.buyer_offered_price  , properties.agreed_selling_price  , properties.apt_feature_1  , properties.apt_feature_2  , properties.apt_feature_3  , properties.fld_feature_1  , properties.fld_feature_2  , properties.fld_feature_3  , properties.hse_feature_1  , properties.hse_feature_2  , properties.hse_feature_3  , properties.oth_feature_1  , properties.oth_feature_2  , properties.oth_feature_3  , properties.shp_feature_1  , properties.shp_feature_2  , properties.shp_feature_3  , properties.other_property_details from ref_feature_types  , ref_property_types  , other_available_features  , properties  , other_property_features where other_available_features.feature_type_code = ref_feature_types.feature_type_code and properties.property_type_code = ref_property_types.property_type_code and other_property_features.property_id = properties.property_id and other_property_features.feature_id = other_available_features.feature_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### በጠቅላላው ምን ያህል የሚገኙ ባህሪያት አሉ? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "የኤርኮን የባህሪ አይነት ስም ምንድ ነው?", "query": "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'", "predicted_sql": "select ref_feature_types.feature_type_name from ref_feature_types", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### የኤርኮን የባህሪ አይነት ስም ምንድ ነው? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "የዚያ ኮድ ንብረት የሆኑ ንብረቶች የንብረት አይነት መግለጫዎችን አሳይ።", "query": "select ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code", "predicted_sql": "select ref_feature_types.feature_type_code  , ref_feature_types.feature_type_name  , ref_property_types.property_type_code  , ref_property_types.property_type_description  , other_available_features.feature_id  , other_available_features.feature_type_code  , other_available_features.feature_name  , other_available_features.feature_description  , properties.property_id  , properties.property_type_code  , properties.date_on_market  , properties.date_sold  , properties.property_name  , properties.property_address  , properties.room_count  , properties.vendor_requested_price  , properties.buyer_offered_price  , properties.agreed_selling_price  , properties.apt_feature_1  , properties.apt_feature_2  , properties.apt_feature_3  , properties.fld_feature_1  , properties.fld_feature_2  , properties.fld_feature_3  , properties.hse_feature_1  , properties.hse_feature_2  , properties.hse_feature_3  , properties.oth_feature_1  , properties.oth_feature_2  , properties.oth_feature_3  , properties.shp_feature_1  , properties.shp_feature_2  , properties.shp_feature_3  , properties.other_property_details from ref_feature_types  , ref_property_types  , other_available_features  , properties  , other_property_features where other_available_features.feature_type_code = ref_feature_types.feature_type_code and properties.property_type_code = ref_property_types.property_type_code and other_property_features.property_id = properties.property_id and other_property_features.feature_id = other_available_features.feature_id", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### የዚያ ኮድ ንብረት የሆኑ ንብረቶች የንብረት አይነት መግለጫዎችን አሳይ። \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
{"db_id": "real_estate_properties", "question": "ከ 1 ክፍል በላይ ያላቸው ቤቶች ወይም አፓርታማዎች የንብረት ስሞች ምንድ ናቸው?", "query": "select property_name from properties where property_type_code = 'House' union select property_name from properties where property_type_code = 'Apartment' and room_count > 1", "predicted_sql": "select properties.property_name  , properties.property_address from properties", "model": "gpt-3.5-turbo-0613", "prompt": "\n        ### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n#\n         | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name | ref_property_types : ref_property_types.property_type_code , ref_property_types.property_type_description | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description | properties : properties.property_id , properties.property_type_code , properties.date_on_market , properties.date_sold , properties.property_name , properties.property_address , properties.room_count , properties.vendor_requested_price , properties.buyer_offered_price , properties.agreed_selling_price , properties.apt_feature_1 , properties.apt_feature_2 , properties.apt_feature_3 , properties.fld_feature_1 , properties.fld_feature_2 , properties.fld_feature_3 , properties.hse_feature_1 , properties.hse_feature_2 , properties.hse_feature_3 , properties.oth_feature_1 , properties.oth_feature_2 , properties.oth_feature_3 , properties.shp_feature_1 , properties.shp_feature_2 , properties.shp_feature_3 , properties.other_property_details | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description | other_available_features.feature_type_code = ref_feature_types.feature_type_code | properties.property_type_code = ref_property_types.property_type_code | other_property_features.property_id = properties.property_id | other_property_features.feature_id = other_available_features.feature_id# \n ### ከ 1 ክፍል በላይ ያላቸው ቤቶች ወይም አፓርታማዎች የንብረት ስሞች ምንድ ናቸው? \n SELECT\n        ", "tc_original": ["ref_feature_types.*", "ref_feature_types.feature_type_code", "ref_feature_types.feature_type_name", "ref_property_types.*", "ref_property_types.property_type_code", "ref_property_types.property_type_description", "other_available_features.*", "other_available_features.feature_id", "other_available_features.feature_type_code", "other_available_features.feature_name", "other_available_features.feature_description", "properties.*", "properties.property_id", "properties.property_type_code", "properties.date_on_market", "properties.date_sold", "properties.property_name", "properties.property_address", "properties.room_count", "properties.vendor_requested_price", "properties.buyer_offered_price", "properties.agreed_selling_price", "properties.apt_feature_1", "properties.apt_feature_2", "properties.apt_feature_3", "properties.fld_feature_1", "properties.fld_feature_2", "properties.fld_feature_3", "properties.hse_feature_1", "properties.hse_feature_2", "properties.hse_feature_3", "properties.oth_feature_1", "properties.oth_feature_2", "properties.oth_feature_3", "properties.shp_feature_1", "properties.shp_feature_2", "properties.shp_feature_3", "properties.other_property_details", "other_property_features.*", "other_property_features.property_id", "other_property_features.feature_id", "other_property_features.property_feature_description"]}
